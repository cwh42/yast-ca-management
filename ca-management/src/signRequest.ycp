/**
 *
 * File:
 *   signRequest.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Signing a request
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Signing a request
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";
    include "ca-management/new_cert_read_write.ycp";

    // Description of the current Request
    map currentRequestMap = $[];
    
    /**
     * getRequestDescription - description of a request
     * @param map of description, onlySubject
     * @return a string with the request description  
     */      
    define string getRequestDescription (map requestMap, boolean onlySubject) ``{
	string text = _("<p><b>Description</b></p>");
        if (requestMap == nil)
        {
            showErrorCaManagement ();
            return _("\nRequest not found");
        }
	text = text + "<pre>";
	map dn = requestMap["DN_HASH"]:$[];
	if (size (dn) > 0)
	{
	    text = text + "\nCommon Name:        " + ((list)dn["CN"]:[])[0]:"";
	    if (size (requestMap["date"]:"") > 0)
	    {
		text = text + "\ngeneration Time:    " + requestMap["date"]:"";	
	    }
	    text = text + "\nOrganization:       " + ((list)dn["O"]:[])[0]:"";
	    text = text + "\nLocation:           " + ((list)dn["L"]:[])[0]:"";	    
	    text = text + "\nState:              " + ((list)dn["ST"]:[])[0]:"";
	    text = text + "\nCountry:            " + ((list)dn["C"]:[])[0]:"";
	    text = text + "\nEMAIL:              " + ((list)dn["EMAILADDRESS"]:[])[0]:"";
	}
	if (!onlySubject)
	{
	    text = text + "\nIs CA:              " + requestMap["IS_CA"]:"";
	    text = text + "\nKey Size:           " + requestMap["KEYSIZE"]:"";
	    text = text + "\nVersion:            " + requestMap["VERSION"]:"";	
	    text = text + "\nalgo. of pub. Key : " + requestMap["PUBKEY_ALGORITHM"]:"";
	    text = text + "\nalgo. of signature: " + requestMap["SIGNATURE_ALGORITHM"]:"";
	}
	text = text + "</pre>";	
	return text;
    }

    /**
     * Creates Request Extention items
     * @return a list items formated for a UI Multiselectionbox
     */
    define list<term> createExtentionItem () ``{
	map requestMap = (map) YaPI::CaManagement::ReadRequest ($["caName":CaMgm::currentCA,
								  "request":CaMgm::currentRequest,
								  "type":"parsed"]);

	map<string,list> opensslExtentions = requestMap["OPENSSL_EXTENSIONS"]:$[];
        list<term> result = [];
	foreach (string key, map value, CaMgm::requestExtentionValue, ``{
	    if (key != "certificatePolicies")
	    {
		// this key will be ignored
		result = add (result, `item (`id (key), value["description"]:"" + ": "
					     + mergestring ((list<string>) opensslExtentions[value["description"]:""]:[], " "),
					     contains (CaMgm::slectedRequestExtention, key)));
	    }
	    else
	    {
		y2milestone ("Ignoring certificatePolicies");
	    }
	});
        return result;
    }

    /**
     * Reset an accpetation of a RequestExtention
     * @param request extention
     * @return void
     */
    define void unsetRequestExtentions (string extention)``{

	y2milestone("Unset requestExtention %1", extention);
	if (extention == "subjectKeyIdentifier")
	{
	    CaMgm::exp_cri_subjectKeyIdentifier = sav_exp_cri_subjectKeyIdentifier;
	    CaMgm::exp_subjectKeyIdentifier = sav_exp_subjectKeyIdentifier;
	}
	else if (extention == "subjectAltName")
	{
	    CaMgm::adv_cri_subject_alt_name = sav_adv_cri_subject_alt_name;
	    CaMgm::adv_copy_subject_alt_name = sav_adv_copy_subject_alt_name;
	}
	else if (extention == "basicConstraints")
	{
	    CaMgm::adv_pathlen = sav_adv_pathlen;
	    CaMgm::adv_pathlenValue = sav_adv_pathlenValue;
	    CaMgm::adv_cri_ca = sav_adv_cri_ca;
	    CaMgm::adv_ca = sav_adv_ca;
	}
	else if (extention == "keyUsage")
	{
	    CaMgm::adv_cri_key_usage = sav_adv_cri_key_usage;
	    CaMgm::adv_digitalSignature = sav_adv_digitalSignature;
	    CaMgm::adv_nonRepudiation = sav_adv_nonRepudiation;
	    CaMgm::adv_cRLSign = sav_adv_cRLSign;
	    CaMgm::adv_keyEncipherment = sav_adv_keyEncipherment;
	    CaMgm::adv_dataEncipherment = sav_adv_dataEncipherment;
	    CaMgm::adv_encipherOnly = sav_adv_encipherOnly;
	    CaMgm::adv_keyAgreement = sav_adv_keyAgreement;
	    CaMgm::adv_keyCertSign = sav_adv_keyCertSign;
	    CaMgm::adv_decipherOnly = sav_adv_decipherOnly;
	}
	else if (extention == "extendedKeyUsage")
	{
	    CaMgm::exp_cri_extendedKeyUsage = sav_exp_cri_extendedKeyUsage;
	    CaMgm::exp_extendedKeyUsage = sav_exp_extendedKeyUsage;
	}
	else if (extention == "nsComment")
	{
	    CaMgm::adv_cri_nsComment = sav_adv_cri_nsComment;
	    CaMgm::adv_nsComment = sav_adv_nsComment;
	}
	else if (extention == "authorityKeyIdentifier")
	{
	    CaMgm::exp_cri_authorityKeyIdentifier = sav_exp_cri_authorityKeyIdentifier;
	    CaMgm::exp_authorityKeyIdentifier = sav_exp_authorityKeyIdentifier;
	}	    	    	    
	else if (extention == "nsCertType")
	{
	    CaMgm::adv_cri_nsCertType = sav_adv_cri_nsCertType;
	    CaMgm::adv_client = sav_adv_client;
	    CaMgm::adv_server = sav_adv_server;
	    CaMgm::adv_sslCA = sav_adv_sslCA;
	    CaMgm::adv_email = sav_adv_email;
	    CaMgm::adv_reserved = sav_adv_reserved;
	    CaMgm::adv_emailCA = sav_adv_emailCA;
	    CaMgm::adv_objsign = sav_adv_objsign;
	    CaMgm::adv_objCA = sav_adv_objCA;
	}
	else if (extention == "nsCaRevocationUrl")
	{
	    CaMgm::exp_cri_netscape_nsCaRevocationUrl = sav_exp_cri_netscape_nsCaRevocationUrl;
	    CaMgm::exp_netscape_nsCaRevocationUrl = sav_exp_netscape_nsCaRevocationUrl;
	}
	else if (extention == "nsCaPolicyUrl")
	{
	    CaMgm::exp_cri_netscape_nsCaPolicyUrl = sav_exp_cri_netscape_nsCaPolicyUrl;
	    CaMgm::exp_netscape_nsCaPolicyUrl = sav_exp_netscape_nsCaPolicyUrl;
	}
	else if (extention == "nsBaseUrl")
	{
	    CaMgm::exp_cri_netscape_nsBaseUrl = sav_exp_cri_netscape_nsBaseUrl;
	    CaMgm::exp_netscape_nsBaseUrl = sav_exp_netscape_nsBaseUrl;
	}
	else if (extention == "nsRenewalUrl")
	{
	    CaMgm::exp_cri_netscape_nsRenewalUrl = sav_exp_cri_netscape_nsRenewalUrl;
	    CaMgm::exp_netscape_nsRenewalUrl = sav_exp_netscape_nsRenewalUrl;
	}
	else if (extention == "nsRevocationUrl")
	{
	    CaMgm::exp_cri_netscape_nsRevocationUrl = sav_exp_cri_netscape_nsRevocationUrl;
	    CaMgm::exp_netscape_nsRevocationUrl = sav_exp_netscape_nsRevocationUrl;
	}
	else if (extention == "nsSslServerName")
	{
	    CaMgm::adv_cri_nsSslServerName = sav_adv_cri_nsSslServerName;
	    CaMgm::adv_nsSslServerName = sav_adv_nsSslServerName;
	}
	else if (extention == "issuserAltName")
	{
	    CaMgm::adv_cri_issuer_alt_name = sav_adv_cri_issuer_alt_name;
	    CaMgm::adv_copy_subject_alt_name = sav_adv_copy_subject_alt_name;
	}
	else if (extention == "crlDistributionPoints")
	{
	    CaMgm::adv_cri_distribution_point = sav_adv_cri_distribution_point;
	    CaMgm::adv_distribution_point = sav_adv_distribution_point;
	}
	else if (extention == "authorityInfoAccess")
	{
	    CaMgm::exp_authorityInfoAccess = sav_exp_authorityInfoAccess;
	    CaMgm::exp_cri_authorityInfoAccess = sav_exp_cri_authorityInfoAccess;	
	}
	else if (extention == "certificatePolicies")
	{
	    y2milestone("certificatePolicies ignored");
	}	
	else
	{
	    Popup::Error (sformat(_("Extention \"%1\" not found."), extention));
	}
    }    
    
    /**
     * The user has decide that given request extention
     * will be used. --> setting for signation
     * @param request extention
     * @return void
     */
    define void setRequestExtentions (string extention)``{

	y2milestone("Set requestExtention %1", extention);
	y2milestone("requestExtention %1", CaMgm::requestExtentionValue[extention]:$[]);
	
	map extMap = CaMgm::requestExtentionValue[extention]:$[];
	
	if (extention == "subjectKeyIdentifier")
	{
	    CaMgm::exp_cri_subjectKeyIdentifier = extMap["critical"]:"0" == "1";
	    CaMgm::exp_subjectKeyIdentifier = "";
	    integer counter = 0;
	    
	    foreach ( string entry, (list<string>) extMap["value"]:[], ``{
		if (counter == 0)
		{
		    CaMgm::exp_subjectKeyIdentifier = CaMgm::exp_subjectKeyIdentifier +
			entry;
		}
		else
		{
		    CaMgm::exp_subjectKeyIdentifier = CaMgm::exp_subjectKeyIdentifier +
			"," + entry;
		}
		counter = counter +1;			
	    });
	}
	else if (extention == "subjectAltName")
	{
	    CaMgm::adv_subject_alt_name_list = [];
	    CaMgm::adv_cri_subject_alt_name = extMap["critical"]:"0" == "1";
	    CaMgm::adv_copy_subject_alt_name = false;
	    
	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		map new_entry = $[];
		new_entry["kind"] = entry["type"]:"";
		new_entry["name"] = entry["value"]:"";
		CaMgm::adv_subject_alt_name_list = add (CaMgm::adv_subject_alt_name_list, new_entry);
	    });
	}
	else if (extention == "basicConstraints")
	{
	    CaMgm::adv_cri_ca = extMap["critical"]:"0" == "1";
	    CaMgm::adv_ca = "";
	    
	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		if (entry["value"]:"" == "false"
		    || entry["value"]:"" == "FALSE" )
		{
		    CaMgm::adv_ca = entry["type"]:"" + ":false";
		}
		else
		{
		    CaMgm::adv_ca =  entry["type"]:"" + ":true";
		}
	    });	    
	}
	else if (extention == "keyUsage")
	{
	    CaMgm::adv_cri_key_usage = extMap["critical"]:"0" == "1";
	    CaMgm::adv_digitalSignature = false;
	    CaMgm::adv_nonRepudiation = false;
	    CaMgm::adv_cRLSign = false;
	    CaMgm::adv_keyEncipherment = false;
	    CaMgm::adv_dataEncipherment = false;
	    CaMgm::adv_encipherOnly = false;
	    CaMgm::adv_keyAgreement = false;
	    CaMgm::adv_keyCertSign = false;
	    CaMgm::adv_decipherOnly = false;
	    
	    foreach ( string entry, (list<string>) extMap["value"]:[], ``{
		if (entry == "digitalSignature")
		{
		    CaMgm::adv_digitalSignature = true;
		}
		else if (entry == "nonRepudiation")
		{
		    CaMgm::adv_nonRepudiation = true;
		}
		else if (entry == "cRLSign")
		{
		    CaMgm::adv_cRLSign = true;
		}
		else if (entry == "keyEncipherment")
		{
		    CaMgm::adv_keyEncipherment = true;
		}
		else if (entry == "dataEncipherment")
		{
		    CaMgm::adv_dataEncipherment = true;
		}
		else if (entry == "encipherOnly")
		{
		    CaMgm::adv_encipherOnly = true;
		}
		else if (entry == "keyAgreement")
		{
		    CaMgm::adv_keyAgreement = true;
		}
		else if (entry == "keyCertSign")
		{
		    CaMgm::adv_keyCertSign = true;
		}
		else if (entry == "decipherOnly")
		{
		    CaMgm::adv_decipherOnly = true;
		}	    	    	    	    	    
	    });
	}
	else if (extention == "extendedKeyUsage")
	{
	    CaMgm::exp_cri_extendedKeyUsage = extMap["critical"]:"0" == "1";
	    CaMgm::exp_extendedKeyUsage = "";
	    
	    integer counter = 0;
	    foreach ( string entry, (list<string>) extMap["value"]:[], ``{
		if (counter == 0)
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			entry;
		}
		else
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			"," + entry;
		}
		counter = counter +1;			
	    });
	}
	else if (extention == "nsComment")
	{
	    CaMgm::adv_cri_nsComment = extMap["critical"]:"0" == "1";
	    CaMgm::adv_nsComment = extMap["value"]:"";
	}
	else if (extention == "authorityKeyIdentifier")
	{
	    CaMgm::exp_cri_authorityKeyIdentifier = extMap["critical"]:"0" == "1";
	    CaMgm::exp_authorityKeyIdentifier = "";

	    integer counter = 0;
	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		if (counter == 0)
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			entry["type"]:"" + ((size(entry["value"]:"") > 0) ? ":" : "") + entry["value"]:"";
		}
		else
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			"," + entry["type"]:"" + ((size(entry["value"]:"") > 0) ? ":" : "") + entry["value"]:"";
		}
		counter = counter +1;
	    });
	    CaMgm::exp_authorityKeyIdentifier = strip (CaMgm::exp_authorityKeyIdentifier);
	}	    	    	    
	else if (extention == "nsCertType")
	{
	    CaMgm::adv_cri_nsCertType = extMap["critical"]:"0" == "1";
	    CaMgm::adv_client = false;
	    CaMgm::adv_server = false;
	    CaMgm::adv_sslCA = false;
	    CaMgm::adv_email = false;
	    CaMgm::adv_reserved = false;
	    CaMgm::adv_emailCA = false;
	    CaMgm::adv_objsign = false;
	    CaMgm::adv_objCA = false;
	    
	    foreach ( string entry, (list<string>) extMap["value"]:[], ``{
		if (entry == "client")
		{
		    CaMgm::adv_client = true;
		}
		else if (entry == "server")
		{
		    CaMgm::adv_server = true;
		}
		else if (entry == "sslCA")
		{
		    CaMgm::adv_sslCA = true;
		}
		else if (entry == "email")
		{
		    CaMgm::adv_email = true;
		}	    
		else if (entry == "reserved")
		{
		    CaMgm::adv_reserved = true;
		}	    	
		else if (entry == "emailCA")
		{
		    CaMgm::adv_emailCA = true;
		}
		else if (entry == "objsign")
		{
		    CaMgm::adv_objsign = true;
		}
		else if (entry == "objCA")
		{
		    CaMgm::adv_objCA = true;
		}
	    });
	}
	else if (extention == "nsCaRevocationUrl")
	{
	    CaMgm::exp_cri_netscape_nsCaRevocationUrl = extMap["critical"]:"0" == "1";
	    CaMgm::exp_netscape_nsCaRevocationUrl = extMap["value"]:"";
	}
	else if (extention == "nsCaPolicyUrl")
	{
	    CaMgm::exp_cri_netscape_nsCaPolicyUrl = extMap["critical"]:"0" == "1";
	    CaMgm::exp_netscape_nsCaPolicyUrl = extMap["value"]:"";
	}
	else if (extention == "nsBaseUrl")
	{
	    CaMgm::exp_cri_netscape_nsBaseUrl = extMap["critical"]:"0" == "1";
	    CaMgm::exp_netscape_nsBaseUrl = extMap["value"]:"";
	}
	else if (extention == "nsRenewalUrl")
	{
	    CaMgm::exp_cri_netscape_nsRenewalUrl = extMap["critical"]:"0" == "1";
	    CaMgm::exp_netscape_nsRenewalUrl = extMap["value"]:"";
	}
	else if (extention == "nsRevocationUrl")
	{
	    CaMgm::exp_cri_netscape_nsRevocationUrl = extMap["critical"]:"0" == "1";
	    CaMgm::exp_netscape_nsRevocationUrl = extMap["value"]:"";
	}
	else if (extention == "nsSslServerName")
	{
	    CaMgm::adv_cri_nsSslServerName = extMap["critical"]:"0" == "1";
	    CaMgm::adv_nsSslServerName = extMap["value"]:"";
	}
	else if (extention == "issuserAltName")
	{
	    CaMgm::adv_issuer_alt_name_list = [];
	    CaMgm::adv_cri_issuer_alt_name = extMap["critical"]:"0" == "1";
	    CaMgm::adv_copy_subject_alt_name = false;
	    
	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		map new_entry = $[];
		new_entry["kind"] = entry["type"]:"";
		new_entry["name"] = entry["value"]:"";
		CaMgm::adv_issuer_alt_name_list = add (CaMgm::adv_issuer_alt_name_list, new_entry);
	    });
	}
	else if (extention == "crlDistributionPoints")
	{
	    CaMgm::adv_cri_distribution_point = extMap["critical"]:"0" == "1";
	    CaMgm::adv_distribution_point = "";
	    integer counter = 0;

	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		if (counter == 0)
		{
		    CaMgm::adv_distribution_point = CaMgm::adv_distribution_point +
			entry["type"]:"" + ((size(entry["value"]:"") > 0) ? ":" : "") + entry["value"]:"";
		}
		else
		{
		    CaMgm::adv_distribution_point = CaMgm::adv_distribution_point +
			"," + entry["type"]:"" + ((size(entry["value"]:"") > 0) ? ":" : "") + entry["value"]:"";
		}
		counter = counter +1;
	    });
	}
	else if (extention == "authorityInfoAccess")
	{
	    CaMgm::exp_cri_authorityInfoAccess = extMap["critical"]:"0" == "1";
	    CaMgm::exp_authorityInfoAccess = "";

	    integer counter = 0;

	    foreach ( map entry, (list<map>) extMap["value"]:[], ``{
		if (counter == 0)
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			entry["accessOID"]:"" + ";"
			+ entry["type"]:""
			+ ((size(entry["value"]:"") > 0) ? ":" : "")
			+ entry["value"]:"";
		}
		else
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			","
			+ entry["accessOID"]:"" + ";"
			+ entry["type"]:""
			+ ((size(entry["value"]:"") > 0) ? ":" : "")
			+ entry["value"]:"";
		}
		counter = counter +1;
	    });	    
	}	
	else if (extention == "certificatePolicies")
	{
	    y2milestone("certificatePolicies ignored");
	}	
	else
	{
	    Popup::Error (sformat(_("Extention \"%1\" not found."), extention));
	}
    }

    /**
     * setExtentionValues - Accept special extention values
     * @param list of accepted extentions
     */
    define void setExtentionValues (list<string> acceptedExtentions)``{
	foreach( string extention, acceptedExtentions, ``{
	    // setting all accepted extentions
	    setRequestExtentions (extention);
	});

	foreach( string extention, CaMgm::slectedRequestExtention, ``{
	    if (!contains (acceptedExtentions, extention))
	    {
		//set to defaults
		unsetRequestExtentions (extention);
	    }
	});

	CaMgm::slectedRequestExtention = acceptedExtentions;
    }
    
   /**
     * Values initializing for creating a Request
     * @param kind ("Client Request","Server Request","CA Request")
     * @return `next,`abort
     */
    define symbol signRequestInit (string kind) ``{
	currentRequestMap = (map) YaPI::CaManagement::ReadRequest ($["caName":CaMgm::currentCA,
							   "request":CaMgm::currentRequest,
							   "type":"extended"]);
	y2milestone("ReadRequest(%1,%2): %3", CaMgm::currentCA, CaMgm::currentRequest, currentRequestMap);
        if (currentRequestMap == nil)
        {
            showErrorCaManagement ();
            return `abort;
        }

	CaMgm::slectedRequestExtention = [];
	CaMgm::requestExtentionValue = $[];
	CaMgm::requestKind = "";
	CaMgm::requestSubject = "";
	CaMgm::validPeriod = 30;

	// IS CA ?
	if (currentRequestMap["IS_CA"]:"" == "1")
	{
	    if (kind != "CA Request")
	    {
		string message = sformat(_("This is a CA Request. Do you really want to sign it as a %1?"),
					 kind );
		if (!Popup::YesNo (message))
		{
		    return `abort;
		}
	    }
	}
	else
	{
	    if (kind == "CA Request")
	    {
		string message = _("This is NOT a CA Request. Do you really want to sign it as a CA Request?");
		if (!Popup::YesNo (message))
		{
		    return `abort;
		}
	    }
	}
	    
	if (kind == "CA Request")
	{
	    new_cert_init("Sub CA");
	    CaMgm::requestKind = "ca";
	}
	else if (kind == "Server Request")
	{
	    new_cert_init("Server Certificate");
	    CaMgm::requestKind = "server";		
	}
	else if (kind == "Client Request")
	{
	    new_cert_init("Client Certificate");
	    CaMgm::requestKind = "client";				
	}

	// Subject
	CaMgm::requestSubject = currentRequestMap["DN"]:"";

	// Filling up reqeust extentions
	map<string,map> opensslExtentions = currentRequestMap["OPENSSL_EXTENSIONS"]:$[];
	foreach (string key, map value, opensslExtentions, {
	    if (contains (CaMgm::validRequestExtention,key))
	    {
		CaMgm::requestExtentionValue = add (CaMgm::requestExtentionValue, key, value);
	    }
	    else
	    {
		Popup::Error (sformat(_("Extention \"%1\" not found."), key));
	    }		
	});
	    	
	new_cert_save_default();

	return `next;
    }


    
    /**
     * Signing a request ( 1. step )
     * @param kind ("Client Request","Server Request","CA Request")     
     * @return `next, 'abort
     */
    define symbol signRequest1 (string kind) ``{

	string helptext	= "";
        // help text 1/3
	helptext = _("<p>This frame shows the signing request.</p>");

        // help text 2/3 
        helptext = helptext + _("<p>The request has special <b>request extentions</b> which you can accept.</p>");
        // help text 3/3
	helptext = helptext + _("<p>If you reject these extentions the default values will be taken instead.</p>");

        term contents = `VBox (
			       `Left(`RichText(getRequestDescription (currentRequestMap, true))),
			       `IntField( `id(`period), _("&Valid Period (days):"),  1, 10000, CaMgm::validPeriod),
			       `MultiSelectionBox( `id(`extentions), _("Requested Extentions which you can particular accept:"),
						   createExtentionItem ())
			       );

        Wizard::SetContents ( sformat(_("Sign Request as a %1 (step 1/2)"), kind), contents, helptext, true, true);
	Wizard::RestoreNextButton();
	Wizard::DisableBackButton();
	UI::SetFocus(`id(`period));
	
        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		CaMgm::validPeriod = (integer) UI::QueryWidget(`id(`period), `Value);
		 setExtentionValues((list<string>) UI::QueryWidget( `id(`extentions), `SelectedItems ));
	    }
        }
        until (contains ([`next, `abort], ui));

        return ui;
    }


    /**
     * Signing request ( 2. step )
     * @param kind ("Client Request","Server Request","CA Request")     
     * @return `next, 'back, 'cancel, `advancedOptions
     */
    define symbol signRequest2 (string kind) ``{

	integer i = 0;
	boolean nextLine = false;
	
        // help text 1/2
        string helptext = _("<p>This frame gives an overview of all settings for the request that will be signed.</p>");
        // help text 2/2
        helptext = helptext + _("<p>Click <b>Sign Request</b> to go on.</p>");

	string text = _("<p><b>Summary</b></p>");
	text = text + "<br><pre>";
	text = text + "Subject:                  "  + CaMgm::requestSubject;
	text = text + "Valid Period:             " + CaMgm::validPeriod + _(" days\n");
	text = text + "<p>Basic Constaints:         " + CaMgm::adv_ca
	    + (CaMgm::adv_cri_ca ? _(" (critical)</p>") : "</p>") ;
	if (CaMgm::adv_pathlen)
	{
	    text = text +  "                          "  + _("Path Length ") + CaMgm::adv_pathlenValue + "\n"; 
	}
	if (size (CaMgm::adv_nsComment) > 0)
	{	
	    text = text + _("nsComment:                ") + CaMgm::adv_nsComment
		+ (CaMgm::adv_cri_nsComment ? _(" (critical)\n") : "\n") ;
	}
	if (CaMgm::adv_client
	    || CaMgm::adv_server
	    || CaMgm::adv_sslCA
	    || CaMgm::adv_email
	    || CaMgm::adv_reserved
	    || CaMgm::adv_emailCA
	    || CaMgm::adv_objsign
	    || CaMgm::adv_objCA)
	{
	    text = text + _("nsCertType:               ")
		+ (CaMgm::adv_cri_nsCertType ? _(" (critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_nsCertType;
	    if (CaMgm::adv_client)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "client\n";
		}
		else
		{
		    text = text + "                          " + "client\n";
		}	    
	    }
	    if (CaMgm::adv_server)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "server\n";
		}
		else
		{
		    text = text + "                          " + "server\n";
		}	    
	    }
	    if (CaMgm::adv_sslCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "sslCA\n";
		}
		else
		{
		    text = text + "                          " + "sslCA\n";
		}	    
	    }
	    if (CaMgm::adv_email)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "email\n";
		}
		else
		{
		    text = text + "                          " + "email\n";
		}	    
	    }
	    if (CaMgm::adv_reserved)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "reserved\n";
		}
		else
		{	
		    text = text + "                          " + "reserved\n";
		}	    
	    }
	    
	    if (CaMgm::adv_emailCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "emailCA\n";
		}
		else
		{
		    text = text + "                          " + "emailCA\n";
		}	    
	    }
	    if (CaMgm::adv_objsign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objsign\n";
		}
		else
		{
		    text = text + "                          " + "objsign\n";
		}	    
	    }
	    if (CaMgm::adv_objCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objCA\n";
		}
		else
		{
		    text = text + "                          " + "objCA\n";
		}	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
 	if (size (CaMgm::exp_extendedKeyUsage) > 0)
	{	
	    text = text +   "extendedKeyUsage:         "  + CaMgm::exp_extendedKeyUsage
		+ (CaMgm::exp_cri_extendedKeyUsage ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_subjectKeyIdentifier) > 0)
	{	
	    text = text +   "Subject Key Identifier:   "  + CaMgm::exp_subjectKeyIdentifier
		+ (CaMgm::exp_cri_subjectKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}	
 	if (size (CaMgm::exp_authorityKeyIdentifier) > 0)
	{	
	    text = text +   "Authority Key Identifier: "  + CaMgm::exp_authorityKeyIdentifier
		+ (CaMgm::exp_cri_authorityKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}
	if (size (CaMgm::adv_subject_alt_name_list) > 0
	    || CaMgm::adv_copy_subject_alt_name)
	{	
	    text = text + "Subject Alt Name:         "
		+ (CaMgm::adv_cri_subject_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_subject_alt_name ?   _("Copy Standard E-Mail Address"): "");
	    i = 0;
	    if (CaMgm::adv_cri_subject_alt_name
		|| CaMgm::adv_copy_subject_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_subject_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}
	if (size (CaMgm::adv_issuer_alt_name_list) > 0
	    || CaMgm::adv_copy_issuer_alt_name)
	{	
	    text = text + "Issuer Alt Name:          "
		+ (CaMgm::adv_cri_issuer_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_issuer_alt_name ?  _("Copy Subject Alt Name from CA"): "");
	    i = 0;
	    if (CaMgm::adv_cri_issuer_alt_name
		|| CaMgm::adv_copy_issuer_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}
 	if (size (CaMgm::exp_netscape_nsBaseUrl) > 0)
	{	
	    text = text +   "nsBaseUrl:                "  + CaMgm::exp_netscape_nsBaseUrl
		+ (CaMgm::exp_cri_netscape_nsBaseUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsRevocationUrl) > 0)
	{	
	    text = text +   "nsRevocationUrl:          "  + CaMgm::exp_netscape_nsRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaRevocationUrl) > 0)
	{	
	    text = text +   "nsCaRevocationUrl:        "  + CaMgm::exp_netscape_nsCaRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsCaRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
	if (CaMgm::adv_digitalSignature
	    || CaMgm::adv_nonRepudiation
	    || CaMgm::adv_cRLSign
	    || CaMgm::adv_keyEncipherment
	    || CaMgm::adv_dataEncipherment
	    || CaMgm::adv_encipherOnly
	    || CaMgm::adv_keyAgreement
	    || CaMgm::adv_keyCertSign
	    || CaMgm::adv_decipherOnly)
	{		
	    text = text + "Key Usage:                "
		+ (CaMgm::adv_cri_key_usage ? _("(critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_key_usage;
	    if (CaMgm::adv_digitalSignature)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "digitalSignature\n";
		}
		else
		{
		    text = text + "                          " + "digitalSignature\n";
		}	    
	    }
	    if (CaMgm::adv_nonRepudiation)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "nonRepudiation\n";
		}
		else
		{
		    text = text + "                          " + "nonRepudiation\n";
		}	    
	    }
	    if (CaMgm::adv_cRLSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "cRLSign\n";
		}
		else
		{
		    text = text + "                          " + "cRLSign\n";
		}	    
	    }
	    if (CaMgm::adv_keyEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "keyEncipherment\n";
		}	    	    
	    }
	    if (CaMgm::adv_dataEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "dataEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "dataEncipherment\n";
		}	    
	    }
	    
	    if (CaMgm::adv_encipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "encipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "encipherOnly\n";
		}	    
	    }
	    if (CaMgm::adv_keyAgreement)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyAgreement\n";
		}
		else
		{
		    text = text + "                          " + "keyAgreement\n";
		}	    
	    }
	    if (CaMgm::adv_keyCertSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyCertSign\n";
		}
		else
		{
		    text = text + "                          " + "keyCertSign\n";
		}	    
	    }
	    if (CaMgm::adv_decipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "decipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "decipherOnly\n";
		}   	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
 	if (size (CaMgm::exp_netscape_nsRenewalUrl) > 0)
	{	
	    text = text +   "nsRenewalUrl:             "  + CaMgm::exp_netscape_nsRenewalUrl
		+ (CaMgm::exp_cri_netscape_nsRenewalUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaPolicyUrl) > 0)
	{	
	    text = text +   "nsCaPolicyUrl:            "  + CaMgm::exp_netscape_nsCaPolicyUrl
		+ (CaMgm::exp_cri_netscape_nsCaPolicyUrl ? _(" (critical)\n") : "\n") ;
	}
	if (size (CaMgm::adv_nsSslServerName) > 0)
	{	
	    text = text + "nsSslServerName:          " + CaMgm::adv_nsSslServerName
		+ (CaMgm::adv_cri_nsSslServerName ? _(" (critical)\n") : "\n") ;
	}
	if (size (CaMgm::adv_distribution_point) > 0)
	{
	    text = text + "CRL Distribution Point:   " + CaMgm::adv_distribution_point
		+ (CaMgm::adv_cri_distribution_point ? _(" (critical)\n") : "\n") ;
	}	
 	if (size (CaMgm::exp_authorityInfoAccess) > 0)
	{	
	    text = text +   "authorityInfoAccess:      "  + CaMgm::exp_authorityInfoAccess
		+ (CaMgm::exp_cri_authorityInfoAccess ? _(" (critical)\n") : "\n") ;
	}
	
	text = text + "</pre>";

        term contents = `VBox ();
        contents = add (contents, `RichText(text));
	contents = add (contents, `Right(`PushButton (`id (`edit), `opt (`key_F4), _("&Edit Request"))));

                                // To translators: dialog label
        Wizard::SetContents ( sformat(_("Sign Request as a %1 (step 2/2)"), kind), contents, helptext, true, true);
	Wizard::SetNextButton(`next, _("Sign Request") );

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		//signing request
		if (!cert_write("signRequest"))
		{
		    showErrorCaManagement ();
		    ui = `again;
		}
		else
		{
		    Popup::Message(_("Request has been signed."));
		}
	    }
        }
        until (contains ([`back, `next, `abort, `edit], ui));
	
        return ui;
    }


}
