/**
 *
 * File:
 *   new_cert_read_write.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Reading default settings; Generating CA/Request/Certificat
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Creating a new CA/Certificate
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Popup";
    import "Language";    
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";

    
    /**
     * Values initializing for creating CA/Certificate/Request
     * @param kind ("Root CA","Sub CA","Client Certificate","Server Certificate","Client Request","Server Request", "Sub CA Request")
     * @return `next
     */
    define symbol new_cert_init (string kind) ``{

	CaMgm::emailList = [];
 	CaMgm::commonName = "";
 	CaMgm::CAName = "";
 	CaMgm::organisation = "";
 	CaMgm::organisationUnit = "";
 	CaMgm::locality = "";
 	CaMgm::state = "";
 	CaMgm::country = "GB";
 	CaMgm::password = "";
 	CaMgm::verifyPassword = "";
 	CaMgm::keyLength = 1024;
 	CaMgm::validPeriod = 365;
 	CaMgm::adv_cri_ca = false;
 	CaMgm::adv_ca = "none";
	CaMgm::adv_pathlen = false;
	CaMgm::adv_pathlenValue = 1;
	CaMgm::adv_cri_distribution_point = false;
	CaMgm::adv_distribution_point = "";
	CaMgm::adv_challenge_password = "";
 	CaMgm::adv_cri_issuer_alt_name = false;
 	CaMgm::adv_copy_issuer_alt_name = false;
	CaMgm::adv_copy_issuer_alt_name_enabled = false;	
	CaMgm::adv_issuer_alt_name_list = [];
 	CaMgm::adv_cri_key_usage = false;
 	CaMgm::adv_digitalSignature = false;
 	CaMgm::adv_nonRepudiation = false;
	CaMgm::adv_cRLSign = false;
	CaMgm::adv_keyEncipherment = false;
	CaMgm::adv_dataEncipherment = false;
	CaMgm::adv_encipherOnly = false;
	CaMgm::adv_keyAgreement = false;
	CaMgm::adv_keyCertSign = false;
	CaMgm::adv_decipherOnly = false;
	CaMgm::adv_cri_nsComment = false;
	CaMgm::adv_nsComment = "";
	CaMgm::adv_cri_nsCertType = false;
	CaMgm::adv_client = false;
	CaMgm::adv_server = false;
	CaMgm::adv_sslCA = false;
	CaMgm::adv_email = false;
	CaMgm::adv_reserved = false;
	CaMgm::adv_emailCA = false;
	CaMgm::adv_objsign = false;
	CaMgm::adv_objCA = false;
	CaMgm::adv_cri_nsSslServerName = false;
	CaMgm::adv_nsSslServerName = "";
 	CaMgm::adv_cri_subject_alt_name = false;
 	CaMgm::adv_copy_subject_alt_name = false;
	CaMgm::adv_subject_alt_name_list = [];
	CaMgm::adv_unstructured_name = "";
	CaMgm::exp_cri_subjectKeyIdentifier = false;
	CaMgm::exp_subjectKeyIdentifier = "";
	CaMgm::exp_cri_authorityKeyIdentifier = false;
	CaMgm::exp_authorityKeyIdentifier = "";
	CaMgm::exp_cri_netscape_nsBaseUrl = false;
	CaMgm::exp_netscape_nsBaseUrl = "";
 	CaMgm::exp_cri_netscape_nsRevocationUrl = false;
	CaMgm::exp_netscape_nsRevocationUrl = "";
	CaMgm::exp_cri_netscape_nsCaRevocationUrl = false;
	CaMgm::exp_netscape_nsCaRevocationUrl = "";
	CaMgm::exp_cri_netscape_nsRenewalUrl = false;
	CaMgm::exp_netscape_nsRenewalUrl = "";
 	CaMgm::exp_cri_netscape_nsCaPolicyUrl = false;
	CaMgm::exp_netscape_nsCaPolicyUrl = "";
	CaMgm::exp_cri_authorityInfoAccess = false;
	CaMgm::exp_authorityInfoAccess = "";
	CaMgm::exp_cri_extendedKeyUsage = false;
	CaMgm::exp_extendedKeyUsage = "";

	map ret = nil;

	if (kind == "Root CA")
        {

	    CaMgm::currentCA = ""; // sign that a root CA will be created.
	    
            ret = (map) YaPI::CaManagement::ReadCertificateDefaults ($["certType":"ca"]);
	    y2milestone("ReadCertificateDefaults(%1): %2",
			$["certType":"ca"],
			ret);	    
        }
	if (kind == "Sub CA"
	    || kind == "Sub CA Request")
	{
	    ret = (map) YaPI::CaManagement::ReadCertificateDefaults ($["caName": CaMgm::currentCA, "certType":"ca"]);
	    y2milestone("ReadCertificateDefaults(%1): %2",
			$["caName": CaMgm::currentCA, "certType":"ca"],
			ret);
	}
	if (kind == "Server Certificate"
	    ||kind == "Server Request")
	{
	    ret = (map) YaPI::CaManagement::ReadCertificateDefaults ($["caName": CaMgm::currentCA, "certType":"server"]);
	    y2milestone("ReadCertificateDefaults(%1): %2",
			$["caName": CaMgm::currentCA, "certType":"server"],
			ret);			
	}
	if (kind == "Client Certificate"
	    ||kind == "Client Request")
	{
	    ret = (map) YaPI::CaManagement::ReadCertificateDefaults ($["caName": CaMgm::currentCA, "certType":"client"]);
	    y2milestone("ReadCertificateDefaults(%1): %2",
			$["caName": CaMgm::currentCA, "certType":"client"],
			ret);						
	}		
	if (ret == nil)
	{
	    showErrorCaManagement ();
	    return `next;
	}
	
 	CaMgm::keyLength = tointeger(ret["keyLength"]:"0");
 	CaMgm::validPeriod = tointeger(ret["days"]:"0");

	map<string,list> dn = ret["DN"]:$[];
 	CaMgm::organisation = ((list)dn["O"]:[])[0]:"";
 	CaMgm::organisationUnit = ((list)dn["OU"]:[])[0]:"";
 	CaMgm::locality = ((list)dn["L"]:[])[0]:"";
 	CaMgm::state = ((list)dn["ST"]:[])[0]:"";
 	CaMgm::country = ((list)dn["C"]:[])[0]:Language::GetLanguageCountry ();
	
	list<string> dummy = splitstring (ret["basicConstraints"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_ca = true;
	    }
	    if (ident == "CA")
	    {
		if (value == "false"
		    || value == "FALSE" )
		{
		    CaMgm::adv_ca = ident + ":false";
		}
		else
		{
		    CaMgm::adv_ca = ident + ":true";
		}
	    }
	    if (ident == "pathlen")
	    {
		CaMgm::adv_pathlen = true;
		CaMgm::adv_pathlenValue = tointeger (value);
	    }
	});

	dummy = splitstring (ret["crlDistributionPoints"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_distribution_point = true;
	    }
	    else
	    {
		CaMgm::adv_distribution_point = entry;
	    }
	});

	dummy = splitstring (ret["issuerAltName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_issuer_alt_name = true;
	    }
	    else if (ident == "issuer"
		     && value == "copy")
	    {
		CaMgm::adv_copy_issuer_alt_name = true;
	    }
	    else
	    {
		map new_entry = $[];
		new_entry["kind"] = ident;
		new_entry["name"] = value;
		CaMgm::adv_issuer_alt_name_list	= add (CaMgm::adv_issuer_alt_name_list, new_entry);
	    }
	});

	dummy = splitstring (ret["keyUsage"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_key_usage = true;
	    }
	    else if (entry == "digitalSignature")
	    {
		CaMgm::adv_digitalSignature = true;
	    }
	    else if (entry == "nonRepudiation")
	    {
		CaMgm::adv_nonRepudiation = true;
	    }
	    else if (entry == "cRLSign")
	    {
		CaMgm::adv_cRLSign = true;
	    }
	    else if (entry == "keyEncipherment")
	    {
		CaMgm::adv_keyEncipherment = true;
	    }
	    else if (entry == "dataEncipherment")
	    {
		CaMgm::adv_dataEncipherment = true;
	    }
	    else if (entry == "encipherOnly")
	    {
		CaMgm::adv_encipherOnly = true;
	    }
	    else if (entry == "keyAgreement")
	    {
		CaMgm::adv_keyAgreement = true;
	    }
	    else if (entry == "keyCertSign")
	    {
		CaMgm::adv_keyCertSign = true;
	    }
	    else if (entry == "decipherOnly")
	    {
		CaMgm::adv_decipherOnly = true;
	    }	    	    	    	    	    
	});

	dummy = splitstring (ret["nsComment"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsComment = true;
	    }
	    else
	    {
		CaMgm::adv_nsComment = entry;
	    }
	});

	dummy = splitstring (ret["nsCertType"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsCertType = true;
	    }
	    else if (entry == "client")
	    {
		CaMgm::adv_client = true;
	    }
	    else if (entry == "server")
	    {
		CaMgm::adv_server = true;
	    }
	    else if (entry == "sslCA")
	    {
		CaMgm::adv_sslCA = true;
	    }
	    else if (entry == "email")
	    {
		CaMgm::adv_email = true;
	    }	    
	    else if (entry == "reserved")
	    {
		CaMgm::adv_reserved = true;
	    }	    	
	    else if (entry == "emailCA")
	    {
		CaMgm::adv_emailCA = true;
	    }
	    else if (entry == "objsign")
	    {
		CaMgm::adv_objsign = true;
	    }
	    else if (entry == "objCA")
	    {
		CaMgm::adv_objCA = true;
	    }
	});
	    
	dummy = splitstring (ret["nsSslServerName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsSslServerName = true;
	    }
	    else
	    {
		CaMgm::adv_nsSslServerName = entry;
	    }
	});
	
	dummy = splitstring (ret["subjectAltName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_subject_alt_name = true;
	    }
	    else if (ident == "email"
		     && value == "copy")
	    {
		CaMgm::adv_copy_subject_alt_name = true;
	    }
	    else
	    {
		map new_entry = $[];
		new_entry["kind"] = ident;
		new_entry["name"] = value;
		CaMgm::adv_subject_alt_name_list = add (CaMgm::adv_subject_alt_name_list, new_entry);
	    }
	});

	dummy = splitstring (ret["subjectKeyIdentifier"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_subjectKeyIdentifier = true;
	    }
	    else
	    {
		CaMgm::exp_subjectKeyIdentifier = entry;
	    }
	});
	
	dummy = splitstring (ret["authorityKeyIdentifier"]:"", ",");
	integer counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_authorityKeyIdentifier = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			ident + ((size(value) > 0) ? ":" : "") + value;
		}
		else
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			"," + ident + ((size(value) > 0) ? ":" : "") + value;
		}
		counter = counter +1;
	    }
	});

	dummy = splitstring (ret["nsBaseUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsBaseUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsBaseUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsRevocationUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsRevocationUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsRevocationUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsCaRevocationUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsCaRevocationUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsCaRevocationUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsRenewalUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsRenewalUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsRenewalUrl = entry;
	    }
	});		

	dummy = splitstring (ret["nsCaPolicyUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsCaPolicyUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsCaPolicyUrl = entry;
	    }
	});		
	
	dummy = splitstring (ret["authorityInfoAccess"]:"", ",");
	counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_authorityInfoAccess = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			ident + ((size(value) > 0) ? ":" : "") + value;
		}
		else
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			"," + ident + ((size(value) > 0) ? ":" : "") + value;
		}
		counter = counter +1;				
	    }
	});

	dummy = splitstring (ret["extendedKeyUsage"]:"", ",");
	counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_extendedKeyUsage = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			ident + ((size(value) > 0) ? ":" : "") + value;
		}
		else
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			"," + ident + ((size(value) > 0) ? ":" : "") + value;
		}
		counter = counter +1;			
	    }
	});

	//evaluate if "Copy Subject Alt Name from CA" is enabled in Issuer Alt Name
	if (kind == "Root CA")
        {
	    // Root Ca
	    // If the own "Subject Alt Name" is defined, the copy will be allowed
	    if (CaMgm::adv_cri_subject_alt_name
		|| CaMgm::adv_copy_subject_alt_name 
		|| size (CaMgm::adv_subject_alt_name_list) > 0 )
	    {
		CaMgm::adv_copy_issuer_alt_name_enabled = true;	
	    }
	    else
	    {
		CaMgm::adv_copy_issuer_alt_name = false;
		CaMgm::adv_copy_issuer_alt_name_enabled = false;			
	    }
	}
	else
	{
	    // Certificates, Sub-CAs, Requests
	    map ret = (map) YaPI::CaManagement::ReadCA ($["caName":CaMgm::currentCA, "type":"parsed"]);
	    y2milestone("ReadCA(%1): %2", CaMgm::currentCA, ret);	    
	    if (ret == nil)
	    {
		showErrorCaManagement ();
	    }
	    else
	    {
		map<string,list> opensslExtentions = ret["OPENSSL_EXTENSIONS"]:$[];
		if (size (opensslExtentions["X509v3 Subject Alternative Name"]:[]) > 0)
		{
		    // Subject Alternative Name of the "parent" CA is available. So the user
		    // can copy it.
		    CaMgm::adv_copy_issuer_alt_name_enabled = true;			    
		}
		else
		{
		    CaMgm::adv_copy_issuer_alt_name = false;
		    CaMgm::adv_copy_issuer_alt_name_enabled = false;			
		}		
	    }
	}

	return `next;
    }


    /**
     * Creating CA/Certificate or signing a request by calling the CaManagement module
     * @param kind ("Root CA","Sub CA","Client Certificate","Server Certificate", "signRequest", "Sub CA Request")     
     * @return true ( success )
     */
    define boolean cert_write (string kind) ``{
	map<string, any> param = $[];

	// fillup parameters depending on kind
	
	if (kind == "Root CA")
	{
	    param["caName"] =  CaMgm::CAName;
	}
	if (kind == "Server Request"
	    ||kind == "Client Request"
	    ||kind == "Sub CA Request")
	{
	    param["caName"] =  CaMgm::currentCA;	    
	}
	if (kind == "Server Certificate")
	{
	    param["caName"] =  CaMgm::currentCA;
	    param["certType"] =  "server";
	    param["caPasswd"] = getPassword(CaMgm::currentCA);
	    param["notext"] = "1";	    
	}
	if (kind == "Client Certificate")
	{
	    param["caName"] =  CaMgm::currentCA;
	    param["certType"] =  "client";	    
	    param["caPasswd"] =  getPassword(CaMgm::currentCA);
	    param["notext"] = "1";
	}

	if (kind == "Sub CA")
	{
	    param["caName"] =  CaMgm::currentCA;
	    param["newCaName"] =  CaMgm::CAName;	    
	    param["caPasswd"] =  getPassword(CaMgm::currentCA);	    
	}

	if (kind == "signRequest")
	{
	    param["caName"] =  CaMgm::currentCA;
	    param["request"] =  CaMgm::currentRequest;
	    param["certType"] =  CaMgm::requestKind;
	    param["caPasswd"] = getPassword(CaMgm::currentCA);
	    param["notext"] = "1";	    
	}

	if (kind != "signRequest")
	{
	    param["keyPasswd"] = CaMgm::password;
	    param["commonName"] = CaMgm::commonName;
	    
	    if (size (CaMgm::emailList) > 0)
	    {
		// taking standard EMAIL
		foreach (map element, CaMgm::emailList, ``{
		    if (element["default"]:false == true)
		    {
			param["emailAddress"] = element["name"]:"";
		    }
		});
	    }
	    
	    param["keyLength"] = tostring (CaMgm::keyLength);
	    if (size (CaMgm::country) > 0)
	    {
		param["countryName"] = CaMgm::country;
	    }
	    if (size (CaMgm::state) > 0)
	    {
		param["stateOrProvinceName"] = CaMgm::state;
	    }
	    if (size (CaMgm::locality) > 0)
	    {
		param["localityName"] = CaMgm::locality;
	    }
	    if (size (CaMgm::organisation) > 0)
	    {
		param["organizationName"] = CaMgm::organisation;
	    }
	    if (size (CaMgm::organisationUnit) > 0)
	    {
		param["organizationalUnitName"] = CaMgm::organisationUnit;
	    }
	    if (size (CaMgm::adv_challenge_password) > 0)
	    {
		param["challengePassword"] = CaMgm::adv_challenge_password;
	    }
	    if (size (CaMgm::adv_unstructured_name) > 0)
	    {
		param["unstructuredName"] = CaMgm::adv_unstructured_name;
	    }
	}

	if (kind != "Server Request"
	    && kind != "Client Request"
	    && kind != "Sub CA Request")
	{
	    param["days"] = tostring (CaMgm::validPeriod);

	    if (size(CaMgm::exp_authorityKeyIdentifier) > 0)
	    {
		if (CaMgm::exp_cri_authorityKeyIdentifier)
		{
		    param["authorityKeyIdentifier"] = "critical," + CaMgm::exp_authorityKeyIdentifier;
		}
		else
		{
		    param["authorityKeyIdentifier"] = CaMgm::exp_authorityKeyIdentifier;   
		}
	    }
	    if (size(CaMgm::adv_issuer_alt_name_list) > 0
		|| CaMgm::adv_copy_issuer_alt_name )
	    {
		boolean prevFound = false;
		if (CaMgm::adv_cri_issuer_alt_name)
		{
		    param["issuerAltName"] = "critical";
		    prevFound = true;
		}
		else
		{
		    param["issuerAltName"] = "";
		}
		foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
		    param["issuerAltName"] = param["issuerAltName"]:"" +
			(prevFound ? "," : "") +
			element["kind"]:"" + ":" +
			element["name"]:"";		    
		    prevFound = true;
		});				
		if (CaMgm::adv_copy_issuer_alt_name)
		{
		    param["issuerAltName"] = param["issuerAltName"]:"" +
			(prevFound ? "," : "") +
			"issuer:copy";
		}	
	    }	
	    if (size(CaMgm::exp_netscape_nsBaseUrl) > 0)
	    {
		param["nsBaseUrl"] = CaMgm::exp_cri_netscape_nsBaseUrl ? "critical," : "" +
		    CaMgm::exp_netscape_nsBaseUrl;
	    }
	    if (size(CaMgm::exp_netscape_nsRevocationUrl) > 0)
	    {
		param["nsRevocationUrl"] = CaMgm::exp_cri_netscape_nsRevocationUrl ? "critical," : "" +
		    CaMgm::exp_netscape_nsRevocationUrl;
	    }
	    if (size(CaMgm::exp_netscape_nsCaRevocationUrl) > 0)
	    {
		param["nsCaRevocationUrl"] =
		    CaMgm::exp_cri_netscape_nsCaRevocationUrl ? "critical," : "" +
		    CaMgm::exp_netscape_nsCaRevocationUrl;
	    }	
	    if (size(CaMgm::exp_netscape_nsRenewalUrl) > 0)
	    {
		param["nsRenewalUrl"] =
		    CaMgm::exp_cri_netscape_nsRenewalUrl ? "critical," : "" +
		    CaMgm::exp_netscape_nsRenewalUrl;
	    }	
	    if (size(CaMgm::exp_netscape_nsCaPolicyUrl) > 0)
	    {
		param["nsCaPolicyUrl"] =
		    CaMgm::exp_cri_netscape_nsCaPolicyUrl ? "critical," : "" +
		    CaMgm::exp_netscape_nsCaPolicyUrl;
	    }
	    if (size(CaMgm::adv_distribution_point) > 0)
	    {
		param["crlDistributionPoints"] =
		    CaMgm::adv_cri_distribution_point ? "critical," : "" +
		    CaMgm::adv_distribution_point;
	    }
	
	}
	
	
	// fillup parameters which are equal
	
	if (CaMgm::adv_ca != "none")
	{
	    if (CaMgm::adv_cri_ca)
	    {
		param["basicConstraints"] = "critical," + CaMgm::adv_ca;
	    }
	    else
	    {
		param["basicConstraints"] = CaMgm::adv_ca;		
	    }
	}
	else
	{
	    if (CaMgm::adv_cri_ca)
	    {
		param["basicConstraints"] = "critical";
	    }
	}
	if (CaMgm::adv_pathlen)
	{
	    param["basicConstraints"] = param["basicConstraints"]:"" +
		", pathlen:" + tostring(CaMgm::adv_pathlenValue);
	}
	if (CaMgm::adv_cri_nsComment)
	{
	    param["nsComment"] = "critical," + CaMgm::adv_nsComment;
	}
	else
	{
	    param["nsComment"] = CaMgm::adv_nsComment;		
	}
	if (CaMgm::adv_client
	    || CaMgm::adv_server
	    || CaMgm::adv_sslCA
	    || CaMgm::adv_email
	    || CaMgm::adv_reserved
	    || CaMgm::adv_emailCA
	    || CaMgm::adv_objsign
	    || CaMgm::adv_objCA)
	{
	    boolean firstHit = false;
	    if (CaMgm::adv_client)
	    {
		param["nsCertType"] = "client";
		firstHit = true;
	    }
	    if (CaMgm::adv_server)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",server";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "server";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_sslCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",sslCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "sslCA";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_email)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",email";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "email";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_reserved)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",reserved";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "reserved";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_emailCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",emailCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "emailCA";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_objsign)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",objsign";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "objsign";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_objCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",objCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "objCA";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_cri_nsCertType)
	    {
		param["nsCertType"] = "critical," + param["nsCertType"]:"";
	    }
	}
	if (CaMgm::adv_digitalSignature
	    || CaMgm::adv_nonRepudiation 
	    || CaMgm::adv_cRLSign
	    || CaMgm::adv_keyEncipherment
	    || CaMgm::adv_dataEncipherment
	    || CaMgm::adv_encipherOnly
	    || CaMgm::adv_keyAgreement
	    || CaMgm::adv_keyCertSign 
	    || CaMgm::adv_decipherOnly)
	{
	    boolean firstHit = false;
	    if (CaMgm::adv_nonRepudiation)
	    {
		param["keyUsage"] = "nonRepudiation";
		firstHit = true;
	    }
	    if (CaMgm::adv_digitalSignature)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",digitalSignature";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "digitalSignature";
		    firstHit = true;			
		}
	    }	    	    
	    if (CaMgm::adv_cRLSign)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",cRLSign";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "cRLSign";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyEncipherment)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyEncipherment";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyEncipherment";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_dataEncipherment)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",dataEncipherment";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "dataEncipherment";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_encipherOnly)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",encipherOnly";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "encipherOnly";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyAgreement)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyAgreement";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyAgreement";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyCertSign)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyCertSign";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyCertSign";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_decipherOnly)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",decipherOnly";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "decipherOnly";
		    firstHit = true;			
		}
	    }						
	    if (CaMgm::adv_cri_key_usage)
	    {
		param["keyUsage"] = "critical," + param["keyUsage"]:"";
	    }
	}
	if (size(CaMgm::exp_subjectKeyIdentifier) > 0)
	{
	    if (CaMgm::exp_cri_subjectKeyIdentifier)
	    {
		param["subjectKeyIdentifier"] = "critical," + CaMgm::exp_subjectKeyIdentifier;
	    }
	    else
	    {
		param["subjectKeyIdentifier"] = CaMgm::exp_subjectKeyIdentifier;   
	    }
	}
	if (size(CaMgm::adv_subject_alt_name_list) > 0
	    || size(CaMgm::emailList) > 1 // without default entry
	    || (CaMgm::adv_copy_subject_alt_name
		&& size(CaMgm::emailList) > 0)
	    )
	{
	    boolean prevFound = false;
	    if (CaMgm::adv_cri_subject_alt_name)
	    {
		param["subjectAltName"] = "critical";
		prevFound = true;
	    }
	    else
	    {
		param["subjectAltName"] = "";
	    }
	    // taking EMAIL
	    foreach (map element, CaMgm::emailList, ``{
		if (element["default"]:false == false)
		{
		    param["subjectAltName"] = param["subjectAltName"]:"" +
			(prevFound ? "," : "") +
			"email:" +
			element["name"]:"";
		    prevFound = true;
		}
	    });
	    foreach (map element, CaMgm::adv_subject_alt_name_list, ``{
		param["subjectAltName"] = param["subjectAltName"]:"" +
		    (prevFound ? "," : "") +
		    element["kind"]:"" + ":" +
		    element["name"]:"";		    
		prevFound = true;
	    });
	    if (CaMgm::adv_copy_subject_alt_name)
	    {
		param["subjectAltName"] = param["subjectAltName"]:"" +
		    (prevFound ? "," : "") +
		    "email:copy";
	    }	
	}	
	if (size(CaMgm::adv_nsSslServerName) > 0)
	{
	    param["nsSslServerName"] =
		CaMgm::adv_cri_nsSslServerName ? "critical," : "" +
		CaMgm::adv_nsSslServerName;
	}
	if (size(CaMgm::exp_extendedKeyUsage) > 0)
	{
	    param["extendedKeyUsage"] =
		CaMgm::exp_cri_extendedKeyUsage ? "critical," : "" +
		CaMgm::exp_extendedKeyUsage;
	}
	if (size(CaMgm::exp_authorityInfoAccess) > 0)
	{
	    param["authorityInfoAccess"] =
		CaMgm::exp_cri_authorityInfoAccess ? "critical," : "" +
		CaMgm::exp_authorityInfoAccess;
	}
	
	if (kind == "Root CA")
	{
//	    y2milestone("CaManagement::AddRootCA(%1)", param);	
	    return YaPI::CaManagement::AddRootCA (param) == nil ? false:true;
	}
	if (kind == "Server Certificate"
	    || kind == "Client Certificate")
	{
//	    y2milestone("CaManagement::AddCertificate(%1)", param);
	    param["notext"] = "1";
	    string filename = YaPI::CaManagement::AddCertificate (param);
	    if (filename == nil
		|| size(filename) == 0)
	    {
		return false;
	    }
	    else
	    {
		y2milestone("Certificate created in : %1", filename);
		return true;
	    }
	}
	if (kind == "Sub CA")
	{
//	    y2milestone("CaManagement::AddSubCA(%1)", param);	
	    return YaPI::CaManagement::AddSubCA (param) == nil ? false:true;
	}
	if (kind == "signRequest")
	{
	    param["notext"] = "1";	    
//	    y2milestone("CaManagement::IssueCertificate(%1)", param);	
	    return YaPI::CaManagement::IssueCertificate (param) == nil ? false:true;	    
	}
	if (kind == "Server Request"
	    || kind == "Client Request"
	    || kind == "Sub CA Request")
	{
	    y2milestone("CaManagement::AddRequest(%1)", param);	
	    return YaPI::CaManagement::AddRequest (param) == nil ? false:true;	    	    
	}
    }

    /**
     * Writing default settings
     * @return true ( success )
     */
    define boolean new_cert_write_default () ``{

	map kindmap = $["Root CA":"ca",
			"Sub CA":"ca",
			"Server Certificate":"server",
			"Client Certificate":"client"];
	
	map<string, any> param = $[];

	// fillup parameters depending on kind
	
	param["caName"] =  CaMgm::currentCA;
	param["certType"] =  kindmap[CaMgm::currentDefault]:"";

	if (CaMgm::adv_ca != "none")
	{
	    if (CaMgm::adv_cri_ca)
	    {
		param["basicConstraints"] = "critical," + CaMgm::adv_ca;
	    }
	    else
	    {
		param["basicConstraints"] = CaMgm::adv_ca;		
	    }
	}
	else
	{
	    if (CaMgm::adv_cri_ca)
	    {
		param["basicConstraints"] = "critical";
	    }
	}

	if (CaMgm::adv_cri_nsComment)
	{
	    param["nsComment"] = "critical," + CaMgm::adv_nsComment;
	}
	else
	{
	    param["nsComment"] = CaMgm::adv_nsComment;		
	}
	if (CaMgm::adv_client
	    || CaMgm::adv_server
	    || CaMgm::adv_sslCA
	    || CaMgm::adv_email
	    || CaMgm::adv_reserved
	    || CaMgm::adv_emailCA
	    || CaMgm::adv_objsign
	    || CaMgm::adv_objCA)
	{
	    boolean firstHit = false;
	    if (CaMgm::adv_client)
	    {
		param["nsCertType"] = "client";
		firstHit = true;
	    }
	    if (CaMgm::adv_server)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",server";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "server";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_sslCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",sslCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "sslCA";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_email)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",email";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "email";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_reserved)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",reserved";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "reserved";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_emailCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",emailCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "emailCA";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_objsign)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",objsign";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "objsign";
		    firstHit = true;			
		}
	    }		
	    if (CaMgm::adv_objCA)
	    {
		if (firstHit)
		{
		    param["nsCertType"] = param["nsCertType"]:""+ ",objCA";
		}
		else
		{
		    param["nsCertType"] = param["nsCertType"]:""+ "objCA";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_cri_nsCertType)
	    {
		param["nsCertType"] = "critical," + param["nsCertType"]:"";
	    }
	}
	if (CaMgm::adv_digitalSignature
	    || CaMgm::adv_nonRepudiation 
	    || CaMgm::adv_cRLSign
	    || CaMgm::adv_keyEncipherment
	    || CaMgm::adv_dataEncipherment
	    || CaMgm::adv_encipherOnly
	    || CaMgm::adv_keyAgreement
	    || CaMgm::adv_keyCertSign 
	    || CaMgm::adv_decipherOnly)
	{
	    boolean firstHit = false;
	    if (CaMgm::adv_nonRepudiation)
	    {
		param["keyUsage"] = "nonRepudiation";
		firstHit = true;
	    }
	    if (CaMgm::adv_digitalSignature)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",digitalSignature";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "digitalSignature";
		    firstHit = true;			
		}
	    }	    
	    if (CaMgm::adv_cRLSign)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",cRLSign";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "cRLSign";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyEncipherment)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyEncipherment";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyEncipherment";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_dataEncipherment)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",dataEncipherment";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "dataEncipherment";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_encipherOnly)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",encipherOnly";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "encipherOnly";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyAgreement)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyAgreement";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyAgreement";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_keyCertSign)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",keyCertSign";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "keyCertSign";
		    firstHit = true;			
		}
	    }
	    if (CaMgm::adv_decipherOnly)
	    {
		if (firstHit)
		{
		    param["keyUsage"] = param["keyUsage"]:""+ ",decipherOnly";
		}
		else
		{
		    param["keyUsage"] = param["keyUsage"]:""+ "decipherOnly";
		    firstHit = true;			
		}
	    }						
	    if (CaMgm::adv_cri_key_usage)
	    {
		param["keyUsage"] = "critical," + param["keyUsage"]:"";
	    }
	}
	if (size(CaMgm::exp_subjectKeyIdentifier) > 0)
	{
	    if (CaMgm::exp_cri_subjectKeyIdentifier)
	    {
		param["subjectKeyIdentifier"] = "critical," + CaMgm::exp_subjectKeyIdentifier;
	    }
	    else
	    {
		param["subjectKeyIdentifier"] = CaMgm::exp_subjectKeyIdentifier;   
	    }
	}
	if (size(CaMgm::exp_authorityKeyIdentifier) > 0)
	{
	    if (CaMgm::exp_cri_authorityKeyIdentifier)
	    {
		param["authorityKeyIdentifier"] = "critical," + CaMgm::exp_authorityKeyIdentifier;
	    }
	    else
	    {
		param["authorityKeyIdentifier"] = CaMgm::exp_authorityKeyIdentifier;   
	    }
	}
	if (size(CaMgm::adv_subject_alt_name_list) > 0
	    || size(CaMgm::emailList) > 1 // without default entry
	    || CaMgm::adv_copy_subject_alt_name )
	{
	    boolean prevFound = false;
	    if (CaMgm::adv_cri_subject_alt_name)
	    {
		param["subjectAltName"] = "critical";
		prevFound = true;
	    }
	    else
	    {
		param["subjectAltName"] = "";
	    }
	    // taking EMAIL
	    foreach (map element, CaMgm::emailList, ``{
		if (element["default"]:false == false)
		{
		    param["subjectAltName"] = param["subjectAltName"]:"" +
			(prevFound ? "," : "") +
			"email:" +
			element["name"]:"";
		    prevFound = true;
		}
	    });
	    foreach (map element, CaMgm::adv_subject_alt_name_list, ``{
		param["subjectAltName"] = param["subjectAltName"]:"" +
		    (prevFound ? "," : "") +
		    element["kind"]:"" + ":" +
		    element["name"]:"";		    
		prevFound = true;
	    });
	    if (CaMgm::adv_copy_subject_alt_name)
	    {
		param["subjectAltName"] = param["subjectAltName"]:"" +
		    (prevFound ? "," : "") +
		    "email:copy";
	    }	
	}	
	if (size(CaMgm::adv_issuer_alt_name_list) > 0
	    || CaMgm::adv_copy_issuer_alt_name )
	{
	    boolean prevFound = false;
	    if (CaMgm::adv_cri_issuer_alt_name)
	    {
		param["issuerAltName"] = "critical";
		prevFound = true;
	    }
	    else
	    {
		param["issuerAltName"] = "";
	    }
	    foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
		param["issuerAltName"] = param["issuerAltName"]:"" +
		    (prevFound ? "," : "") +
		    element["kind"]:"" + ":" +
		    element["name"]:"";		    
		prevFound = true;
	    });				
	    if (CaMgm::adv_copy_issuer_alt_name)
	    {
		param["issuerAltName"] = param["issuerAltName"]:"" +
		    (prevFound ? "," : "") +
		    "issuer:copy";
		}	
	}	
	if (size(CaMgm::exp_netscape_nsBaseUrl) > 0)
	{
	    param["nsBaseUrl"] = CaMgm::exp_cri_netscape_nsBaseUrl ? "critical," : "" +
		CaMgm::exp_netscape_nsBaseUrl;
	}
	if (size(CaMgm::exp_netscape_nsRevocationUrl) > 0)
	{
	    param["nsRevocationUrl"] = CaMgm::exp_cri_netscape_nsRevocationUrl ? "critical," : "" +
		CaMgm::exp_netscape_nsRevocationUrl;
	}
	if (size(CaMgm::exp_netscape_nsCaRevocationUrl) > 0)
	{
	    param["nsCaRevocationUrl"] =
		CaMgm::exp_cri_netscape_nsCaRevocationUrl ? "critical," : "" +
		CaMgm::exp_netscape_nsCaRevocationUrl;
	}	
	if (size(CaMgm::exp_netscape_nsRenewalUrl) > 0)
	{
	    param["nsRenewalUrl"] =
		CaMgm::exp_cri_netscape_nsRenewalUrl ? "critical," : "" +
		CaMgm::exp_netscape_nsRenewalUrl;
	}	
	if (size(CaMgm::exp_netscape_nsCaPolicyUrl) > 0)
	{
	    param["nsCaPolicyUrl"] =
		CaMgm::exp_cri_netscape_nsCaPolicyUrl ? "critical," : "" +
		CaMgm::exp_netscape_nsCaPolicyUrl;
	}
	if (size(CaMgm::adv_nsSslServerName) > 0)
	{
	    param["nsSslServerName"] =
		CaMgm::adv_cri_nsSslServerName ? "critical," : "" +
		CaMgm::adv_nsSslServerName;
	}
	if (size(CaMgm::exp_extendedKeyUsage) > 0)
	{
	    param["extendedKeyUsage"] =
		CaMgm::exp_cri_extendedKeyUsage ? "critical," : "" +
		CaMgm::exp_extendedKeyUsage;
	}
	if (size(CaMgm::exp_authorityInfoAccess) > 0)
	{
	    param["authorityInfoAccess"] =
		CaMgm::exp_cri_authorityInfoAccess ? "critical," : "" +
		CaMgm::exp_authorityInfoAccess;
	}
	if (size(CaMgm::adv_distribution_point) > 0)
	{
	    param["crlDistributionPoints"] =
		CaMgm::adv_cri_distribution_point ? "critical," : "" +
		CaMgm::adv_distribution_point;
	}
	
	y2milestone("CaManagement::WriteCertificateDefaults(%1)", param);	
	return YaPI::CaManagement::WriteCertificateDefaults (param);
    }


    /**
     * Creating default CA/Certificate
     * @return boolean ( success )
     */
    define boolean create_default_CA_certificate() ``{
	
	UI::BusyCursor();
	UI::OpenDialog(`VBox(`Label(_("Creating certificate..."))));
	
	// creating CA
	new_cert_init ("Root CA");
	if (size (CaMgm::prop_email) > 0)
	{
	    CaMgm::emailList = [$["default":true,"name":CaMgm::prop_email]];
	}
 	CaMgm::commonName = CaMgm::prop_ca_commonName;
 	CaMgm::CAName = CaMgm::prop_CAName;
 	CaMgm::organisation = CaMgm::prop_organisation;
 	CaMgm::organisationUnit = CaMgm::prop_organisationUnit;
 	CaMgm::locality = CaMgm::prop_locality;
 	CaMgm::state = CaMgm::prop_state;
 	CaMgm::country = CaMgm::prop_country;
 	CaMgm::password = CaMgm::prop_password;

	y2milestone("Creating default Root CA");
	if (cert_write ("Root CA"))
	{
	    // saving password for the generated CA
	    CaMgm::passwdMap[CaMgm::prop_CAName] = CaMgm::prop_password;
	    CaMgm::currentCA = CaMgm::prop_CAName;
	    
	    // Creating server certificate
	    new_cert_init ("Server Certificate");
	    if (size (CaMgm::prop_email) > 0)
	    {
		CaMgm::emailList = [$["default":true,"name":CaMgm::prop_email]];
	    }
	    CaMgm::commonName = CaMgm::prop_server_commonName;
	    CaMgm::CAName = CaMgm::prop_CAName;
	    CaMgm::organisation = CaMgm::prop_organisation;
	    CaMgm::organisationUnit = CaMgm::prop_organisationUnit;
	    CaMgm::locality = CaMgm::prop_locality;
	    CaMgm::state = CaMgm::prop_state;
	    CaMgm::country = CaMgm::prop_country;
	    CaMgm::password = CaMgm::prop_password;

	    y2milestone("Creating default Server Certificate");	    
	    
	    if (!cert_write ("Server Certificate"))
	    {
		UI::CloseDialog();
		showErrorCaManagement ();
		Popup::Message(_("The default certificate can also be created in 
the CA Management.
"));
		return false;
	    }
	    else
	    {
		list<map> certList = (list<map>) YaPI::CaManagement::ReadCertificateList ($["caName":CaMgm::prop_CAName,
											    "caPasswd":CaMgm::prop_password]);
		y2milestone("ReadCertificateList(%1): %2", CaMgm::prop_CAName, certList);
		
		// Exporting to common server certificate
		string tmpdir = (string) SCR::Read (.target.tmpdir);
		string yapiret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CaMgm::prop_CAName,
										   "certificate" : (certList[0]:$[])["certificate"]:"", 
										   "keyPasswd" : CaMgm::prop_password,
										   "exportFormat" : "PKCS12_CHAIN",
										   "destinationFile" : tmpdir +"/YaST-Servercert.p12",
										   "P12Password" : CaMgm::prop_password
										 ]);
		y2milestone ("ExportCertificate(%1) return %2", $["caName": CaMgm::prop_CAName,
								  "certificate" : (certList[0]:$[])["certificate"]:"",
								  "exportFormat" : "PKCS12_CHAIN",
								  "destinationFile" : tmpdir +"/YaST-Servercert.p12"], yapiret);
		if (yapiret == nil
		    || yapiret != "1")
		{
		    UI::CloseDialog();		    
		    showErrorCaManagement ();
		    return false;		    
		}

		boolean importret = (boolean) YaPI::CaManagement::ImportCommonServerCertificate ($["passwd" : CaMgm::prop_password,
											 "inFile" : tmpdir +"/YaST-Servercert.p12"]);
		y2milestone ("ImportCommonServerCertificate() return %1",
			     importret);
		if (importret == nil
		    || !importret)
		{
		    UI::CloseDialog();		    
		    showErrorCaManagement ();
		    return false;		    
		}
	    }
	}
	else
	{
	    UI::CloseDialog();	    
	    showErrorCaManagement ();
	    Popup::Message(_("The default certificate can also be created in 
the CA Management.
"));
	    return false;
	}
	
	UI::CloseDialog();

	return true;
    }

}
