/**
 * File:	clients/ca-management_auto.ycp
 * Package:	Configuration of ca-management
 * Summary:	Client for autoinstallation
 * Authors:	Ryan Partridge <rpartridge@novell.com>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param function to execute
 * @param map/list of ca-management settings
 * @return map edited settings, Summary or boolean on success depending on called function
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallFunction ("ca-management_auto", [ "Summary", mm ]);
 */

{

textdomain "ca-management";

import "Progress";
import "Report";
import "Users";
import "CaMgm";
import "Summary";

include "ca-management/new_cert_read_write.ycp";
include "ca-management/util.ycp";

/**
 * Creates Country items
 * @return a list country items formated for a UI table
 */
define list<term> getAutoCountryList () ``{
    list<term> result = [];
    map<string, string> country_map = (map<string, string>)
	eval(SCR::Read(.target.yast2, "country.ycp"));

    map<string, string> country_index = mapmap (string k, string v,
						country_map, { return ($[v : k]); });

    list<string> name_list = maplist ( string k, string v,
				       country_map, { return v; });

    name_list = sort (name_list);	
	    
    foreach (string name, name_list, ``{
	result = add (result, `item (`id (country_index[name]:""), name ,
				     CaMgm::autoYaSTSettings["country"]:Language::GetLanguageCountry () == country_index[name]:"") );
    });
    return result;	
}


/**
 * Autoyast configuration of ca-management
 * For use with autoinstallation.
 * @return sequence result
 */
any caAutoSequence() {

    string caption = _("CA Configuration");
    string confirmPassword = "";
    	string help_text = _("<p>
YaST generates a <b>default CA and certificate</b> automatically. This CA and certificate
is used for communicating with the <b>Apache server</b>.
Here, change the <b>password</b> of this CA/certificate.
</p>
");
	
    /* Initialization dialog contents */
    Wizard::CreateDialog();

    confirmPassword = CaMgm::autoYaSTSettings["password"]:"";

    term contents = `VBox (
			   `HBox(`HWeight (1,`TextEntry( `id (`id_CAName), _("&CA Name:"),
							 CaMgm::autoYaSTSettings["CAName"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`TextEntry( `id (`id_commonName), _("&Common Name:"),
							 CaMgm::autoYaSTSettings["ca_commonName"]:""))
				     ),
			   `HBox(`HWeight (1,`TextEntry(`id(`email), _("Email:"),
							 CaMgm::autoYaSTSettings["server_email"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`ComboBox( `id (`id_country), _("C&ountry:"),
							getAutoCountryList()))
				 ),				     
			   `HBox(`HWeight (1,`TextEntry( `id (`id_organisation), _("O&rganization:"),
							 CaMgm::autoYaSTSettings["organisation"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`TextEntry( `id (`id_organisationUnit), _("Or&ganizational Unit:"),
							 CaMgm::autoYaSTSettings["organisationUnit"]:""))
				 ),
			   `HBox(`HWeight (1,`TextEntry( `id (`id_locality), _("Loca&lity:"),
							 CaMgm::autoYaSTSettings["locality"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`TextEntry( `id (`id_state), _("&State:"),
							 CaMgm::autoYaSTSettings["state"]:""))
				 ),
			   `Left(`CheckBox(`id(`rootPassword), `opt(`notify),
					   _("Take root password"),
					   CaMgm::autoYaSTSettings["takeRootPassword"]:true)),
			   `HBox(`HWeight (1,`Password(`id(`pw1), _("&Password:"), CaMgm::autoYaSTSettings["password"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`Password(`id(`pw2), _("Co&nfirm Password:"), confirmPassword))
				 ),
			   `Left(`CheckBox(`id(`localServerName), `opt(`notify),
					   _("Take local server name"),
					   CaMgm::autoYaSTSettings["takeLocalServerName"]:true)),
			   `HBox(`HWeight (1,`TextEntry( `id (`id_serverName), _("&Server Name:"),
							 CaMgm::autoYaSTSettings["server_commonName"]:"")),
				 `HSpacing(2), 
				 `HWeight (1,`Empty())
				 )
			   );
    
    Wizard::SetContents (caption, contents, help_text, false, true);
    Wizard::SetNextButton(`next, Label::FinishButton() );
    
    // Get the user input.
    //
    any ret = nil;

    repeat 
    {
	if ((boolean) UI::QueryWidget(`id(`rootPassword), `Value))
	{
	    UI::ChangeWidget (`id (`pw1), `Enabled, false);
	    UI::ChangeWidget (`id (`pw2), `Enabled, false);
	}
	else
	{
	    UI::ChangeWidget (`id (`pw1), `Enabled, true);
	    UI::ChangeWidget (`id (`pw2), `Enabled, true);
	}

	if ((boolean) UI::QueryWidget(`id(`localServerName), `Value))
	{
	    UI::ChangeWidget (`id (`id_serverName), `Enabled, false);
	}
	else
	{
	    UI::ChangeWidget (`id (`id_serverName), `Enabled, true);
	}	    
	
	ret = Wizard::UserInput();

	if (ret == `next
	    ||ret == `back)
	{
	    if (!((boolean) UI::QueryWidget(`id(`rootPassword), `Value)))
	    {
		confirmPassword = (string) UI::QueryWidget(`id(`pw2), `Value);
		if ((string) UI::QueryWidget(`id(`pw1), `Value) != confirmPassword)
		{
		    Popup::Error(_("New passwords do not match."));
		    ret = `again;
		}
		else if ( size(confirmPassword) < 4)
		{
		    Popup::Error(_("Password lenght should be greater than 3 characters."));
		    ret = `again;
		}
	    }
	    if (!check_mail_address((string) UI::QueryWidget(`id(`email), `Value)))
	    {
		Popup::Error(_("Invalid e-mail format."));
		ret = `again;
	    }

	    if (ret!=`again)
	    {
		CaMgm::autoYaSTSettings["takeRootPassword"] = (boolean) UI::QueryWidget(`id(`rootPassword), `Value);
		CaMgm::autoYaSTSettings["takeLocalServerName"] = (boolean) UI::QueryWidget(`id(`localServerName), `Value);	
		
		if (!CaMgm::autoYaSTSettings["takeRootPassword"]:true)
		{
		    CaMgm::autoYaSTSettings["password"] = (string) UI::QueryWidget(`id(`pw1), `Value);
		}
		if (!CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
		{
		    CaMgm::autoYaSTSettings["server_commonName"] = (string) UI::QueryWidget(`id(`id_serverName), `Value);
		}
		CaMgm::autoYaSTSettings["CAName"] = (string) UI::QueryWidget(`id(`id_CAName), `Value);
		CaMgm::autoYaSTSettings["ca_commonName"] = (string) UI::QueryWidget(`id(`id_commonName), `Value);
		CaMgm::autoYaSTSettings["server_email"] = (string) UI::QueryWidget(`id(`email), `Value);
		CaMgm::autoYaSTSettings["country"] = (string) UI::QueryWidget(`id(`country), `Value);
		CaMgm::autoYaSTSettings["organisation"] = (string) UI::QueryWidget(`id(`id_organisation), `Value);
		CaMgm::autoYaSTSettings["organisationUnit"] = (string) UI::QueryWidget(`id(`id_organisationUnit), `Value);
		CaMgm::autoYaSTSettings["locality"] = (string) UI::QueryWidget(`id(`id_locality), `Value);
		CaMgm::autoYaSTSettings["state"] = (string) UI::QueryWidget(`id(`id_state), `Value);
	    }
	}
    }
    until ( ret == `next
	    || ret == `abort
	    || ret == `back);


    UI::CloseDialog();
    return ret;
}

/**
 * Get all ca-management settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
boolean Import (map settings) {
    boolean ret = true;
    CaMgm::autoYaSTSettings["takeRootPassword"] = settings["takeRootPassword"]:true;
    if (settings["takeRootPassword"]:true )
    {
	CaMgm::autoYaSTSettings["password"] =  Users::GetRootPassword();
    }
    else
    {
	CaMgm::autoYaSTSettings["password"] = settings["password"]:"";
    }
    
    CaMgm::autoYaSTSettings["takeLocalServerName"] = settings["takeLocalServerName"]:true;
    if (settings["takeLocalServerName"]:true )
    {
	map retmap = (map) SCR::Execute (.target.bash_output,
					"/bin/hostname --long",
					$[] );
	y2milestone("Hostname :%1", retmap);
	if (retmap["exit"]:0 != 0)
	{
	    ret = false;
	}
	else
	{
	    CaMgm::autoYaSTSettings["server_commonName"] = strip(retmap["stdout"]:"");
	}
    }
    else
    {
	CaMgm::autoYaSTSettings["server_commonName"] = settings["server_commonName"]:"";
    }
    CaMgm::autoYaSTSettings["CAName"] = settings["CAName"]:"";
    CaMgm::autoYaSTSettings["ca_commonName"] = settings["ca_commonName"]:"";
    CaMgm::autoYaSTSettings["server_email"] = settings["server_email"]:"";
    CaMgm::autoYaSTSettings["country"] = settings["country"]:"";
    CaMgm::autoYaSTSettings["organisation"] = settings["organisation"]:"";
    CaMgm::autoYaSTSettings["organisationUnit"] = settings["organisationUnit"]:"";
    CaMgm::autoYaSTSettings["locality"] = settings["locality"]:"";
    CaMgm::autoYaSTSettings["state"] = settings["state"]:"";
    
    return ret;
}

/**
 * Dump the ca-management settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
map Export () {
    return CaMgm::autoYaSTSettings;
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
map AutoPackages() {
    return $[ "install":["openssl"], "remove":[] ];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
string Summary() {
    /* Configuration summary text for autoyast */
    string summary = "";
    
    summary = Summary::AddHeader (summary,_("Server Name"));
    if (CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
    {
	summary = Summary::AddLine (summary, _("[local server name]"));
    }
    else
    {
	summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["server_commonName"]:"");
    }
    summary = Summary::AddHeader (summary,_("CA Name"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["CAName"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Common Name"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["ca_commonName"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Email"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["server_email"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Country"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["country"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Organization"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["organisation"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Organizational Unit"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["organisationUnit"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("Locality"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["locality"]:_("[not set]"));
    summary = Summary::AddHeader (summary, _("State"));
    summary = Summary::AddLine (summary, CaMgm::autoYaSTSettings["state"]:_("[not set]"));
    
    summary = Summary::AddHeader (summary, _("Password"));
    if (CaMgm::autoYaSTSettings["takeRootPassword"]:true)
    {
	summary = Summary::AddLine (summary, _("[root password]"));
    }
    else
    {
	summary = Summary::AddLine (summary, _("[manually set]"));
    }    
    
    return summary;
}


/**
 * Write all ca-management settings
 * @return true on success
 */
boolean Write() {
    boolean success = true;
    string caption = _("Generating Common Server Certificate");
    integer steps = 2;
    integer sl = 500;

    Report::DisplayErrors(true, 5);
    Report::DisplayMessages(true, 5);
    
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Read Server Information..."),
	    /* Progress stage 2/2 */
	    _("Creating the Default CA and Server Certificate")
	], [
	    /* Progress stage 1/2 */
	    _("Read Server Information..."),
	    /* Progress step 2/2 */
	    _("Creating the Default CA and Server Certificate..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // Read server information
        
    Progress::NextStage();

    if (CaMgm::autoYaSTSettings["takeLocalServerName"]:true)
    {
	map retmap = (map) SCR::Execute (.target.bash_output,
					 "/bin/hostname --long",
					 $[] );

	y2milestone("Hostname :%1", retmap);
	if (retmap["exit"]:0 != 0)
	{
	    Report::Error(_("Cannot evaluate the name of the local machine"));
	    success = false;
	}
	CaMgm::prop_server_commonName = strip(retmap["stdout"]:"");
    }
    else
    {
	CaMgm::prop_server_commonName = CaMgm::autoYaSTSettings["server_commonName"]:"";
    }
    
    CaMgm::prop_selection = `def;
    CaMgm::prop_ca_commonName = CaMgm::autoYaSTSettings["ca_commonName"]:"";
    CaMgm::prop_CAName = CaMgm::autoYaSTSettings["CAName"]:"";
    CaMgm::prop_country = CaMgm::autoYaSTSettings["country"]:"";
    CaMgm::prop_email = CaMgm::autoYaSTSettings["server_email"]:"";
    CaMgm::prop_organisation = CaMgm::autoYaSTSettings["organisation"]:"";
    CaMgm::prop_organisationUnit = CaMgm::autoYaSTSettings["organisationUnit"]:"";
    CaMgm::prop_locality = CaMgm::autoYaSTSettings["locality"]:"";
    CaMgm::prop_state = CaMgm::autoYaSTSettings["state"]:"";

    if (CaMgm::autoYaSTSettings["takeRootPassword"]:true)
    {
	CaMgm::prop_password = Users::GetRootPassword();
    }
    else
    {
	CaMgm::prop_password = CaMgm::autoYaSTSettings["password"]:Users::GetRootPassword();
    }

    Progress::NextStage();
    
    // write settings
    
    success = create_default_CA_certificate();	
    if (!success)
    {
	/* Error message */
	Report::Error (_("Cannot create certificates."));
    }

    sleep(sl);

    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    return success;
}



//---------------------------------------------------------------------------
// MAIN
//---------------------------------------------------------------------------

y2milestone("----------------------------------------");
y2milestone("ca-management auto started");

import "CaMgm";
include "ca-management/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}
y2milestone("func=%1", func);
y2milestone("param=%1", param);

/* Create a summary*/
if(func == "Summary") {
    ret = Summary();
}
/* Reset configuration */
else if (func == "Reset") {
    Import($[]);
    ret = $[];
}
/* Change configuration (run AutoSequence) */
else if (func == "Change") {
    ret = caAutoSequence();
}
/* Import configuration */
else if (func == "Import") {
    ret = Import(param);
}
/* Return actual state */
else if (func == "Export") {
    ret = Export();
}
/* Return needed packages */
else if (func == "Packages") {
    ret = AutoPackages();
}
/* Write given settings */
else if (func == "Write") {
    import "Progress";
    Progress::off();
    ret = Write();
    Progress::on();
}
else if (func == "GetModified") {
    ret =  CaMgm::autoYaSTModified;
}
else if (func == "SetModified") {
    CaMgm::autoYaSTModified = true;
}
/* Unknown function */
else {
    y2error("Unknown function: %1", func);
    ret = false;
}

y2milestone("ret=%1", ret);
y2milestone("ca-management auto finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
