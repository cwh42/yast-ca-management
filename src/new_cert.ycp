/**
 *
 * File:
 *   new_cert.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Creating a new CA/Certificate
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Creating a new CA/Certificate
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";
    include "ca-management/new_cert_read_write.ycp";

    /**
     * Creates EMAIL items
     * @return a list EMAIL items formated for a UI table
     */
    define list<term> getEMAILList () ``{
        list<term> result = [];
        integer i = 0;

	foreach (map element, CaMgm::emailList, ``{
	    result = add (result, `item (`id (i), element["name"]:"",
					 element["default"]:false ? UI::Glyph(`CheckMark ): "" ) );
	    i = i + 1;
	});
        return result;
    }


    
    /**
     * Creating new CA/Certificate ( 1. step )
     * @param kind ("Root CA","Sub CA","Client Certificate","Server Certificate","Client Request","Server Request")     
     * @return `next, 'abort, 'again
     */
    define symbol new_cert1 (string kind) ``{

	string helptext	= "";
        // help text 1/5
	if (kind == "Root CA"
	    || kind == "Sub CA")
	{
	    helptext = _("<p>To generate a new CA, some entries are needed.</p>");
	}
	else if (kind == "Client Certificate"
		 || kind == "Server Certificate")
	{
	    helptext = _("<p>To generate a new certificate, some entries are needed.</p>");	    
	}
	else if (kind == "Client Request"
		 || kind == "Server Request")
	{
	    helptext = _("<p>To generate a new request, some entries are needed.</p>");	    	    
	}
	else
	{
	    helptext = "<p>ERROR Wrong kind. FIX IT</p>";	    
	}
	    
        // help text 2/5 
        helptext = helptext + _("<p>It depends on the policy defined in the configuration file.</p>");
        // help text 3/5
	if (kind == "Root CA"
	    || kind == "Sub CA")
	{
	    helptext = helptext + _("<p><b>CA Name</b> is the name of a CA certificate. Use only ASCII characters, \"-\", and \"_\".</p>");
	    helptext = helptext + _("<p><b>Common Name</b> is the name of the CA.</p>");	    
	}
	else
	{
	    if (kind == "Client Certificate"
		||kind == "Client Request")
	    {
		helptext = helptext + _("<p><b>Common Name</b> is the name of the user for whom to create the certificate.</p>");
	    }
	    else
	    {
		helptext = helptext + _("<p><b>Common Name</b> is the fully qualified domain name of the server.</p>");		
	    }
	}
        // help text 4/5
        helptext = helptext + _("<p><b>E-Mail Addresses</b> are valid e-mail addresses of the user or server administrator.</p>");
        // help text 5/5
        helptext = helptext + _("<p><b>Organization</b>, <b>Organizational Unit</b>, <b>Locality</b>, and <b>State</p> are often optional.</p>");


        list<term> emailTermList = getEMAILList ();

        term buttons = `VBox ();
	// To translators: pushbutton label
	buttons = add (buttons,  `HBox ( `HWeight (1, `PushButton (`id (`deleteEmail), `opt (`key_F5), Label::DeleteButton()))));
	buttons = add (buttons,  `HBox ( `HWeight (1, `PushButton (`id (`defaultEmail) , _("Default")))));	
        buttons = add (buttons, `VStretch());
	// To translators: pushbutton label
        buttons = add (buttons,  `HBox ( `HWeight(1, `PushButton (`id (`addEmail), `opt (`key_F3), Label::AddButton()))));

	term editEmail = `VBox ();
	editEmail = add (editEmail, `HBox(
					  `VSpacing(5),
					  `Table (`id (`table), `opt (`notify, `immediate),
                                          `header (
                                              // To translators: table headers
                                              _("E-Mail Addresses"), _("default")),
                                          emailTermList)));
	editEmail = add (editEmail, `TextEntry (`id (`id_emailname ), "" ) );

        term emails = `HBox ();
        emails = add (emails, `HWeight (3, editEmail));
        emails = add (emails, `HWeight (1, buttons));

        term contents = `VBox ();
	if (kind == "Root CA"
	    || kind == "Sub CA")
	{
	    contents = add (contents, `TextEntry( `id (`id_CAName), _("&CA Name:"), CaMgm::CAName ));	    
	}
        contents = add (contents, `TextEntry( `id (`id_commonName), _("&Common Name:"), CaMgm::commonName ));
        contents = add (contents, emails);
        contents = add (contents, `VSpacing(2));	
        contents = add (contents, `HBox(`HWeight (1,`TextEntry( `id (`id_organisation), _("O&rganization:"), CaMgm::organisation )),
					`HSpacing(2), 
					`HWeight (1,`TextEntry( `id (`id_organisationUnit), _("Or&ganizational Unit:"), CaMgm::organisationUnit ))));
        contents = add (contents, `HBox(`HWeight (1,`TextEntry(`id (`id_locality), _("Loca&lity:"), CaMgm::locality )),
					`HSpacing(2), 
					`HWeight (1,`TextEntry(`id (`id_state), _("&State:"), CaMgm::state ))));
	    
        contents = add (contents, `HBox (`HWeight(1,`ComboBox( `id (`id_country), _("C&ountry:"), getCountryList()))));

                                // To translators: dialog label

        Wizard::SetContents ( _("Create New ") + kind + _(" (step 1/3)"), contents, helptext, true, true);
	Wizard::RestoreNextButton();
	Wizard::DisableBackButton();
	UI::ChangeWidget(`id(`id_CAName), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-");	
	UI::SetFocus(`id(`id_CAName));
	
        symbol ui = nil;

        repeat
        {
            boolean anyitems = UI::QueryWidget (`id (`table), `CurrentItem) != nil;
            UI::ChangeWidget (`id (`deleteEmail), `Enabled, anyitems);
            UI::ChangeWidget (`id (`defaultEmail), `Enabled, anyitems);	    

            ui = (symbol) UI::UserInput ();

            if (ui == `next ||
		ui == `addEmail ||
		ui == `deleteEmail||
		ui == `defaultEmail)
            {
		CaMgm::commonName = (string) UI::QueryWidget(`id(`id_commonName), `Value);
		if (kind == "Root CA"
		    || kind == "Sub CA")
		{		
		    CaMgm::CAName = (string) UI::QueryWidget(`id(`id_CAName), `Value);
		}
		CaMgm::organisation = (string) UI::QueryWidget(`id(`id_organisation), `Value);
		CaMgm::organisationUnit = (string) UI::QueryWidget(`id(`id_organisationUnit), `Value);
		CaMgm::locality = (string) UI::QueryWidget(`id(`id_locality), `Value);
		CaMgm::state = (string) UI::QueryWidget(`id(`id_state), `Value);
		CaMgm::country = (string) UI::QueryWidget(`id(`id_country), `Value);

		if (ui == `addEmail)
		{
		    map selection = $[];
		    selection["name"] = (string) UI::QueryWidget(`id(`id_emailname), `Value);
		    if (size (CaMgm::emailList) > 0)
		    {
			selection["default"] = false;
		    }
		    else
		    {
			selection["default"] = true;
		    }
			
		    if (size (selection["name"]:"") > 0)
		    {
			if (check_mail_address(selection["name"]:""))
			{
			    CaMgm::emailList = add (CaMgm::emailList, selection);
			}
			else
			{
			    Popup::Error(_("Invalid e-mail format."));
			    UI::SetFocus(`id(`id_emailname));			    
			}
		    }
		    ui = `again;
		}
		if (ui == `deleteEmail)
		{
		    integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		    term table_item = (term) UI::QueryWidget(`id(`table), `Item(id));
		    string current_name = (string) select(table_item, 1, "");
		    list<map> dummy_map = [];

		    //finding entry in list
		    foreach (map element, CaMgm::emailList, ``{
			if (element["name"]:"" != current_name )
			{
			    dummy_map = add (dummy_map, element);
			}
		    });
		    
		    CaMgm::emailList = dummy_map;

		    ui = `again;
		}
		if (ui == `defaultEmail)
		{
		    integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		    term table_item = (term) UI::QueryWidget(`id(`table), `Item(id));
		    string current_name = (string) select(table_item, 1, "");
		    list<map> dummy_map = [];

		    //finding entry in list
		    foreach (map element, CaMgm::emailList, ``{
			if (element["name"]:"" == current_name )
			{
			    element["default"] = true;
			}
			else
			{
			    element["default"] = false;
			}
			dummy_map = add (dummy_map, element);			
		    });
		    
		    CaMgm::emailList = dummy_map;

		    ui = `again;
		}
		if (ui == `next)
		{
		    if (kind == "Root CA"
			&& size (CaMgm::CAName) <= 0)
		    {
			UI::SetFocus(`id(`id_CAName));
			Popup::Error(_("CA name required."));
			ui = `again;
		    }
		    if (size (CaMgm::commonName) <= 0)
		    {
			UI::SetFocus(`id(`id_commonName));
			Popup::Error(_("Common name required."));
			ui = `again;
		    }

		    // Checking if there is an EMAIL entry without using the
		    // "add" button
		    map selection = $[];
		    selection["name"] = (string) UI::QueryWidget(`id(`id_emailname), `Value);
		    if (size (selection["name"]:"") > 0)
		    {
			if (size (CaMgm::emailList) > 0)
			{
			    selection["default"] = false;
			}
			else
			{
			    selection["default"] = true;
			}
			
			if (check_mail_address(selection["name"]:""))
			{
			    CaMgm::emailList = add (CaMgm::emailList, selection);
			}
			else
			{
			    Popup::Error(_("Invalid e-mail format."));
			    UI::SetFocus(`id(`id_emailname));			    
			    ui = `again;			    
			}
		    }		    
		}
	    }
        }
        until (contains ([`back, `again, `next, `abort], ui));

        return ui;
    }


    /**
     * Creating new CA/Certificate ( 2. step )
     * @return `next, 'back, 'cancel, `advancedOptions
     */
    define symbol new_cert2 (string kind) ``{

        // help text 1/4
        string helptext = _("<p>The private key of the certificate needs a <B>Password</B> with a minimum length of five characters. For verification reasons, reenter it in the next field.</p>");

        // help text 2/4
        helptext = helptext + _("<p>Each certificate has its own <b>Key Length</b>. Some applications that use certificates need special key lengths.</p>");

        // help text 3/4
        helptext = helptext + _("<p>The certificate is valid for only specific period (<b>Valid Period</b>). Enter the time frame in days.</p>");

        // help text 4/4
        helptext = helptext + _("<p><b>Advanced Options</b> are very special options. If you change these options, SUSE cannot guarentee that the generated certificate will work correctly.</p>");


        term contents = `VBox ();
        contents = add (contents, `Password( `id (`id_password), _("&Password:"), CaMgm::password));
        contents = add (contents, `Password( `id (`id_verifyPassword), _("V&erify Password:"), CaMgm::verifyPassword));
	contents = add (contents, `IntField( `id (`id_keyLength), _("&Key Length (bit):"), 100, 9999, CaMgm::keyLength));
	if (kind != "Client Request"
	    &&kind != "Server Request")
	{
	    contents = add (contents, `IntField( `id (`id_validPeriod), _("&Valid Period (days):"), 1, 10000, CaMgm::validPeriod));
	}
        contents = add (contents, `Left (`PushButton (`id (`advancedOptions),  _("&Advanced Options"))));

                                // To translators: dialog label
        Wizard::SetContents ( _("Create New ") + kind + _(" (step 2/3)"), contents, helptext, true, true);
	Wizard::RestoreNextButton();
	UI::SetFocus(`id(`id_password));
			 
        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next ||
		ui == `advancedOptions)
            {
		CaMgm::password = (string) UI::QueryWidget(`id(`id_password), `Value);
		CaMgm::verifyPassword = (string) UI::QueryWidget(`id(`id_verifyPassword), `Value);
		CaMgm::keyLength = (integer) UI::QueryWidget(`id(`id_keyLength), `Value);
		if (kind != "Client Request"
		    &&kind != "Server Request")
		{
		    CaMgm::validPeriod = (integer) UI::QueryWidget(`id(`id_validPeriod), `Value);
		}

		if (CaMgm::password != CaMgm::verifyPassword)
		{
		    UI::SetFocus(`id(`id_verifyPassword));		    
		    Popup::Error(_("Passwords are different."));
		    ui = `again;
		}
		if (ui == `next)
		{
		    if (size (CaMgm::password) <= 0)
		    {
			UI::SetFocus(`id(`id_password));			
			Popup::Error(_("Password required."));
			ui = `again;
		    }
		}		
	    }
        }
        until (contains ([`back, `next, `abort, `advancedOptions ], ui));

        return ui;
    }

    /**
     * Creating new CA/Certificate ( 3. step )
     * @return `next, 'back, 'cancel
     */
    define symbol new_cert3 (string kind) ``{

	integer i = 0;
	boolean nextLine = false;
	
        // help text 1/2
        string helptext = _("<p>This frame gives an overview of all settings for the certificate that will be created.</p>");
        // help text 2/2
        helptext = helptext + _("<p>Click <b>Create</b> to generate the certificate.</p>");

	string text = _("\n<b>Summary</b>");
	text = text + "<br><pre>";
	if ( (kind == "Root CA"
	      || kind == "Sub CA")
	    && size (CaMgm::CAName) > 0)
	{
	    text = text + _("CA Name:                  ")  + CaMgm::CAName + "\n";
	}
	if (size (CaMgm::commonName) > 0)
	{
	    text = text +  _("Common Name:              ")  + CaMgm::commonName + "\n";
	}
	if (size (CaMgm::organisation) > 0)
	{
	    text = text +  _("Organization:             ")  + CaMgm::organisation + "\n";
	}
	if (size (CaMgm::organisationUnit) > 0)
	{	
	    text = text +  _("Organizational Unit:        ")  + CaMgm::organisationUnit + "\n";
	}

	if (size (CaMgm::emailList) > 0)
	{
	    text = text +  _("E-Mail Addresses:                 ");

	    i = 0;
	    foreach (map element, CaMgm::emailList, ``{
		if (i==0)
		{
		    text = text + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["name"]:"";
		}
		if (element["default"]:false)
		{
		    text = text + " (default)" + "\n";
		}
		else
		{
		    text = text + "\n";
		}
	    
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}
	if (size (CaMgm::locality) > 0)
	{		
	    text = text +  _("Locality:                 ")  + CaMgm::locality + "\n";
	}
	if (size (CaMgm::state) > 0)
	{			
	    text = text + _("State:                    ") + CaMgm::state + "\n";
	}
	if (size (CaMgm::country) > 0)
	{	
	    text = text + _("Country:                  ") + CaMgm::country + "\n";
	}
	text = text + _("Key Length:               ") + CaMgm::keyLength + " bit\n";
	text = text + _("Valid Period:             ") + CaMgm::validPeriod + _(" days\n");
	text = text + "Basic Constaints:         " + CaMgm::adv_ca
	    + (CaMgm::adv_cri_ca ? _(" (critical)\n") : "\n") ;
	if (CaMgm::adv_pathlen)
	{
	    text = text +  "                          "  + _("Path Length ") + CaMgm::adv_pathlenValue + "\n"; 
	}
	if (size (CaMgm::adv_distribution_point) > 0)
	{
	    text = text + "CRL Distribution Point:   " + CaMgm::adv_distribution_point
		+ (CaMgm::adv_cri_distribution_point ? _(" (critical)\n") : "\n") ;
	}
	if (size (CaMgm::adv_challenge_password) > 0)
	{	
	    text = text + "Challenge Password:        " + CaMgm::adv_challenge_password + "\n";
	}

	if (size (CaMgm::adv_issuer_alt_name_list) > 0
	    || CaMgm::adv_copy_issuer_alt_name)
	{	
	    text = text + "Issuer Alt Name:          "
		+ (CaMgm::adv_cri_issuer_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_issuer_alt_name ?  _("Copy Subject Alt Name from CA"): "");
	    i = 0;
	    if (CaMgm::adv_cri_issuer_alt_name
		|| CaMgm::adv_copy_issuer_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}

	if (CaMgm::adv_digitalSignature
	    || CaMgm::adv_nonRepudiation
	    || CaMgm::adv_cRLSign
	    || CaMgm::adv_keyEncipherment
	    || CaMgm::adv_dataEncipherment
	    || CaMgm::adv_encipherOnly
	    || CaMgm::adv_keyAgreement
	    || CaMgm::adv_keyCertSign
	    || CaMgm::adv_decipherOnly)
	{		
	    text = text + "Key Usage:                "
		+ (CaMgm::adv_cri_key_usage ? _("(critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_key_usage;
	    if (CaMgm::adv_digitalSignature)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "digitalSignature\n";
		}
		else
		{
		    text = text + "                          " + "digitalSignature\n";
		}	    
	    }
	    if (CaMgm::adv_nonRepudiation)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "nonRepudiation\n";
		}
		else
		{
		    text = text + "                          " + "nonRepudiation\n";
		}	    
	    }
	    if (CaMgm::adv_cRLSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "cRLSign\n";
		}
		else
		{
		    text = text + "                          " + "cRLSign\n";
		}	    
	    }
	    if (CaMgm::adv_keyEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "keyEncipherment\n";
		}	    	    
	    }
	    if (CaMgm::adv_dataEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "dataEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "dataEncipherment\n";
		}	    
	    }
	    
	    if (CaMgm::adv_encipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "encipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "encipherOnly\n";
		}	    
	    }
	    if (CaMgm::adv_keyAgreement)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyAgreement\n";
		}
		else
		{
		    text = text + "                          " + "keyAgreement\n";
		}	    
	    }
	    if (CaMgm::adv_keyCertSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyCertSign\n";
		}
		else
		{
		    text = text + "                          " + "keyCertSign\n";
		}	    
	    }
	    if (CaMgm::adv_decipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "decipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "decipherOnly\n";
		}   	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
	    
	if (size (CaMgm::adv_nsComment) > 0)
	{	
	    text = text + _("nsComment:                ") + CaMgm::adv_nsComment
		+ (CaMgm::adv_cri_nsComment ? _(" (critical)\n") : "\n") ;
	}

	if (CaMgm::adv_client
	    || CaMgm::adv_server
	    || CaMgm::adv_sslCA
	    || CaMgm::adv_email
	    || CaMgm::adv_reserved
	    || CaMgm::adv_emailCA
	    || CaMgm::adv_objsign
	    || CaMgm::adv_objCA)
	{
	    text = text + _("nsCertType:               ")
		+ (CaMgm::adv_cri_nsCertType ? _(" (critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_nsCertType;
	    if (CaMgm::adv_client)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "client\n";
		}
		else
		{
		    text = text + "                          " + "client\n";
		}	    
	    }
	    if (CaMgm::adv_server)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "server\n";
		}
		else
		{
		    text = text + "                          " + "server\n";
		}	    
	    }
	    if (CaMgm::adv_sslCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "sslCA\n";
		}
		else
		{
		    text = text + "                          " + "sslCA\n";
		}	    
	    }
	    if (CaMgm::adv_email)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "email\n";
		}
		else
		{
		    text = text + "                          " + "email\n";
		}	    
	    }
	    if (CaMgm::adv_reserved)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "reserved\n";
		}
		else
		{	
		    text = text + "                          " + "reserved\n";
		}	    
	    }
	    
	    if (CaMgm::adv_emailCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "emailCA\n";
		}
		else
		{
		    text = text + "                          " + "emailCA\n";
		}	    
	    }
	    if (CaMgm::adv_objsign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objsign\n";
		}
		else
		{
		    text = text + "                          " + "objsign\n";
		}	    
	    }
	    if (CaMgm::adv_objCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objCA\n";
		}
		else
		{
		    text = text + "                          " + "objCA\n";
		}	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
	if (size (CaMgm::adv_nsSslServerName) > 0)
	{	
	    text = text + "nsSslServerName:          " + CaMgm::adv_nsSslServerName
		+ (CaMgm::adv_cri_nsSslServerName ? _(" (critical)\n") : "\n") ;
	}

	if (size (CaMgm::adv_subject_alt_name_list) > 0
	    || CaMgm::adv_copy_subject_alt_name)
	{	
	    text = text + "Subject Alt Name:         "
		+ (CaMgm::adv_cri_subject_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_subject_alt_name ?   _("Copy Standard E-Mail Address"): "");
	    i = 0;
	    if (CaMgm::adv_cri_subject_alt_name
		|| CaMgm::adv_copy_subject_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_subject_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}

 	if (size (CaMgm::adv_unstructured_name) > 0)
	{	
	    text = text +   "Unstructured Name:        "  + CaMgm::adv_unstructured_name +"\n";
	}
 	if (size (CaMgm::exp_subjectKeyIdentifier) > 0)
	{	
	    text = text +   "Subject Key Identifier:   "  + CaMgm::exp_subjectKeyIdentifier
		+ (CaMgm::exp_cri_subjectKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_authorityKeyIdentifier) > 0)
	{	
	    text = text +   "Authority Key Identifier: "  + CaMgm::exp_authorityKeyIdentifier
		+ (CaMgm::exp_cri_authorityKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsBaseUrl) > 0)
	{	
	    text = text +   "nsBaseUrl:                "  + CaMgm::exp_netscape_nsBaseUrl
		+ (CaMgm::exp_cri_netscape_nsBaseUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsRevocationUrl) > 0)
	{	
	    text = text +   "nsRevocationUrl:          "  + CaMgm::exp_netscape_nsRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaRevocationUrl) > 0)
	{	
	    text = text +   "nsCaRevocationUrl:        "  + CaMgm::exp_netscape_nsCaRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsCaRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsRenewalUrl) > 0)
	{	
	    text = text +   "nsRenewalUrl:             "  + CaMgm::exp_netscape_nsRenewalUrl
		+ (CaMgm::exp_cri_netscape_nsRenewalUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaPolicyUrl) > 0)
	{	
	    text = text +   "nsCaPolicyUrl:            "  + CaMgm::exp_netscape_nsCaPolicyUrl
		+ (CaMgm::exp_cri_netscape_nsCaPolicyUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_authorityInfoAccess) > 0)
	{	
	    text = text +   "authorityInfoAccess:      "  + CaMgm::exp_authorityInfoAccess
		+ (CaMgm::exp_cri_authorityInfoAccess ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_extendedKeyUsage) > 0)
	{	
	    text = text +   "extendedKeyUsage:         "  + CaMgm::exp_extendedKeyUsage
		+ (CaMgm::exp_cri_extendedKeyUsage ? _(" (critical)\n") : "\n") ;
	}
	
	text = text + "</pre>";

        term contents = `VBox ();
        contents = add (contents, `RichText(text));

                                // To translators: dialog label
        Wizard::SetContents ( _("Create New ") + kind + _(" (step 3/3)"), contents, helptext, true, true);
	Wizard::SetNextButton(`next, Label::CreateButton() );

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		//creating new certificate
		if (!cert_write (kind))
		{
		    showErrorCaManagement ();
		    ui = `again;
		}
	    }
        }
        until (contains ([`back, `next, `abort], ui));

        return ui;
    }


}
