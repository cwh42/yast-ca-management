/**
 *
 * File:
 *   new_cert.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Creating a new CA/Certificate
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Creating a new CA/Certificate
 *
 */


{

    textdomain "ca_mgm";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "CaManagement";
    
    include "ca-management/util.ycp";
    
    /**
     * Creates EMAIL items
     * @return a list EMAIL items formated for a UI table
     */
    define list<term> getEMAILList () ``{
        list<term> result = [];
        integer i = 0;

	foreach (string element, CaMgm::emailList, ``{
	    result = add (result, `item (`id (i), element ) );
	    i = i + 1;
	});
        return result;
    }
    
    /**
     * Creating new CA/Certificate ( 1. step )
     * @return `next, 'back, 'cancel, 'again
     */
    define symbol new_cert1 () ``{

        // help text 1/5
        string helptext = _("<p>In order to generate a new ceritficate or CA some entries are needed.</p>");
        // help text 2/5
        helptext = helptext + _("<p>It depends on the policy defined in the configuration file.</p>");
        // help text 3/5
        helptext = helptext + _("<p><b>Common Name</b> is the name of the User/Admistrator/Server.</p>");
        // help text 4/5
        helptext = helptext + _("<p><b>E-Mail Address(es)</b> are valid E-Mail addresses of the User or Server-Admistrator.</p>");
        // help text 5/5
        helptext = helptext + _("<p><b>Organisation</b>, <b>Organisational Unit</b>, <b>Locality</b> and <b>State</p> are often optional.</p>");
        // help text 6/5
        helptext = helptext + _("<p><b>Country</b> is the ISO signature of a country.</p>");
	

        list<term> emailTermList = getEMAILList ();
	
        term buttons = `VBox ();
	// To translators: pushbutton label
	buttons = add (buttons,  `HBox ( `HWeight (1, `PushButton (`id (`deleteEmail), `opt (`key_F5), Label::DeleteButton()))));
        buttons = add (buttons, `VStretch());
	// To translators: pushbutton label
        buttons = add (buttons,  `HBox ( `HWeight(1, `PushButton (`id (`addEmail), `opt (`key_F3), Label::AddButton()))));

	term editEmail = `VBox ();
	editEmail = add (editEmail, `HBox(
					  `VSpacing(5),
					  `Table (`id (`table), `opt (`notify, `immediate),
                                          `header (
                                              // To translators: table headers
                                              _("E-Mail Address(es)")),
                                          emailTermList)));
	editEmail = add (editEmail, `TextEntry (`id (`id_emailname ), "" ) );
	
        term emails = `HBox ();
        emails = add (emails, `HWeight (3, editEmail));
        emails = add (emails, `HWeight (1, buttons));

        term contents = `VBox ();
        contents = add (contents, `TextEntry( `id (`id_commonName), _("&Common Name"), CaMgm::commonName ));
        contents = add (contents, emails);
        contents = add (contents, `TextEntry( `id (`id_organisation), _("O&rgansisation"), CaMgm::organisation ));
        contents = add (contents, `TextEntry( `id (`id_organisationUnit), _("Or&gansisation Unit"), CaMgm::organisationUnit ));
        contents = add (contents, `TextEntry( `id (`id_locality), _("Loca&lity"), CaMgm::locality ));
        contents = add (contents, `TextEntry( `id (`id_state), _("&State"), CaMgm::state ));
        contents = add (contents, `Left (`ComboBox( `id (`id_country), _("C&ountry"),
					     [
					      `item(`id(`countryDE), "DE", CaMgm::country == "DE" ),
					      `item(`id(`countryEN), "EN", CaMgm::country == "EN" )
					      ] )));

                                // To translators: dialog label
        Wizard::SetContents (_("Create new Certificate (step 1/3)"), contents, helptext, true, true);
	UI::ChangeWidget (`id (`next), `Label, Label::NextButton());
	
        symbol ui = nil;

        repeat
        {
            boolean anyitems = UI::QueryWidget (`id (`table), `CurrentItem) != nil;
            UI::ChangeWidget (`id (`deleteEmail), `Enabled, anyitems);

            ui = (symbol) UI::UserInput ();

            if (ui == `next ||
		ui == `addEmail ||
		ui == `deleteEmail)
            {
		CaMgm::commonName = (string) UI::QueryWidget(`id(`id_commonName), `Value);
		CaMgm::organisation = (string) UI::QueryWidget(`id(`id_organisation), `Value);
		CaMgm::organisationUnit = (string) UI::QueryWidget(`id(`id_organisationUnit), `Value);
		CaMgm::locality = (string) UI::QueryWidget(`id(`id_locality), `Value);
		CaMgm::state = (string) UI::QueryWidget(`id(`id_state), `Value);
		if (UI::QueryWidget(`id(`id_country), `Value) == `countryDE)
		{
		    CaMgm::country = "DE";
		}
		else
		{
		    CaMgm::country = "EN";
		}
		
		if (ui == `addEmail)
		{
		    string selection = (string) UI::QueryWidget(`id(`id_emailname), `Value);
		    if (size(selection) > 0)
		    {
			if (check_mail_address(selection))
			{
			    CaMgm::emailList = add (CaMgm::emailList, selection);
			}
			else
			{
			    Popup::Error(_("Wrong EMAIL format."));
			}
		    }
		    ui = `again;
		}	    
		if (ui == `deleteEmail)
		{
		    integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		    CaMgm::emailList = remove (CaMgm::emailList, id);		    

		    ui = `again;		
		}		
	    }
        }
        until (contains ([`back, `again, `next, `abort], ui));

        return ui;
    }


    /**
     * Creating new CA/Certificate ( 2. step )
     * @return `next, 'back, 'cancel, `advancedOptions
     */
    define symbol new_cert2 () ``{

        // help text 1/5
        string helptext = _("<p>The private key of the certrificate needs a <B>Password</B>. For verification reasons please reenter it in the next field.</p>");
        // help text 2/5 (only for creating sub CAs and certificates)
        helptext = helptext + _("<p><b>CA Password</b> is the password of the CA which should sign the new certificate.</p>");

        // help text 3/5
        helptext = helptext + _("<p>Each certificate has its own <b>Key Lenght</b>. Please take care that some applications which use certificates, need special key lengths.</p>");

        // help text 4/5
        helptext = helptext + _("<p>The ceritficate will be valid for only specific period(<b>Valid Period</b>.</p>");

        // help text 5/5
        helptext = helptext + _("<p><b>Advanced Options</b> are very special options. If you use this option, please take care that SuSE cannot guarentee that the generated certificate will work correctly.</p>");

	
        term contents = `VBox ();
        contents = add (contents, `Password( `id (`id_password), _("&Password"), CaMgm::password));
        contents = add (contents, `Password( `id (`id_verifyPassword), _("V&erify Password"), CaMgm::verifyPassword));	
        contents = add (contents, `Password( `id (`id_caPassword), _("&CA Password"), CaMgm::CAPassword));
	contents = add (contents, `IntField( `id (`id_keyLength), _("&Key Length (bit):"), 1, 10000, CaMgm::keyLength));
	contents = add (contents, `IntField( `id (`id_validPeriod), _("&Valid Period (days):"), 1, 10000, CaMgm::validPeriod));
        contents = add (contents, `Left (`PushButton (`id (`advancedOptions),  _("&Advanced Options"))));

                                // To translators: dialog label
        Wizard::SetContents (_("Create new Certificate (step 2/3)"), contents, helptext, true, true);
	UI::ChangeWidget (`id (`next), `Label, Label::NextButton());	

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next ||
		ui == `advancedOptions)
            {
		CaMgm::password = (string) UI::QueryWidget(`id(`id_password), `Value);
		CaMgm::verifyPassword = (string) UI::QueryWidget(`id(`id_verifyPassword), `Value);
		CaMgm::CAPassword = (string) UI::QueryWidget(`id(`id_caPassword), `Value);
		CaMgm::keyLength = (integer) UI::QueryWidget(`id(`id_keyLength), `Value);
		CaMgm::validPeriod = (integer) UI::QueryWidget(`id(`id_validPeriod), `Value);

		if (CaMgm::password != CaMgm::verifyPassword)
		{
		    Popup::Error(_("Passwords are different."));
		    ui = `again;
		}

		if (ui == `advancedOptions)
		{

		}	    		
	    }
        }
        until (contains ([`back, `next, `abort, `advancedOptions ], ui));

        return ui;
    }

    /**
     * Creating new CA/Certificate ( 3. step )
     * @return `next, 'back, 'cancel
     */
    define symbol new_cert3 () ``{

        // help text 1/4
        string helptext = _("<p>This frame gives an overview about all setting for the certificate which will be created.</p>");
        // help text 2/4
        helptext = helptext + _("<p>Click <b>Create</b> to generate the certificate.</p>");

	string text = _("<br><h3>Summary</h3>");
	text = text + "<pre>";
	text = text +  _("Common Name:       ")  + CaMgm::commonName + "\n";
	text = text +  _("Organisation:      ")  + CaMgm::organisation + "\n";
	text = text +  _("Organisation Unit: ")  + CaMgm::organisationUnit + "\n";
	text = text +  _("Locality:          ")  + CaMgm::locality + "\n";
	text = text +  _("EMAIL(s):          ");

	integer i = 0;
	foreach (string element, CaMgm::emailList, ``{
	    if (i==0)
	    {
		text = text + element + "\n";
	    }
	    else
	    {
		text = text + "                   " + element + "\n";		
	    }
	    i = i + 1;
	});
	if (i==0)
	{
	    text = text + "\n";		
	}

	text = text + _("Locality:          ") + CaMgm::locality + "\n";
	text = text + _("State:             ") + CaMgm::state + "\n";
	text = text + _("Country:           ") + CaMgm::country + "\n";
	text = text + _("Key Length:        ") + CaMgm::keyLength + " bit\n";
	text = text + _("Valid Period:      ") + CaMgm::validPeriod + _(" days\n");
	text = text + "</pre>";

        term contents = `VBox ();
        contents = add (contents, `RichText(text));

                                // To translators: dialog label
        Wizard::SetContents (_("Create new Certificate (step 3/3)"), contents, helptext, true, true);
	UI::ChangeWidget (`id (`next), `Label, Label::CreateButton());	

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		//creating new certificate

	    }
        }
        until (contains ([`back, `next, `abort], ui));

        return ui;
    }
    

}
