/**
 *
 * File:
 *   request.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Handling requests of a CA
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Showing and hadling CA requests
 *
 */


{
    include "ca-management/floppy.ycp";
    
    define list<string> requestID = [];

    // help text 1/6
    string requestHelptext = _("<p>First, see a list view with all available requests of this CA. The columns are the DN of the request including the e-mail address.</p>");
    // help text 2/6 
    requestHelptext = requestHelptext + _("<p>Select one of the request and execute some actions.</p>");
    // help text 3/6 
    requestHelptext = requestHelptext + _("<p><b>View</b> opens a window with a text representation of the complete request.</p>");
    // help text 4/6
    requestHelptext = requestHelptext + _("<p>Furthermore, you can <b>Sign</b>, <b>Delete</b> or <b>Export</b> a request.</p>");
    // help text 5/6
    requestHelptext = requestHelptext + _("<p>With <b>Import</b>, reading a new request.</p>");
    // help text 6/6
    requestHelptext = requestHelptext + _("<p>In the area below, see the most important values of the selected request.</p>");


    /**
     * Signing new Request sequence
     * @return sequence result
     */
    define symbol signRequestSequence() ``{

	map aliases = $[
//	   "new_certinit"   	: ``(new_cert_init ("Server Request")),
//	   "new_certSaveDef"  	: ``(new_cert_save_default ()),		
//	   "new_cert1"  	: ``(new_cert1 ("Server Request")),
//	   "new_cert2"   	: ``(new_cert2 ("Server Request")),
//	   "new_cert3"   	: ``(new_cert3 ("Server Request")),
//	   "new_cert_advanced"  : ``(new_cert_advanced (false)),
	   ];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	symbol ret = nil;// = WizardSequencer(aliases, CaMgm::requestSequence);
	
	UI::CloseDialog();

	return ret;
    }
    

    /**
     * showLongRequestDescription - description of a request in textform
     * @param CA name , certification name
     */
    define string showLongRequestDescription (string CAname,
					      string Request) ``{

	string ret = (string) YaPI::CaManagement::ReadRequest ($["caName":CAname,
								 "request":Request,
								 "type":"plain"]);
	
	y2milestone("ReadRequest(%1,%2): %3", CAname, Request, ret);
	ret = "<pre>" + ret + "</pre>";
	
        if (ret == nil)
        {
            showErrorCaManagement ();
        }
	else
	{
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `VSpacing(16),
				   `VBox (
					  `HSpacing (100),
					  // popup window header
					  `Heading (_("Description")),
					  `VSpacing (0.5),
					  `RichText (ret),
					  `VSpacing (1.5),
					  // push button label
					  `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
					  )
				   )
			    );

	    UI::SetFocus (`id(`ok));
	    UI::UserInput ();
	    UI::CloseDialog ();	    
	}	
    }
    

    /**
     * getRequestDescription - description of a request
     * @param map of description
     * @return a string with the request description  
     */      
    define string getRequestDescription (map requestMap) ``{
	string text = _("\n<b>Description</b>");
        if (requestMap == nil)
        {
            showErrorCaManagement ();
            return _("\nRequest not found");
        }
	text = text + "<br>";
	text = text + "<pre>";
	map dn = requestMap["DN_HASH"]:$[];
	if (size (dn) > 0)
	{
	    text = text + "\nCommon Name:        " + ((list)dn["CN"]:[])[0]:"";
	    text = text + "\nOrganization:       " + ((list)dn["O"]:[])[0]:"";
	    text = text + "\nLocation:           " + ((list)dn["L"]:[])[0]:"";	    
	    text = text + "\nState:              " + ((list)dn["ST"]:[])[0]:"";
	    text = text + "\nCountry:            " + ((list)dn["C"]:[])[0]:"";
	    text = text + "\nEMAIL:              " + ((list)dn["EMAILADDRESS"]:[])[0]:"";
	}
	text = text + "\nIs CA:              " + requestMap["IS_CA"]:"";
	text = text + "\nKey Size:           " + requestMap["KEYSIZE"]:"";
	text = text + "\nVersion:            " + requestMap["VERSION"]:"";	
	text = text + "\nalgo. of pub. Key : " + requestMap["PUBKEY_ALGORITHM"]:"";
	text = text + "\nalgo. of signature: " + requestMap["SIGNATURE_ALGORITHM"]:"";			
	text = text + "</pre>";	
	return text;
    }
    

    /**
     * Creates request items
     *
     * @param name of the selected request
     * @return a list request items formated for a UI table
     */
    define list<term> getRequestList (string currentCA) ``{
        list<term> result = [];
        integer i = 0;

	requestID = [];
	
	list<map> ret = (list<map>) YaPI::CaManagement::ReadRequestList ($["caName":currentCA]);
        if (ret == nil)
        {
            showErrorCaManagement ();
	    return nil;
        }
        y2milestone("ReadRequestList(%1): %2", currentCA, ret);
	

	foreach (map element, ret, ``{
	    result = add (result, `item (`id (i), 
					 element["commonName"]:"",
					 element["emailAddress"]:"",
					 element["organizationName"]:"",
					 element["organizationalUnitName"]:"",
					 element["localityName"]:"",
					 element["stateOrProvinceName"]:"",
					 element["country"]:"" ) );
	    requestID = add (requestID, element["request"]:"");
	    i = i + 1;
	});
        return result;
    }

    /**
     * Dialog Tab - request - 
     * @return term for requests of a selected CA
     */
    term getRequestTab () {    
        list<term> certTermList = getRequestList (CaMgm::currentCA);	
	if (certTermList == nil)
	{
	    return nil;
	}

        term contents = `VBox (
			       `VSpacing (1),
			       `HBox (
				      `HSpacing (1),
				      `Table (`id (`table), `opt (`notify, `immediate),
					      `header (
						       // To translators: table headers
						       _("Common Name"),
						       _("E-Mail Address"), _("Organization"),
						       _("Organizational Unit"), _("Locality"),
						       _("State"), _("Country")),
					      certTermList),
				      `HSpacing (1)
				      ),			       
			       `HBox (
				      `HSpacing (1),
				      `RichText(`id(`textinfo),""),
				      `HSpacing (1)
				      ),
			       `HBox (
				      `HSpacing (1),
				      `PushButton (`id (`import) , _("Import")),
				      `HStretch(),
				      `MenuButton(`id(`request),
						  _("Request"),
						  [
						   `item(`id(`view), _("View") ),
						   `item(`id(`sign), _("Sign") ),
						   `item(`id(`delete), _("Delete") ),
						   `item(`id(`exportFile), _("Export to File") )
						   ]
						  ),
				      `HSpacing (1)
				      ),
			       `VSpacing (1)
			       );
	return contents;
    }
    
    /**
     * Initialize the tab of the dialog
     */
    void initRequestTab () {
	boolean anyitems = UI::QueryWidget (`id (`table), `CurrentItem) != nil;
	UI::ChangeWidget (`id (`request), `Enabled, anyitems);
	
	integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
	CaMgm::currentRequest = (string) requestID[id]:"";
	
	if (anyitems)
	{
	    map ret = (map) YaPI::CaManagement::ReadRequest ($["caName":CaMgm::currentCA,
							       "request":CaMgm::currentRequest,
							       "type":"parsed"]);
	    y2milestone("ReadRequest(%1,%2): %3", CaMgm::currentCA, CaMgm::currentRequest, ret);	    
	    
	    UI::ChangeWidget( `id(`textinfo), `Value, getRequestDescription (ret));
	}	    
    }


    /**
     * Store settings of a tab of a dialog
     */
    void storeRequestTab () {
	
    }
    

    /**
     * Handle events in a tab of a dialog
     */
    symbol handleRequestTab (map event) {
	any ui = event["ID"]:nil;

	if (ui == `table)
	{
	    initRequestTab ();
	}
	    
	if (ui == `view)
	{
	    showLongRequestDescription (CaMgm::currentCA,
					CaMgm::currentRequest);		
	}	    	
	    
	if (ui == `delete)
	{
	    if (Popup::ContinueCancelHeadline (_("Delete"), _("Delete current request?")))
	    {
		boolean ret = nil;
		ret = (boolean) YaPI::CaManagement::DeleteRequest ($["caName":CaMgm::currentCA,
								     "request":CaMgm::currentRequest,
								     "caPasswd" : getPassword(CaMgm::currentCA)
								   ]);
		y2milestone ("DeleteRequest(%1) return %2", $["caName":CaMgm::currentCA,
							      "request":CaMgm::currentRequest
			     ],
			     ret);
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		}
		ui = `again;
	    }
	}
	if (ui == `sign)
	{
//	    revokeRequest();
	    ui = `again;		
	}
	if (ui == `exportFile)
	{
	    Popup::Error(_("currently not supported"));
	}
	if (ui == `import)
	{
	    importRequestFromDisk (CaMgm::currentCA);
	    ui = `again;	    
	}

	return (symbol)ui;
    }

}
