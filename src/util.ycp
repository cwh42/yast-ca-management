/**
 * File:        include/ca-management/util.ycp
 * Package:     Configuration of CAs
 * Summary:     Util definitions
 * Authors:     Stefan Schubert
 *
 * $Id$
 */

{

    textdomain "ca-management";

    import "Label";
    import "Hostname";
    import "YaPI::CaManagement";

    /**
     * See RFC 2822, 3.4
     * But for now, no-spaces@valid_domainname
     * @param address an address to check
     * @return valid?check_mail_address
     */
    define boolean check_mail_address (string address) ``{
	list<string> parts = splitstring (address, "@");
	if (size (parts) != 2)
	{
	    return false;
	}
	string address = parts[0]:"";

	return address != "" &&
	    findfirstof (address, " ") == nil &&
	    Hostname::CheckDomain (parts[1]:"");
    }

    /**
      * returns true if char is blank (newline, tab or space)
      * @param s single char string
      * @return boolean blank/non blank
      */
    define boolean isBlank(string s) ``{
        if (s == "\n" || s == "\t" || s == " ")
        {
            return true;
        }
        return false;
    }
    
    /**
     * removes trailing and leading blank chars from string.
     *   eg: "  as df  " -> "as df"
     * @param str string source string
     * @return string stripped string
     */
    define string strip(string str)``{
        //emtpy  string
        if (size (str) == 0) return "";

        integer bound = size (str);
        integer first = 0;
        integer last = size (str) - 1;
        // find first non-blank char
        while(first < bound && isBlank(substring(str, first, 1)))
        {
            first = first + 1;
        }
    
        while(last >= 0 && isBlank(substring(str, last, 1)))
        {
            last = last - 1;
        }
        if (last >= first)
        {
            return substring(str, first, last - first + 1);
        }
        return "";
    }

    /**
     * Dialog for asking a CA password. Returns the password
     *   without asking if is has already input before.
     * @param CAname 
     * @return string password
     */
    define string getPassword(string CAname)``{
	string password = nil;
	
	if (!haskey(CaMgm::passwdMap, CAname))
	{
	    // asking user
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `HSpacing(2),
				   `VBox (
					  `VSpacing (1),
					  // popup window header
					  `Heading (_("Enter CA Password")),
					  `VSpacing (1),
					  `Password( `id (`entry), _("&Password:")),
					  `VSpacing (1),					  
					  `HBox (  // push button label
						 `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						 `HStretch(),
						 `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						 ),
					  `VSpacing (1)					  
					  ),
				   `HSpacing (2)
				   )
			    );

	    UI::SetFocus (`id(`entry));
	    symbol ui = nil;
	    repeat
 	    {
		ui = (symbol) UI::UserInput ();
		password = (string) UI::QueryWidget(`id(`entry), `Value);
		if (ui == `cancel)
		{
		    password = nil;
		}
		else
		{
		    // checking password
		    boolean ret = nil;
		    ret = (boolean) YaPI::CaManagement::UpdateDB ($["caName": CAname, "caPasswd":password]);
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
			password = nil;
		    }
		    else
		    {
			// saving for next call
			y2milestone("Checking password for %1 OK", CAname);
			CaMgm::passwdMap[CAname] = password;
		    }
		}
	    }
	    until (contains ([`ok, `cancel], ui));
	    UI::CloseDialog ();
	}
	else
	{
	    // already available
	    password = CaMgm::passwdMap[CAname]:"";
	}
	
	return password;
    }

    /**
     * Dialog for exporting CA/Certificate/CRL to LDAP
     *   
     * @param "CA" "CRL" "CERT"
     * @return true ( success )
     */
    define boolean exportToLDAP(string kind, string CAname, string commonName, string email, string certificate)``{

	map kindmap = $["CA":"ca", "CRL":"crl", "CERT":"certificate"];
	string password = "";
	string hostname = "";
	string port = "";
	list<string> dn = [];
	string binddn = "";
	map default = nil;
	term passwordTerm = `VBox();
	
	passwordTerm = add (passwordTerm, `Password(  `id (`password), _("LDAP P&assword:")));	
	
	if (kind == "CERT")
	{	
	    default = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
								    "caName":CAname,
								    "commonName":commonName,
								    "emailAddress":email]);
	    passwordTerm = add (passwordTerm, `Password(  `id (`keyPasswd), _("key Password:")));
	    passwordTerm = add (passwordTerm, `Password(  `id (`p12Passwd), _("p12 Password:")));	    
	}
	else
	{
	    default = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
								    "caName":CAname]);
	}

	if (default == nil)
	{
	    // Error: Checking if there is have already a config has been established
	    map<string,any> messageMap = YaPI::Error();
	    y2milestone("ReadLDAPExportDefaults(%1) returns %2",
			$["type":kindmap[kind]:"", "caName":CAname],
			messageMap);
			
	    if (messageMap["code"]:"" == "LDAP_CONFIG_NEEDED")
	    {
		UI::OpenDialog (`opt(`decorated ),
				`HBox( `HSpacing(2),
				       `VBox (
					      `VSpacing (1),
					      // popup window header
					      `Heading (_("LDAP Initialization")),
					      `Label(_("LDAP has to initialize for the CA-Management.\nPlease give the concerning LDAP password.")),
					      `VSpacing (1),
					      `Password(  `id (`password), _("P&assword:")),
 					      `VSpacing (1),					  
					      `HBox (  // push button label
						     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						     `HStretch(),
						     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						     ),
					      `VSpacing (1)					  
					      ),
				       `HSpacing (2)
				       )
				);

		UI::SetFocus (`id(`password));
		symbol ui = nil;
		repeat
		{
		    ui = (symbol) UI::UserInput ();
		    password = (string) UI::QueryWidget(`id(`password), `Value);
		    if ( ui == `ok )
		    {
			if (YaPI::CaManagement::InitLDAPcaManagement($["ldapPasswd":password]))
			{
			    if (kind == "CERT")
			    {	
				default = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
											"caName":CAname,
											"commonName":commonName,
											"emailAddress":email]);
			    }
			    else
			    {
				default = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
											"caName":CAname]);
			    }			    
			}
			else
			{
			    Popup::Error(_("Cannot initialize LDAP for CA-Management."));
			}
		    }
		}
		until (contains ([`ok, `cancel], ui));
		UI::CloseDialog ();
	    }
	}

	if (default == nil)
	{
	    Popup::Error(_("Cannot read default settings from LDAP."));
	}	
	else
	{
	    hostname = default["ldapHostname"]:"";
	    port = default["ldapPort"]:"";
	    dn = default["destinationDN"]:[];
	    binddn = default["BindDN"]:"";
	}

	y2milestone("ReadLDAPExportDefaults() returned %1", default);
	
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export To LDAP")),
				      `VSpacing (1),
				      `TextEntry( `id (`hostname), _("&Hostname:"), hostname),
				      `TextEntry( `id (`port), _("&Port:"), port),
				      `HBox (`HWeight (1, `ComboBox( `id (`dn), `opt(`editable), _("&DN:"), dn))),
				      `TextEntry( `id (`binddn), _("&Bind DN:"), binddn),
				      passwordTerm,
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`hostname));
	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    
	    password = (string) UI::QueryWidget(`id(`password), `Value);
	    hostname = (string) UI::QueryWidget(`id(`hostname), `Value);
	    port = (string) UI::QueryWidget(`id(`port), `Value);
	    string stringDN = (string) UI::QueryWidget(`id(`dn), `Value);
	    binddn = (string) UI::QueryWidget(`id(`binddn), `Value);	    
	    
	    if (ui == `cancel)
	    {
		password = nil;
	    }
	    else
	    {
		// export to LDAP
		boolean ret = nil;
		if (kind == "CA")
		{
		    ret = (boolean) YaPI::CaManagement::ExportCAToLDAP ($["caName": CAname,
								    "ldapHostname" : hostname,
								    "ldapPort" : port,
								    "destinationDN" : stringDN,
								    "BindDN" : binddn,
								    "ldapPasswd" : password
								  ]);
		}
		if (kind == "CRL")
		{
		    ret = (boolean) YaPI::CaManagement::ExportCRLToLDAP ($["caName": CAname,
								     "ldapHostname" : hostname,
								     "ldapPort" : port,
								     "destinationDN" : stringDN,
								     "BindDN" : binddn,
								     "ldapPasswd" : password
								   ]);
		}
		if (kind == "CERT")
		{
		    string keyPasswd = (string) UI::QueryWidget(`id(`keyPasswd), `Value);
		    string p12Passwd = (string) UI::QueryWidget(`id(`p12Passwd), `Value);

		    if (size (keyPasswd) > 0)
		    {
			// p12Passwd is required is keyPasswd has been given
			ret = (boolean) YaPI::CaManagement::ExportCertificateToLDAP ($["caName": CAname,
										       "certificate" : certificate,
										       "ldapHostname" : hostname,
										       "ldapPort" : port,
										       "destinationDN" : stringDN,
										       "BindDN" : binddn,
										       "ldapPasswd" : password,
										       "keyPasswd" : keyPasswd,
										       "p12Passwd" : p12Passwd
										     ]);
		    }
		    else
		    {
			ret = (boolean) YaPI::CaManagement::ExportCertificateToLDAP ($["caName": CAname,
										       "certificate" : certificate,
										       "ldapHostname" : hostname,
										       "ldapPort" : port,
										       "destinationDN" : stringDN,
										       "BindDN" : binddn,
										       "ldapPasswd" : password
										     ]);
		    }
		}				
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		    ret = false;
		}
		else
		{
		    Popup::Message(_("Saved to LDAP successfully."));
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }


    /**
     * Dialog for exporting CA to file
     * @param CAname
     * @return true ( success )
     */
    define void exportCAtoFile (string CAname) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export CA to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM_CERT), `opt(`notify),
											  _("o&nly the certificate in PEM format"), true)),
								       `Left(`RadioButton(`id(`PEM_CERT_KEY), `opt(`notify),
											  _("ce&rtificate and the key unencrypted in PEM format" ))),
								       `Left(`RadioButton(`id(`PEM_CERT_ENCKEY), `opt(`notify),
											  _("c&ertificate and the key encrypted in PEM format" ))),
								       `Left(`RadioButton(`id(`DER_CERT), `opt(`notify),
											  _("&certificate in DER format" ))),
								       `Left(`RadioButton(`id(`PKCS12), `opt(`notify),
											  _("cer&tificate and the key in PKCS12 format" ))),
								       `Left(`RadioButton(`id(`PKCS12_CHAIN), `opt(`notify),
											  _("&like PKCS12 + include the CA chain" )))
								       )
								 )
					       ),
				      `Password( `id (`PK12password), "&P12Password:"),
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&Filename:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	UI::ChangeWidget (`id (`PK12password), `Enabled, false);	
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM_CERT:"PEM_CERT",
					   `PEM_CERT_KEY:"PEM_CERT_KEY",
					   `PEM_CERT_ENCKEY:"PEM_CERT_ENCKEY",
					   `DER_CERT:"DER_CERT",
					   `PKCS12:"PKCS12",
					   `PKCS12_CHAIN:"PKCS12_CHAIN"];
	    
            string kind =  kindmap[(symbol) UI::QueryWidget(`id(`rb),
						   `CurrentButton)]:"";

	    if (kind == "PKCS12"
		|| kind == "PKCS12_CHAIN")
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, true);
	    }
	    else
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, false);		
	    }

	    if (ui == `browse)
	    {
		string name = UI::AskForSaveFileName( "/tmp", "*", "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file

		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("Filename required"));
		    ui = `again;
		}
		else
		{
		    string ret = nil;
		    if (kind == "PKCS12"
			|| kind == "PKCS12_CHAIN")
		    {
			ret = (string) YaPI::CaManagement::ExportCA ($["caName": CAname,
									"caPasswd" : getPassword (CAname),
									"exportFormat" : kind,
									"destinationFile" : filename,
									"P12Password" : UI::QueryWidget (`id(`PK12password), `Value)
								       ]);
		    }
		    else
		    {
			ret = (string) YaPI::CaManagement::ExportCA ($["caName": CAname,
									"caPasswd" : getPassword (CAname),
									"exportFormat" : kind,
									"destinationFile" : filename
								       ]);
		    }
		    y2milestone ("ExportCA(%1) return %2", $["caName": CAname,
							     "exportFormat" : kind,
							     "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;			
		    }
		    else
		    {
			Popup::Message(_("CA saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }        

    /**
     * Dialog for exporting CRL to file
     * @param CAname
     * @return true ( success )
     */
    define void exportCRLtoFile (string CAname) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export CRL to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM), `opt(`notify),
											  _("&PEM format"), true)),
								       `Left(`RadioButton(`id(`DER), `opt(`notify),
											  _("&DER format" )))
								       )
								 )
					       ),
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&Filename:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM:"PEM",
					   `DER:"DER" ];
	    
            string kind =  kindmap[(symbol) UI::QueryWidget(`id(`rb),
						   `CurrentButton)]:"";

	    if (ui == `browse)
	    {
		string name = UI::AskForSaveFileName( "/tmp", "*", "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file

		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("Filename required"));
		    ui = `again;
		}
		else
		{
		    string ret = nil;
		    ret = (string) YaPI::CaManagement::ExportCRL ($["caName": CAname,
								   "exportFormat" : kind,
								   "destinationFile" : filename
								 ]);
		    
		    y2milestone ("ExportCRL(%1) return %2", $["caName": CAname,
							     "exportFormat" : kind,
							     "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;			
		    }
		    else
		    {
			Popup::Message(_("CRL saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }

    /**
     * Dialog for exporting Certificate to file
     * @param CAname
     * @return true ( success )
     */
    define void exportCertificateToFile (string CAname, string certificate) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export Certificate to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM_CERT), `opt(`notify),
											  _("o&nly the certificate in PEM format"), true)),
								       `Left(`RadioButton(`id(`PEM_CERT_KEY), `opt(`notify),
											  _("ce&rtificate and the key unencrypted in PEM format" ))),
								       `Left(`RadioButton(`id(`PEM_CERT_ENCKEY), `opt(`notify),
											  _("c&ertificate and the key encrypted in PEM format" ))),
								       `Left(`RadioButton(`id(`DER_CERT), `opt(`notify),
											  _("&certificate in DER format" ))),
								       `Left(`RadioButton(`id(`PKCS12), `opt(`notify),
											  _("cer&tificate and the key in PKCS12 format" ))),
								       `Left(`RadioButton(`id(`PKCS12_CHAIN), `opt(`notify),
											  _("&like PKCS12 + include the CA chain" )))
								       )
								 )
					       ),
				      `Password( `id (`PK12password), "&P12Password:"),
				      `Password( `id (`keyPassword), "&keyPassword:"),
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&Filename:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	UI::ChangeWidget (`id (`PK12password), `Enabled, false);	
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM_CERT:"PEM_CERT",
					   `PEM_CERT_KEY:"PEM_CERT_KEY",
					   `PEM_CERT_ENCKEY:"PEM_CERT_ENCKEY",
					   `DER_CERT:"DER_CERT",
					   `PKCS12:"PKCS12",
					   `PKCS12_CHAIN:"PKCS12_CHAIN"];
	    
            string kind =  kindmap[(symbol) UI::QueryWidget(`id(`rb),
						   `CurrentButton)]:"";

	    if (kind == "PKCS12"
		|| kind == "PKCS12_CHAIN")
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, true);
	    }
	    else
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, false);		
	    }

	    if (ui == `browse)
	    {
		string name = UI::AskForSaveFileName( "/tmp", "*", "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file

		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("Filename required"));
		    ui = `again;
		}
		else
		{
		    string ret = nil;
		    if (kind == "PKCS12"
			|| kind == "PKCS12_CHAIN")
		    {
			ret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
										"certificate" : certificate,
										"keyPassword" : UI::QueryWidget (`id(`keyPassword), `Value),
										"exportFormat" : kind,
										"destinationFile" : filename,
										"P12Password" : UI::QueryWidget (`id(`PK12password), `Value)
									      ]);
		    }
		    else
		    {
			ret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
										"certificate" : certificate,
										"keyPasswd" : UI::QueryWidget (`id(`keyPassword), `Value),
										"exportFormat" : kind,
										"destinationFile" : filename
									      ]);
		    }
		    y2milestone ("ExportCertificate(%1) return %2", $["caName": CAname,
								      "certificate" : certificate,
								      "exportFormat" : kind,
								      "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;
		    }
		    else
		    {
			Popup::Message(_("Certificate saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }            

}

