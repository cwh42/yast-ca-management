/**
 * File:        include/ca-management/util.ycp
 * Package:     Configuration of CAs
 * Summary:     Util definitions
 * Authors:     Stefan Schubert (schubi@suse.de)
 *
 * $Id$
 */

{

    textdomain "ca-management";

    import "CaMgm";    
    import "Label";
    import "Popup";
    import "Wizard";        
    import "Hostname";
    import "YaPI::CaManagement";

    include "ca-management/popup.ycp";

    /**
      * returns true if char is blank (newline, tab or space)
      * @param s single char string
      * @return boolean blank/non blank
      */
    define boolean isBlank(string s) ``{
        if (s == "\n" || s == "\t" || s == " ")
        {
            return true;
        }
        return false;
    }

    /**
     * removes trailing and leading blank chars from string.
     *   eg: "  as df  " -> "as df"
     * @param str string source string
     * @return string stripped string
     */
    define string strip(string str)``{
        //emtpy  string
        if (size (str) == 0) return "";

        integer bound = size (str);
        integer first = 0;
        integer last = size (str) - 1;
        // find first non-blank char
        while(first < bound && isBlank(substring(str, first, 1)))
        {
            first = first + 1;
        }
    
        while(last >= 0 && isBlank(substring(str, last, 1)))
        {
            last = last - 1;
        }
        if (last >= first)
        {
            return substring(str, first, last - first + 1);
        }
        return "";
    }

    
    /**
     * Asking for a existing or new file
     * @param flag new file, filter, headline
     * @return the pathname or a empty string if aborted
     */
    define string selectFile (boolean newFile,
			      string filterString,
			      string headline) ``{
	map<string,any> display = UI::GetDisplayInfo ();
	string ret = "";
	
	if (SCR::Read (.target.size, "/opt/kde3/bin/kfiledialog") > 0
	    && strip (getenv ("KDE_FULL_SESSION")) == "true"
	    && !display["TextMode"]:false)
	{
	    // using kfiledialog
	    map retmap = (map) SCR::Execute (.target.bash_output,
					     sformat ("/opt/kde3/bin/kfiledialog \"\" \"%1\"", filterString),
					     $[] );
	    y2milestone("kfiledialog :%1", retmap);
	    ret = strip(retmap["stdout"]:"");
	}
	else
	{
	    if (newFile)
	    {
		ret = UI::AskForSaveFileName( ".", filterString, headline );
	    }
	    else
	    {
		ret = UI::AskForExistingFile( ".", filterString, headline );		
	    }
	}

	return ret;
    }

    
    /**
     * Creates Country items
     * @return a list country items formated for a UI table
     */
    define list<term> getCountryList () ``{
        list<term> result = [];
	map<string, string> country_map = (map<string, string>)
	    eval(SCR::Read(.target.yast2, "country.ycp"));

	map<string, string> country_index = mapmap (string k, string v,
						  country_map, { return ($[v : k]); });

	list<string> name_list = maplist ( string k, string v,
					  country_map, { return v; });

	name_list = sort (name_list);
	    
	foreach (string name, name_list, ``{
	    result = add (result, `item (`id (country_index[name]:""), name ,
					 CaMgm::country == country_index[name]:"") );
	});
        return result;
    }
    

    /**
     * See RFC 2822, 3.4
     * But for now, no-spaces@valid_domainname
     * @param address an address to check
     * @return valid?check_mail_address
     */
    define boolean check_mail_address (string address) ``{
	list<string> parts = splitstring (address, "@");
	if (size (parts) != 2)
	{
	    return false;
	}
	string address = parts[0]:"";

	return address != "" &&
	    findfirstof (address, " ") == nil &&
	    Hostname::CheckDomain (parts[1]:"");
    }

	/**
	 * Change password Dialog
	 *
	 */
	define boolean changePassword(string CAname, string certificate)``{

		string title = _("Change Certificate Password");
		if(certificate == "")
		{
			title = _("Change CA Password");
		}
		
		// asking user
	    UI::OpenDialog (`opt(`decorated ),
						`HBox( `HSpacing(2),
							  `VBox (
									 `VSpacing (1),
									 // popup window header
									 `Heading (title),
									 `VSpacing (1),
									 `Password( `id (`oldpw), `opt(`hstretch), _("&Old Password:")),
									 `VSpacing (1),
									 `Password( `id (`newpw), `opt(`hstretch), _("&New Password:")),
									 `Password( `id (`verifynewpw), `opt(`hstretch), _("&Verify Password:")),
									 `HBox (  // push button label
											`PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
											`HStretch(),
											`PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
										   ),
									 `VSpacing (1)					  
									),
							  `HSpacing (2)
							 )
					   );
		
	    UI::SetFocus (`id(`oldpw));
	    symbol ui = nil;
	    repeat
 	    {
			ui = (symbol) UI::UserInput ();

			if (ui == `ok)
			{
				string oldPassword = (string) UI::QueryWidget(`id(`oldpw), `Value);
				string newPassword = (string) UI::QueryWidget(`id(`newpw), `Value);
				string verifyPassword = (string) UI::QueryWidget(`id(`verifynewpw), `Value);

				// checking password

				if(newPassword != verifyPassword)
				{
					Popup::Error(_("New passwords do not match."));
					ui = `again;
				}
				else if ( size(newPassword) < 4)
				{
					Popup::Error(_("The new password is too short for use as the password for the certificates.
 Enter a valid password for the certificates.
"));
					ui = `again;
				}
				else
				{
					y2milestone("Change password for '%1' '%2'", CAname, certificate);
					map<string, any> data = $[
											  "caName"      : CAname,
											  "certificate" : certificate,
											  "oldPasswd"   : oldPassword,
											  "newPasswd"   : newPassword
											 ];
					boolean ret = YaPI::CaManagement::ChangePassword(data);

					if(ret == nil)
					{
						showErrorCaManagement ();
						ui = `again;
					}
					else
					{
						if(certificate == "")
						{
							CaMgm::passwdMap[CAname] = newPassword;
							Popup::Message(_("CA Password changed."));	
						}
						else
						{
							Popup::Message(_("Certificate Password changed."));
						}
					}
				}
			}
	    }
	    until (contains ([`ok, `cancel], ui));
	    UI::CloseDialog ();
	}
    

    /**
     * Dialog for asking a CA password. Returns the password
     *   without asking if is has already input before.
     * @param CAname 
     * @return string password
     */
    define string getPassword(string CAname)``{
	string password = nil;
	
	if (!haskey(CaMgm::passwdMap, CAname))
	{
	    // asking user
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `HSpacing(2),
				   `VBox (
					  `VSpacing (1),
					  // popup window header
					  `Heading (_("Enter CA Password")),
					  `VSpacing (1),
					  `Password( `id (`entry), `opt(`hstretch), _("&Password:")),
					  `VSpacing (1),					  
					  `HBox (  // push button label
						 `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						 `HStretch(),
						 `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						 ),
					  `VSpacing (1)					  
					  ),
				   `HSpacing (2)
				   )
			    );

	    UI::SetFocus (`id(`entry));
	    symbol ui = nil;
	    repeat
 	    {
		ui = (symbol) UI::UserInput ();
		password = (string) UI::QueryWidget(`id(`entry), `Value);
		if (ui == `cancel)
		{
		    password = nil;
		}
		else
		{
		    // checking password
		    boolean ret = nil;
		    ret = (boolean) YaPI::CaManagement::UpdateDB ($["caName": CAname, "caPasswd":password]);
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
			password = nil;
            ui = (symbol) `retry;
		    }
		    else
		    {
			// saving for next call
			y2milestone("Checking password for %1 OK", CAname);
			CaMgm::passwdMap[CAname] = password;
		    }
		}
	    }
	    until (contains ([`ok, `cancel], ui));
	    UI::CloseDialog ();
	}
	else
	{
	    // already available
	    password = CaMgm::passwdMap[CAname]:"";
	}
	
	return password;
    }

    /**
     * Dialog for exporting CA/Certificate/CRL to LDAP
     *   
     * @param "CA" "CRL" "CERT" "subjectAltName"
     * @return true ( success )
     */
    define boolean exportToLDAP(string kind, string CAname, string commonName, string email, string certificate, string subjectAltName)``{

	map kindmap = $["CA":"ca", "CRL":"crl", "CERT":"certificate"];
	string password = "";
	string hostname = "";
	string port = "";
	list<string> dn = [];
	string binddn = "";
	map defaultv = nil;
	term passwordTerm = `VBox();

	y2milestone ("exportToLDAP type: %1; CAname: %2, commonName: %3, email: %4, certificate: %5, subjectAltName: %6",
		     kind,CAname,commonName,email,certificate,subjectAltName);
	
	passwordTerm = add (passwordTerm, `Password(`id (`password), `opt(`hstretch), _("LDAP P&assword:")));	
	
	if (kind == "CERT")
	{
	    if (size (subjectAltName) > 0)
	    {
		defaultv = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
									"caName":CAname,
									"commonName":commonName,
									"emailAddress":email,
									"subjectAltName":subjectAltName]);
	    }
	    else
	    {
		defaultv = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
									"caName":CAname,
									"commonName":commonName,
									"emailAddress":email]);
	    }		
	    passwordTerm = add (passwordTerm, `Password(  `id (`keyPasswd), `opt(`hstretch), _("Certificate &Password:")));
	    passwordTerm = add (passwordTerm, `HBox(
						    `Password( `id (`p12Passwd), `opt(`hstretch), _("&New Password:")),
						    `Password( `id (`verifyPassword), `opt(`hstretch), _("&Verify Password"))
						    )
				);
	}
	else
	{
	    defaultv = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
								    "caName":CAname]);
	}

	if (defaultv == nil)
	{
	    // Error: Checking if there is have already a config has been established
	    map<string,any> messageMap = YaPI::Error();
	    if (kind == "CERT")
	    {
		y2milestone("ReadLDAPExportDefaults(%1) returns %2",
			    $["type":kindmap[kind]:"",
			      "caName":CAname,
			      "commonName":commonName,
			      "emailAddress":email,
			      "subjectAltName":subjectAltName],
			    messageMap);		
	    }
	    else
	    {
		y2milestone("ReadLDAPExportDefaults(%1) returns %2",
			    $["type":kindmap[kind]:"", "caName":CAname],
			    messageMap);
	    }
			
	    if (messageMap["code"]:"" == "LDAP_CONFIG_NEEDED")
	    {
		UI::OpenDialog (`opt(`decorated ),
				`HBox( `HSpacing(2),
				       `VBox (
					      `VSpacing (1),
					      // popup window header
					      `Heading (_("LDAP Initialization")),
					      `Label(_("LDAP must initialize for the CA management.
Enter the required LDAP password.
")),
					      `VSpacing (1),
					      `Password( `id (`password), `opt(`hstretch), _("P&assword:")),
 					      `VSpacing (1),					  
					      `HBox (  // push button label
						     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						     `HStretch(),
						     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						     ),
					      `VSpacing (1)					  
					      ),
				       `HSpacing (2)
				       )
				);

		UI::SetFocus (`id(`password));
		symbol ui = nil;
		repeat
		{
		    ui = (symbol) UI::UserInput ();
		    password = (string) UI::QueryWidget(`id(`password), `Value);
		    if ( ui == `ok )
		    {
			if (YaPI::CaManagement::InitLDAPcaManagement($["ldapPasswd":password]))
			{
			    if (kind == "CERT")
			    {	
				defaultv = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
											"caName":CAname,
											"commonName":commonName,
											"emailAddress":email]);
			    }
			    else
			    {
				defaultv = YaPI::CaManagement::ReadLDAPExportDefaults ($["type":kindmap[kind]:"",
											"caName":CAname]);
			    }			    
			}
			else
			{
			    showErrorCaManagement ();			    
			}
		    }
		}
		until (contains ([`ok, `cancel], ui));
		UI::CloseDialog ();
	    }
	}

	if (defaultv == nil)
	{
	    showErrorCaManagement ();			    	    
	}	
	else
	{
	    hostname = defaultv["ldapHostname"]:"";
	    port = defaultv["ldapPort"]:"";
	    dn = defaultv["destinationDN"]:[];
	    binddn = defaultv["BindDN"]:"";
	}

	y2milestone("ReadLDAPExportDefaults() returned %1", defaultv);
	
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export to LDAP")),
				      `VSpacing (1),
				      `TextEntry( `id (`hostname), _("&Host Name:"), hostname),
				      `TextEntry( `id (`port), _("&Port:"), port),
				      `HBox (`HWeight (1, `ComboBox( `id (`dn), `opt(`editable), _("&DN:"), dn))),
				      `TextEntry( `id (`binddn), _("&Bind DN:"), binddn),
				      passwordTerm,
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`hostname));
	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    
	    password = (string) UI::QueryWidget(`id(`password), `Value);
	    hostname = (string) UI::QueryWidget(`id(`hostname), `Value);
	    port = (string) UI::QueryWidget(`id(`port), `Value);
	    string stringDN = (string) UI::QueryWidget(`id(`dn), `Value);
	    binddn = (string) UI::QueryWidget(`id(`binddn), `Value);	    
	    
	    if (ui == `cancel)
	    {
		password = nil;
	    }
	    else
	    {
		// export to LDAP
		boolean ret = nil;
		if (kind == "CA")
		{
		    ret = (boolean) YaPI::CaManagement::ExportCAToLDAP ($["caName": CAname,
								    "ldapHostname" : hostname,
								    "ldapPort" : port,
								    "destinationDN" : stringDN,
								    "BindDN" : binddn,
								    "ldapPasswd" : password
								  ]);
		}
		if (kind == "CRL")
		{
		    ret = (boolean) YaPI::CaManagement::ExportCRLToLDAP ($["caName": CAname,
								     "ldapHostname" : hostname,
								     "ldapPort" : port,
								     "destinationDN" : stringDN,
								     "BindDN" : binddn,
								     "ldapPasswd" : password
								   ]);
		}
		if (kind == "CERT")
		{
		    string keyPasswd = (string) UI::QueryWidget(`id(`keyPasswd), `Value);
		    string p12Passwd = (string) UI::QueryWidget(`id(`p12Passwd), `Value);

		    if (size (keyPasswd) > 0)
		    {
			// p12Passwd is required is keyPasswd has been given
			if (UI::QueryWidget (`id(`p12Passwd), `Value) != UI::QueryWidget (`id(`verifyPassword), `Value))
			{
			    Popup::Error(_("New passwords do not match."));
			    ui = `again;
			}
			else
			{
			    ret = (boolean) YaPI::CaManagement::ExportCertificateToLDAP ($["caName": CAname,
                                               "caPasswd" : getPassword (CAname),
											   "certificate" : certificate,
											   "ldapHostname" : hostname,
											   "ldapPort" : port,
											   "destinationDN" : stringDN,
											   "BindDN" : binddn,
											   "ldapPasswd" : password,
											   "keyPasswd" : keyPasswd,
											   "p12Passwd" : p12Passwd
											 ]);
			}
		    }
		    else
		    {
			ret = (boolean) YaPI::CaManagement::ExportCertificateToLDAP ($["caName": CAname,
										       "certificate" : certificate,
										       "ldapHostname" : hostname,
										       "ldapPort" : port,
										       "destinationDN" : stringDN,
										       "BindDN" : binddn,
										       "ldapPasswd" : password
										     ]);
		    }
		}
		if (ui == `ok)
		{
		    // Checking error
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
			ret = false;
		    }
		    else
		    {
			Popup::Message(_("Saved to LDAP successfully."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }


    /**
     * Dialog for exporting CA to file
     * @param CAname
     * @return true ( success )
     */
    define void exportCAtoFile (string CAname) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export CA to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM_CERT), `opt(`notify),
											  _("O&nly the Certificate in PEM Format"), true)),
								       `Left(`RadioButton(`id(`PEM_CERT_KEY), `opt(`notify),
											  _("Ce&rtificate and the Key Unencrypted in PEM Format"))),
								       `Left(`RadioButton(`id(`PEM_CERT_ENCKEY), `opt(`notify),
											  _("C&ertificate and the Key Encrypted in PEM Format"))),
								       `Left(`RadioButton(`id(`DER_CERT), `opt(`notify),
											  _("&Certificate in DER Format"))),
								       `Left(`RadioButton(`id(`PKCS12), `opt(`notify),
											  _("Cer&tificate and the Key in PKCS12 Format"))),
								       `Left(`RadioButton(`id(`PKCS12_CHAIN), `opt(`notify),
											  _("&Like PKCS12 and Include the CA Chain")))
								       )
								 )
					       ),
				      `HBox(
					    `Password( `id (`PK12password), `opt(`hstretch), _("&New Password")),
					    `Password( `id (`verifyPassword), `opt(`hstretch), _("&Verify Password"))
					    ),				      
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&File Name:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	UI::ChangeWidget (`id (`PK12password), `Enabled, false);
	UI::ChangeWidget (`id (`verifyPassword), `Enabled, false);		
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM_CERT:"PEM_CERT",
					   `PEM_CERT_KEY:"PEM_CERT_KEY",
					   `PEM_CERT_ENCKEY:"PEM_CERT_ENCKEY",
					   `DER_CERT:"DER_CERT",
					   `PKCS12:"PKCS12",
					   `PKCS12_CHAIN:"PKCS12_CHAIN"];
	    
            string kind = kindmap[(symbol) UI::QueryWidget(`id(`rb),
							   `CurrentButton)]:"";

	    map<symbol,string> filtermap = $[`PEM_CERT:"*.pem *.crt *",
					     `PEM_CERT_KEY:"*.pem *.crt *",
					     `PEM_CERT_ENCKEY:"*.pem *.crt *",
					     `DER_CERT:"*.der *.crt *",
					     `PKCS12:"*.p12 *.crt *",
					     `PKCS12_CHAIN:"*.p12 *.crt *"];
	    
	    string filterString	= filtermap[(symbol) UI::QueryWidget(`id(`rb),
								     `CurrentButton)]:"*";    

	    if (kind == "PKCS12"
		|| kind == "PKCS12_CHAIN")
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, true);
		UI::ChangeWidget (`id (`verifyPassword), `Enabled, true);				
	    }
	    else
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, false);
		UI::ChangeWidget (`id (`verifyPassword), `Enabled, false);				
	    }

	    if (ui == `browse)
	    {
		string name = selectFile (true, filterString, "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file
		if ( ( kind == "PKCS12"
		       || kind == "PKCS12_CHAIN")
		     &&
		     UI::QueryWidget (`id(`PK12password), `Value) != UI::QueryWidget (`id(`verifyPassword), `Value))
		{
		    Popup::Error(_("New passwords do not match."));
		    ui = `again;
		}
		
		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("File name required."));
		    ui = `again;
		}

		if (ui == `ok)
		{
		    string ret = nil;
		    if (kind == "PKCS12"
			|| kind == "PKCS12_CHAIN")
		    {
			ret = (string) YaPI::CaManagement::ExportCA ($["caName": CAname,
									"caPasswd" : getPassword (CAname),
									"exportFormat" : kind,
									"destinationFile" : filename,
									"P12Password" : UI::QueryWidget (`id(`PK12password), `Value)
								       ]);
		    }
		    else
		    {
			ret = (string) YaPI::CaManagement::ExportCA ($["caName": CAname,
									"caPasswd" : getPassword (CAname),
									"exportFormat" : kind,
									"destinationFile" : filename
								       ]);
		    }
		    y2milestone ("ExportCA(%1) return %2", $["caName": CAname,
							     "exportFormat" : kind,
							     "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;			
		    }
		    else
		    {
			Popup::Message(_("CA saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }        

    /**
     * Dialog for exporting CRL to file
     * @param CAname
     * @return true ( success )
     */
    define void exportCRLtoFile (string CAname) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export CRL to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM), `opt(`notify),
											  _("&PEM Format"), true)),
								       `Left(`RadioButton(`id(`DER), `opt(`notify),
											  _("&DER Format")))
								       )
								 )
					       ),
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&File Name:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM:"PEM",
					   `DER:"DER" ];

	    map<symbol,string> filtermap = $[`PEM:"*.pem *.crt *",
					     `DER:"*.der *.crt *"];
	    
	    string filterString	= filtermap[(symbol) UI::QueryWidget(`id(`rb),
								     `CurrentButton)]:"*";    	    
	    
            string kind = kindmap[(symbol) UI::QueryWidget(`id(`rb),
							   `CurrentButton)]:"";

	    if (ui == `browse)
	    {
		string name = selectFile (true, filterString, "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file

		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("File name required."));
		    ui = `again;
		}
		else
		{
		    string ret = nil;
		    ret = (string) YaPI::CaManagement::ExportCRL ($["caName": CAname,
                                   "caPasswd" : getPassword (CAname),
								   "exportFormat" : kind,
								   "destinationFile" : filename
								 ]);
		    
		    y2milestone ("ExportCRL(%1) return %2", $["caName": CAname,
							     "exportFormat" : kind,
							     "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;			
		    }
		    else
		    {
			Popup::Message(_("CRL saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }

    /**
     * Dialog for exporting Certificate to file
     * @param CAname, certificate
     * @return true ( success )
     */
    define void exportCertificateToFile (string CAname, string certificate) ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export Certificate to File")),
				      `VSpacing (1),
				      `Frame ( _("Export Format"),
					       `RadioButtonGroup(`id(`rb), 
								 `VBox(
								       `Left(`RadioButton(`id(`PEM_CERT), `opt(`notify),
											  _("&Only the Certificate in PEM Format"), true)),
								       `Left(`RadioButton(`id(`PEM_CERT_KEY), `opt(`notify),
											  _("Ce&rtificate and the Key Unencrypted in PEM Format"))),
								       `Left(`RadioButton(`id(`PEM_CERT_ENCKEY), `opt(`notify),
											  _("C&ertificate and the Key Encrypted in PEM Format"))),
								       `Left(`RadioButton(`id(`DER_CERT), `opt(`notify),
											  _("&Certificate in DER Format"))),
								       `Left(`RadioButton(`id(`PKCS12), `opt(`notify),
											  _("Cer&tificate and the Key in PKCS12 Format"))),
								       `Left(`RadioButton(`id(`PKCS12_CHAIN), `opt(`notify),
											  _("&Like PKCS12 and Include the CA Chain")))
								       )
								 )
					       ),
				      `Password( `id (`keyPassword), `opt(`hstretch), _("Certificate &Password:")),
				      `HBox(
					    `Password( `id (`PK12password), `opt(`hstretch), _("&New Password")),
					    `Password( `id (`verifyPassword), `opt(`hstretch), _("&Verify Password"))
					    ),
				      `HBox ( 
					     `HWeight(1, `TextEntry( `id (`filename), _("&File Name:"))),
					     `VBox(
						   `Label(""),
						   `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
						   )
					     ),				      
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	UI::ChangeWidget (`id (`PK12password), `Enabled, false);
	UI::ChangeWidget (`id (`verifyPassword), `Enabled, false);		
	repeat
 	{
	    ui = (symbol) UI::UserInput ();

	    map<symbol,string> kindmap = $[`PEM_CERT:"PEM_CERT",
					   `PEM_CERT_KEY:"PEM_CERT_KEY",
					   `PEM_CERT_ENCKEY:"PEM_CERT_ENCKEY",
					   `DER_CERT:"DER_CERT",
					   `PKCS12:"PKCS12",
					   `PKCS12_CHAIN:"PKCS12_CHAIN"];
	    
            string kind =  kindmap[(symbol) UI::QueryWidget(`id(`rb),
						   `CurrentButton)]:"";

	    map<symbol,string> filtermap = $[`PEM_CERT:"*.pem *.crt *",
					     `PEM_CERT_KEY:"*.pem *.crt *",
					     `PEM_CERT_ENCKEY:"*.pem *.crt *",
					     `DER_CERT:"*.der *.crt *",
					     `PKCS12:"*.p12 *.crt *",
					     `PKCS12_CHAIN:"*.p12 *.crt *"];
	    
	    string filterString	= filtermap[(symbol) UI::QueryWidget(`id(`rb),
								     `CurrentButton)]:"*";    
	    

	    if (kind == "PKCS12"
		|| kind == "PKCS12_CHAIN")
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, true);
		UI::ChangeWidget (`id (`verifyPassword), `Enabled, true);		
	    }
	    else
	    {
		UI::ChangeWidget (`id (`PK12password), `Enabled, false);
		UI::ChangeWidget (`id (`verifyPassword), `Enabled, false);		
	    }

	    if (ui == `browse)
	    {
		string name = selectFile (true, filterString, "Export to ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
	    }
		
	    if (ui == `ok)
	    {
		// export to file

		if ( ( kind == "PKCS12"
		       || kind == "PKCS12_CHAIN")
		     &&
		     UI::QueryWidget (`id(`PK12password), `Value) != UI::QueryWidget (`id(`verifyPassword), `Value))
		{
		    Popup::Error(_("New passwords do not match."));
		    ui = `again;
		}

		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("File name required."));
		    ui = `again;
		}

		if (ui == `ok)
		{
		    string ret = nil;
		    if (kind == "PKCS12"
			|| kind == "PKCS12_CHAIN")
		    {
			ret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
                                                                                "caPasswd" : getPassword (CAname),
										"certificate" : certificate,
										"keyPasswd" : UI::QueryWidget (`id(`keyPassword), `Value),
										"exportFormat" : kind,
										"destinationFile" : filename,
										"P12Password" : UI::QueryWidget (`id(`PK12password), `Value)
									      ]);
		    }
		    else
		    {
			ret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
                                                                                "caPasswd" : getPassword (CAname),
										"certificate" : certificate,
										"keyPasswd" : UI::QueryWidget (`id(`keyPassword), `Value),
										"exportFormat" : kind,
										"destinationFile" : filename
									      ]);
		    }
		    y2milestone ("ExportCertificate(%1) return %2", $["caName": CAname,
								      "certificate" : certificate,
								      "exportFormat" : kind,
								      "destinationFile" : filename
				 ], ret);
		    if (ret == nil
			|| ret != "1")
		    {
			showErrorCaManagement ();
			ui = `again;
		    }
		    else
		    {
			Popup::Message(_("Certificate saved to file."));
		    }
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }


    /**
     * importCertificateFromDisk() - Importing certificate from disk
     * @return success
     */
    define boolean importCertificateFromDisk () ``{
	string password = "";
	boolean success = false;

	term contents =  `VBox (
				`VSpacing (1),
				`HBox ( 
				       `HWeight(1, `TextEntry( `id (`filename), _("&File Name:"))),
				       `VBox(
					     `Label(""),
					     `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
					     )
				       ),				      
				`VSpacing (1),
				`Password( `id (`password), `opt(`hstretch), _("&Password:")),
				`VSpacing (1)
				);

	// help text 1/3
	string help_text = _("<p><b><big>Importing Common Server Certificate (PKCS12 + CA Chain Format)
 from Disk:</big></b> Select one file name and press <b>Next</b> to continue.</p>
");
        // help text 2/3
	help_text = help_text +
	    _("Import a server certificate and correspondenting CA and copy them to a place where other YaST modules look for such a common certificate.");
	
	// help text 3/3
	help_text = help_text + _("<p><b>Password:</b><br>
Certificate password</p>
");	
	
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	Wizard::SetContents( _("Importing Common Certificate from Disk"), contents,
			     help_text,
			     true, true);

	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();

	any ret = `again;
	while (ret == `again)
	{
	    success = false;
	    ret = UI::UserInput ();
	    
	    if (ret == `browse)
	    {
		string name = selectFile (false, "*.p12", "Import from ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
		ret = `again;		
	    }
	    
	    if (ret == `next)
	    {
		// reading certificate from disk
		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("File name required."));
		    ret = `again;
		}
		else
		{
		    password = (string) UI::QueryWidget (`id(`password), `Value);
	    
		    UI::BusyCursor();
		    UI::OpenDialog(`VBox(`Label(_("Importing certificate..."))));
		    
		    boolean yapiret = (boolean) YaPI::CaManagement::ImportCommonServerCertificate ($["passwd" : password,
												     "inFile" : filename]);
		    y2milestone ("ImportCommonServerCertificate(%1) return %2",
				 filename, 
				 yapiret);
		    if (yapiret == nil
			|| !yapiret)
		    {
			showErrorCaManagement ();
			ret = `again;
		    }
		    else
		    {
			Popup::Message(_("Certificate has been imported."));
			success = true;
		    }		    
		    UI::CloseDialog ();		    
		}
	    }
	}

        Wizard::CloseDialog();
	return success;
    }


    /**
     * exportCommonServerCertificate() - Exporting common server certificate to the local
     *                                   machine
     * @param CA Name, certificate, common name of the certificate
     * @return success
     */
    define boolean exportCommonServerCertificate (string CAname, string certificate, string commonName) ``{
	
	boolean success = false;
	boolean check = YaPI::CaManagement::Verify ($["caName": CAname,
                      "caPasswd":getPassword(CAname),
					  "certificate" : certificate,
					  "disableCRLcheck" : "1", 
					  "purpose" : "sslserver"
						    ]);
	// Checking, if the certificate is a server certificate
	if ( check == nil
	     || !check)
	{
	    if (!Popup::ContinueCancelHeadline (
					       // To translators: ContinueCancel Popup headline
					       _("Common Server Certificate"),
					       // To translators: ContinueCancel Popup
					       _("This is not a server certificate. Continue?")))
	    {
		return true;
	    }
	}
	
	// evaluate if the common name of the server certificate is the hostname
	map retmap = (map) SCR::Execute (.target.bash_output,
					"/bin/hostname --long",
					$[] );
	y2milestone("Hostname :%1", retmap);
	if (commonName != strip(retmap["stdout"]:""))
	{
            // check if hostname is in Subject Alt Name
            map ret = (map) YaPI::CaManagement::ReadCertificate ($["caName":CAname,
                                                                   "caPasswd":getPassword(CAname),
                                                                   "certificate":certificate,
                                                                   "type":"parsed"]);
            map<string,list> opensslExtentions = ret["OPENSSL_EXTENSIONS"]:$[];
            boolean found = false;
            foreach (string entry, (list<string>) opensslExtentions["X509v3 Subject Alternative Name"]:[], ``{
                if (issubstring(entry, strip(retmap["stdout"]:""))) {
                    y2milestone("Found hostname(%1) in Subject Alternative Name (%2)", strip(retmap["stdout"]:""), entry)
                    found = true;
                }
            });
            if (!found) {
	        string errorString = sformat ( _("The common name of the certificate (%1) is not the name of 
the server (%2).
This certificate might be not practical as a common server certificate.
"),
					   commonName,
					   strip(retmap["stdout"]:""));
	        Popup::Warning (errorString);
            }
	}
					   
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Exporting as Common Server Certificate")),
				      `VSpacing (1),
				      `Password( `id (`keyPassword), `opt(`hstretch), _("Certificate &Password:")),
				      `VSpacing (1),
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    string password = (string) UI::QueryWidget (`id(`keyPassword), `Value);
	    if (ui == `ok)
	    {
		// export to common certificate
		UI::BusyCursor();
		UI::OpenDialog(`VBox(`Label(_("Exporting certificate..."))));
		string filename = (string) SCR::Read (.target.tmpdir) + "/commonCertificate";
		    
		string ret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
																	   "caPasswd" : getPassword (CAname),
																	   "certificate" : certificate,
																	   "keyPasswd" : password,
																	   "exportFormat" : "PKCS12_CHAIN",
																	   "destinationFile" : filename,
																	   "P12Password" : password
																	  ]);

		y2milestone ("ExportCertificate(%1) return %2", $["caName": CAname,
														  "certificate" : certificate,
														  "exportFormat" : "PKCS12_CHAIN",
														  "destinationFile" : filename
														 ], ret);
		if (ret == nil
		    || ret != "1")
		{
		    showErrorCaManagement ();
		    ui = `again;
		}
		else
		{
		    boolean yapiret = (boolean) YaPI::CaManagement::ImportCommonServerCertificate ($["passwd" : password,
												     "inFile" : filename]);
		    y2milestone ("ImportCommonServerCertificate(%1) return %2",
				 filename, 
				 yapiret);
		    if (yapiret == nil
			|| !yapiret)
		    {
			showErrorCaManagement ();
			ui = `again;
		    }
		    else
		    {
			Popup::Message(_("Certificate has been written as common server certificate."));
			success = true;
		    }		    
		}
		UI::CloseDialog ();		    
	    }
	} 
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();		    	
	
	return success;
    }


    /**
     * importRequestFromDisk() - Importing request from disk
     * @param  CaName
     * @return success
     */
    define boolean importRequestFromDisk (string CaName) ``{
	boolean success = false;

	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      `Heading (_("Import Request from Disk")),
				      `VSpacing (1),
				      `HBox ( 
					     `HWeight(2, `TextEntry( `id (`filename), _("&File Name:"))),
					     `HWeight(1,`VBox(
							      `Label(""),
							      `PushButton (`id(`browse), `opt( `notify), Label::BrowseButton())
							      )
						      )
					     ),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),				      
				      `VSpacing (1)
				      )
				)
			);




	any ret = `again;
	while (ret == `again)
	{
	    success = false;
	    ret = UI::UserInput ();
	    
	    if (ret == `browse)
	    {
		string name = selectFile ( false, "*.pem *.req *.csr *.der", "Import from ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`filename), `Value, name);
		}
		ret = `again;		
	    }
	    
	    if (ret == `ok)
	    {
		// reading certificate from disk
		string filename = (string) UI::QueryWidget(`id(`filename), `Value);
		if (size (filename) == 0)
		{
		    Popup::Error(_("File name required."));
		    ret = `again;
		}
		else
		{
		    string extention = "";
		    if (substring (filename, findlastof (filename, ".")) == ".pem" ||
                        substring (filename, findlastof (filename, ".")) == ".req" ||
                        substring (filename, findlastof (filename, ".")) == ".csr" )
		    {
			extention = "PEM";
		    }
		    if (substring (filename, findlastof (filename, ".")) == ".der" )
		    {
			extention = "DER";
		    }

		    if (extention == "")
		    {
			Popup::Error(_("File format not valid. Use PEM or DER files."));
			ret = `again;
		    }
		    else
		    {
			UI::BusyCursor();
			UI::OpenDialog(`VBox(`Label(_("Importing request..."))));
		    
			string yapiret = (string) YaPI::CaManagement::ImportRequest ($["caName" : CaName,
                                            "caPasswd":getPassword(CaName),
											"inFile" : filename,
											"importFormat" : extention]);
			y2milestone ("ImportRequest(%1) return %2",
				     filename, 
				     yapiret);
 			if (yapiret == nil)
			{
			    showErrorCaManagement ();
			    ret = `again;
			}
			else
 			{
			    Popup::Message(_("Request has been imported."));
			    success = true;
			}		    
			UI::CloseDialog ();
		    }
		}
	    }
	}
	UI::CloseDialog ();	
	return success;
    }


    /**
     * importCAFromDisk() - Importing CA from disk
     * @return success
     */
    define boolean importCAFromDisk () ``{
	boolean success = false;

	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      `Heading (_("Import CA from Disk")),
				      `TextEntry( `id (`caName), _("&CA Name:")),
				      `HBox ( 
					     `HWeight(2, `TextEntry( `id (`pathCert), _("&Path of CA Certificate"))),
					     `HWeight(1,`VBox(
							      `Label(""),
							      `PushButton (`id(`browseCert), `opt( `notify), Label::BrowseButton())
							      )
						      )
					     ),
				      `HBox ( 
					     `HWeight(2, `TextEntry( `id (`pathKey), _("&Path of Key"))),
					     `HWeight(1,`VBox(
							      `Label(""),
							      `PushButton (`id(`browseKey), `opt( `notify), Label::BrowseButton())
							      )
						      )
					     ),			       
				      `Password( `id (`passKey), `opt(`hstretch),_("&Key Password")),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),				      
				      `VSpacing (1)
				      )
			       )
			);




	any ret = `again;
	while (ret == `again)
	{
	    success = false;
	    ret = UI::UserInput ();
	    
	    if (ret == `browseCert)
	    {
		string name = selectFile (false, "*.pem *.crt", "Import from ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`pathCert), `Value, name);
		}
		ret = `again;		
	    }
	    
	    if (ret == `browseKey)
	    {
 		string name = selectFile (false, "*.pem *.key", "Import from ..." );
		if ( name != nil )
		{
		    UI::ChangeWidget(`id(`pathKey), `Value, name);
		}
		ret = `again;		
	    }	    
	    
	    if (ret == `ok)
	    {
		// reading CA from disk
		
		string caCertificate = (string) UI::QueryWidget(`id(`pathCert), `Value);
		string caKey = (string) UI::QueryWidget(`id(`pathKey), `Value);
		string caPasswd = (string) UI::QueryWidget(`id(`passKey), `Value);
		string caName = (string) UI::QueryWidget(`id(`caName), `Value);
		if (size (caCertificate) == 0)
		{
			// Error popup
		    Popup::Error(_("Path to certificate file required."));
		    ret = `again;
		} else if (size (caKey) == 0)
		{
			// Error popup
		    Popup::Error(_("Path of the private key required."));
		    ret = `again;
		}
		else if (size (caPasswd) == 0)
		{
			// Error popup
			Popup::Error(_("Key Password is required. \nIt must be the password for the encrypted key or a new one in case of a not encrypted key."));
			ret = `again;
		}
		else if (size (caName) == 0)
		{
			// Error popup
		    Popup::Error(_("CA name required."));
		    ret = `again;
		}
		
		if (ret == `ok)
		{
		    UI::BusyCursor();
		    UI::OpenDialog(`VBox(`Label(_("Importing request..."))));
		    
		    boolean yapiret = (boolean) YaPI::CaManagement::ImportCA ($["caName" : caName,
																		"caCertificate" : caCertificate,
																		"caKey" : caKey,
																		"caPasswd" : caPasswd
																	   ]);
		    y2milestone ("ImportRequest(%1,%2,%3, <passwd>) return %4",
				 caName,
				 caCertificate,
				 caKey,
				 yapiret);
		    if (yapiret == nil)
		    {
				showErrorCaManagement ();
				ret = `again;
		    }
		    else
		    {
				// Error popup
				Popup::Message(_("CA has been imported."));
				success = true;
		    }
		    UI::CloseDialog ();
		}
	    }
	}
	UI::CloseDialog ();	
	return success;
    }


	define map<string,string> getHostIPs () ``{

		map<string,string> ret = $[];
		
		list <string> ip_addresses = splitstring(
			 ((map<string, any>)SCR::Execute(.target.bash_output, "ip -f inet -o addr show scope global | awk '{print $4}' | awk -F \/ '{print $1}' | tr '\n' ','"))["stdout"]:"", ",") ;

		list <string> ip6_addresses = splitstring(
			 ((map<string, any>)SCR::Execute(.target.bash_output, "ip -f inet6 -o addr show scope global | awk '{print $4}' | awk -F \/ '{print $1}' | tr '\n' ','"))["stdout"]:"", ",") ;

		foreach(string ip6, ip6_addresses, {
												if(ip6 != "::1" && ip6 != "")
												{
													ip_addresses = add( ip_addresses, ip6);
												}
											});
		foreach(string ip, ip_addresses, {
			  // skip localhost addresses
		      if(ip != "127.0.0.1" && ip != "127.0.0.2" && ip != "")
			  {
				  // add the IP address
				  ret[ip] = "IP";
				  
				  // first ask the DNS server about the name for this IP address
				  list<string> hostnames = splitstring(
													   ((map<string,any>)SCR::Execute(.target.bash_output, sformat("dig +noall +answer +time=2 +tries=1 -x %1 | awk '{print $5}' | sed 's/\\.$//'| tr '\n' '|'", ip)))["stdout"]:"", "|");
				  
				  boolean found = false;
				  foreach(string hname, hostnames, {
														if(hname != "" && findfirstof(hname, ".") != nil)
														{
															// add the names
															found = true;
															ret[hname] = "DNS";
														}
													});
				  // If not found, ask the hosts file about the IP address
				  if(!found)
				  {
					  list<string> hostnames = splitstring(
														   ((map<string,any>)SCR::Execute(.target.bash_output, sformat("getent hosts %1 | awk '{print $2}' | sed 's/\\.$//'| tr '\n' '|'", ip)))["stdout"]:"", "|");
				  
					  foreach(string hname, hostnames, {
															if(hname != "" && findfirstof(hname, ".") != nil)
															{
																// add the names
																ret[hname] = "DNS";
															}
														});
				  }
			  }
	    });
		y2milestone("getHostIPs return: %1", ret);
		return ret;					  
	}
    
// EOF
}

