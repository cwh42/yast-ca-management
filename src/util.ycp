/**
 * File:        include/ca-management/util.ycp
 * Package:     Configuration of CAs
 * Summary:     Util definitions
 * Authors:     Stefan Schubert
 *
 * $Id$
 */

{

    textdomain "ca-management";

    import "Label";
    import "Hostname";

    /**
     * See RFC 2822, 3.4
     * But for now, no-spaces@valid_domainname
     * @param address an address to check
     * @return valid?check_mail_address
     */
    define boolean check_mail_address (string address) ``{
	list<string> parts = splitstring (address, "@");
	if (size (parts) != 2)
	{
	    return false;
	}
	string address = parts[0]:"";

	return address != "" &&
	    findfirstof (address, " ") == nil &&
	    Hostname::CheckDomain (parts[1]:"");
    }

    /**
      * returns true if char is blank (newline, tab or space)
      * @param s single char string
      * @return boolean blank/non blank
      */
    define boolean isBlank(string s) ``{
        if (s == "\n" || s == "\t" || s == " ")
        {
            return true;
        }
        return false;
    }
    
    /**
     * removes trailing and leading blank chars from string.
     *   eg: "  as df  " -> "as df"
     * @param str string source string
     * @return string stripped string
     */
    define string strip(string str)``{
        //emtpy  string
        if (size (str) == 0) return "";

        integer bound = size (str);
        integer first = 0;
        integer last = size (str) - 1;
        // find first non-blank char
        while(first < bound && isBlank(substring(str, first, 1)))
        {
            first = first + 1;
        }
    
        while(last >= 0 && isBlank(substring(str, last, 1)))
        {
            last = last - 1;
        }
        if (last >= first)
        {
            return substring(str, first, last - first + 1);
        }
        return "";
    }

    /**
     * Dialog for asking a CA password. Returns the password
     *   without asking if is has already input before.
     * @param CAname 
     * @return string password
     */
    define string getPassword(string CAname)``{
	string password = nil;
	
	if (!haskey(CaMgm::passwdMap, CAname))
	{
	    // asking user
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `HSpacing(2),
				   `VBox (
					  `VSpacing (1),
					  // popup window header
					  `Heading (_("Enter CA Password")),
					  `VSpacing (1),
					  `Password( `id (`entry), _("&Password:")),
					  `VSpacing (1),					  
					  `HBox (  // push button label
						 `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						 `HStretch(),
						 `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						 ),
					  `VSpacing (1)					  
					  ),
				   `HSpacing (2)
				   )
			    );

	    UI::SetFocus (`id(`entry));
	    symbol ui = nil;
	    repeat
 	    {
		ui = (symbol) UI::UserInput ();
		password = (string) UI::QueryWidget(`id(`entry), `Value);
		if (ui == `cancel)
		{
		    password = nil;
		}
		else
		{
		    // checking password
		    boolean ret = nil;
		    ret = (boolean) CaManagement::UpdateDB ($["caName": CAname, "caPasswd":password]);
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
			password = nil;
		    }
		    else
		    {
			// saving for next call
			y2milestone("Checking password for %1 OK", CAname);
			CaMgm::passwdMap[CAname] = password;
		    }
		}
	    }
	    until (contains ([`ok, `cancel], ui));
	    UI::CloseDialog ();
	}
	else
	{
	    // already available
	    password = CaMgm::passwdMap[CAname]:"";
	}
	
	return password;
    }

    /**
     * Dialog for exporting CA/Certificate/CRL to LDAP
     *   
     * @param "CA" "CRL" "CERT"
     * @return true ( success )
     */
    define boolean exportToLDAP(string kind)``{

	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Export To LDAP")),
				      `VSpacing (1),
				      `TextEntry( `id (`hostname), _("&Hostname:")),
				      `TextEntry( `id (`port), _("&Port:")),
				      `TextEntry( `id (`dn), _("&DN:")),
				      `TextEntry( `id (`binddn), _("&Bind DN:")),
				      `Password(  `id (`password), _("P&assword:")),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`hostname));
	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    
	    string password = (string) UI::QueryWidget(`id(`password), `Value);
	    string hostname = (string) UI::QueryWidget(`id(`hostname), `Value);
	    string port = (string) UI::QueryWidget(`id(`port), `Value);
	    string dn = (string) UI::QueryWidget(`id(`dn), `Value);
	    string binddn = (string) UI::QueryWidget(`id(`binddn), `Value);	    
	    
	    if (ui == `cancel)
	    {
		password = nil;
	    }
	    else
	    {
		// export to LDAP
		boolean ret = nil;
		if (kind == "CA")
		{
//		    ret = (boolean) CaManagement::ExportCAToLDAP ($["caName": CaMgm::currentCA,
//								    "ldapHostname" : hostname,
//								    "ldapPort" : port,
//								    "destinationDN" : dn,
//								    "BindDN" : binddn,
//								    "password" : password
//								  ]);
		    ret = true; // FIXME		    
		}
		if (kind == "CRL")
		{
//		    ret = (boolean) CaManagement::ExportCRLToLDAP ($["caName": CaMgm::currentCA,
//								     "ldapHostname" : hostname,
//								     "ldapPort" : port,
//								     "destinationDN" : dn,
//								     "BindDN" : binddn,
//								     "password" : password
//								   ]);
		    ret = true; // FIXME
		}
		if (kind == "CERT")
		{
//		    ret = (boolean) CaManagement::ExportCertificateToLDAP ($["caName": CaMgm::currentCA,
//									     "certificate" : 
//									     "ldapHostname" : hostname,
//									     "ldapPort" : port,
//									     "destinationDN" : dn,
//									     "BindDN" : binddn,
//									     "password" : password
//									   ]);
		    ret = true; // FIXME		    
		}				
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		    ret = false;
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }
    
}
