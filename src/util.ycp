/**
 * File:        include/ca-management/util.ycp
 * Package:     Configuration of CAs
 * Summary:     Util definitions
 * Authors:     Stefan Schubert
 *
 * $Id$
 */

{

    textdomain "ca-management";

    import "Label";
    import "Hostname";

    /**
     * See RFC 2822, 3.4
     * But for now, no-spaces@valid_domainname
     * @param address an address to check
     * @return valid?check_mail_address
     */
    define boolean check_mail_address (string address) ``{
	list<string> parts = splitstring (address, "@");
	if (size (parts) != 2)
	{
	    return false;
	}
	string address = parts[0]:"";

	return address != "" &&
	    findfirstof (address, " ") == nil &&
	    Hostname::CheckDomain (parts[1]:"");
    }

    /**
      * returns true if char is blank (newline, tab or space)
      * @param s single char string
      * @return boolean blank/non blank
      */
    define boolean isBlank(string s) ``{
        if (s == "\n" || s == "\t" || s == " ")
        {
            return true;
        }
        return false;
    }
    
    /**
     * removes trailing and leading blank chars from string.
     *   eg: "  as df  " -> "as df"
     * @param str string source string
     * @return string stripped string
     */
    define string strip(string str)``{
        //emtpy  string
        if (size (str) == 0) return "";

        integer bound = size (str);
        integer first = 0;
        integer last = size (str) - 1;
        // find first non-blank char
        while(first < bound && isBlank(substring(str, first, 1)))
        {
            first = first + 1;
        }
    
        while(last >= 0 && isBlank(substring(str, last, 1)))
        {
            last = last - 1;
        }
        if (last >= first)
        {
            return substring(str, first, last - first + 1);
        }
        return "";
    }

    /**
     * Dialog for asking a CA password. Returns the password
     *   without asking if is has already input before.
     * @param CAname 
     * @return string password
     */
    define string getPassword(string CAname)``{
	string password = CaMgm::passwdMap[CAname]:"";
	if (password == "")
	{
	    // asking user
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `HSpacing(2),
				   `VBox (
					  `VSpacing (1),
					  // popup window header
					  `Heading (_("Enter CA Password")),
					  `VSpacing (1),
					  `Password( `id (`entry), _("&Password:"), password ),
					  `VSpacing (1),					  
					  `HBox (  // push button label
						 `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
						 `HStretch(),
						 `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
						 ),
					  `VSpacing (1)					  
					  ),
				   `HSpacing (2)
				   )
			    );

	    UI::SetFocus (`id(`entry));
	    symbol ui = nil;
	    repeat
 	    {
		ui = (symbol) UI::UserInput ();
		password = (string) UI::QueryWidget(`id(`entry), `Value);
		if (ui == `cancel)
		{
		    password = nil;
		}
		else
		{
		    // checking password
		    boolean ret = nil;
		    ret = (boolean) CaManagement::UpdateDB ($["caName": CAname, "caPasswd":password]);
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
			password = nil;
		    }
		    else
		    {
			// saving for next call
			y2milestone("Checking password for %1 OK", CAname);
			CaMgm::passwdMap[CAname] = password;
		    }
		}
	    }
	    until (contains ([`ok, `cancel], ui));
	    UI::CloseDialog ();
	}
	
	return password;
    }
}
