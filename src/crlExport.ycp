/**
 *
 * File:
 *   crlExport.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Export a CRL to a local file or an LDAP directory.
 *   Possibility to setup a cron job to do this automatically.
 *
 * Authors:
 *   J. Daniel Schmidt <jdsn@suse.de>
 *
 * $Id: crlExport.ycp 1 2007-11-20 12:15:18Z jdsn $
 *
 * Export a CRL for a selected CA
 *
 */


{

textdomain "ca-management";

import "CaMgm";
import "Wizard";
import "Label";
import "Popup";
import "YaPI::CaManagement";
include "ca-management/util.ycp";
include "ca-management/new_cert_callbacks.ycp";

map uiInfo = UI::GetDisplayInfo();
boolean textmode = (boolean) uiInfo["TextMode"]:nil;

float hspace = textmode ? 4 : 3;
float vspace = textmode ? 0 : 0.5;  // less spacing (bnc#446137)
boolean seenSecurityInfo = false;

// here are our settings for the CRL of this CA
boolean periodic = false;        // default off
boolean file_active = true;      // default on
boolean ldap_active = false;     // default off
symbol  fileformat = `ffpem;     // default is pem
string  crlfile = "";            // is set from inside the export function
integer intervalAtHour = 0;
integer intervalHours  = 0;
map<string,string>  ldapCred = $[ "hostname":"",  "port":"",  "dn":"",
                                  "binddn":"",    "password":""       ];


map crlConfFormat = $[  "options" : [ "line_can_continue", "global_values", "join_multiline", "comments_last", "flat" ],
                        "comments": [ "^[ \t]*#.*$", "^[ \t]*$" ],
                        "params" :  [ $[ "match" :     [ "([a-zA-Z0-9_-]+)[ \t]*=[ \t]*([^ \t]*)", "%s = %s" ] ] ]
                     ];


define void showSecurityInfo()
{
    Popup::LongText(
                   // Translators: window caption 
                   _("Security Information"),
                   // Translators: long help text - security information
                   `RichText(_("Warning!<br>Activating the automatic creation and export of a CRL will write the CA password to a configuration file on disk. The password will be stored there in plain text as it is needed to create a CRL. The file will only be readable for the root user.")),
                   50, 12
            );
    seenSecurityInfo = true;
}


define void updateEnabled()
{
    periodic = (boolean) UI::QueryWidget(`id(`mode_periodically), `Value);
    file_active = (boolean) UI::QueryWidget(`id(`exportFile), `Value);
    ldap_active = (boolean) UI::QueryWidget(`id(`exportLDAP), `Value);
    UI::ChangeWidget(`id(`periodicInterval), `Enabled, periodic);
    UI::ChangeWidget(`id(`fileSettings), `Enabled, file_active);
    UI::ChangeWidget(`id(`ldapSettings), `Enabled, ldap_active);
    if (periodic && !seenSecurityInfo) { showSecurityInfo(); }
}



define void setSettings()
{
    // write settings to the UI
    UI::ChangeWidget(`id(`mode_periodically), `Value, periodic);
    UI::ChangeWidget(`id(`periodicInterval),  `Enabled, periodic);
    UI::ChangeWidget(`id(`interval_athour),   `Value,  intervalAtHour);
    UI::ChangeWidget(`id(`interval_hours),    `Value,  intervalHours);
    UI::ChangeWidget(`id(`atHourSetting),     `Enabled,  intervalHours == 24 ? true:false);

    UI::ChangeWidget(`id(`exportFile),  `Value, file_active);
    UI::ChangeWidget(`id(`exportLDAP),  `Value, ldap_active);

    UI::ChangeWidget(`id(`ffpem),       `Value, fileformat == `ffpem ? true:false);
    UI::ChangeWidget(`id(`ffder),       `Value, fileformat == `ffder ? true:false);
    UI::ChangeWidget(`id(`crlfile),     `Value, crlfile);

    UI::ChangeWidget(`id(`hostname),    `Value, ldapCred["hostname"]:"");
    UI::ChangeWidget(`id(`port),        `Value, ldapCred["port"]:"");
    UI::ChangeWidget(`id(`dn),          `Value, ldapCred["dn"]:"");
    UI::ChangeWidget(`id(`binddn),      `Value, ldapCred["binddn"]:"");
    UI::ChangeWidget(`id(`ldapPassword),`Value, ldapCred["password"]:"");
}



define void cleanLdapCred()
{
    // cleanup ldap credetials hash ... remove nil values
    foreach (string key, string val, ldapCred, {
            if (val == nil) ldapCred[key]="";
    });
}


define void readSettings(string ca)
{
    string crlConf = sformat("/var/lib/CAM/%1/exportcrl.conf", deletechars(ca, " "));
    if (SCR::Execute(.target.bash, sformat("[ -f  %1  ]", crlConf) ) == 0 )
    {
        SCR::RegisterAgent( .temp_crlexport_agent, `ag_ini(
                            `IniAgent( crlConf,  crlConfFormat  ))  );

        periodic         = SCR::Read(.temp_crlexport_agent.periodic)      == "true" ? true:false;
        if (periodic) seenSecurityInfo = true;
        integer getAtHour = tointeger( (string)SCR::Read(.temp_crlexport_agent.interval_athour));
        intervalAtHour    = getAtHour != nil ? getAtHour:intervalAtHour;
        integer getHours  = tointeger( (string)SCR::Read(.temp_crlexport_agent.interval_hours));
        intervalHours     = getHours != nil ? getHours:intervalHours;
        if (intervalHours != 24) intervalAtHour = 0;

        file_active      = SCR::Read(.temp_crlexport_agent.export_file)   == "true" ? true:false;
        ldap_active      = SCR::Read(.temp_crlexport_agent.export_ldap)   == "true" ? true:false;
        string getCrlfile  = (string) SCR::Read(.temp_crlexport_agent.crlfilename);
        if (getCrlfile != nil && getCrlfile != "")  crlfile = getCrlfile;
        fileformat       = SCR::Read(.temp_crlexport_agent.crlfileformat) == "der" ? `ffder:`ffpem;
        ldapCred["hostname"] = (string) SCR::Read(.temp_crlexport_agent.ldap_hostname);
        ldapCred["port"]     = (string) SCR::Read(.temp_crlexport_agent.ldap_port);
        ldapCred["dn"]       = (string) SCR::Read(.temp_crlexport_agent.ldap_dn);
        ldapCred["binddn"]   = (string) SCR::Read(.temp_crlexport_agent.ldap_binddn);
        ldapCred["password"] = (string) SCR::Read(.temp_crlexport_agent.ldap_password);
        if (! ldap_active) ldapCred = $[];
        cleanLdapCred();

        SCR::UnregisterAgent(.temp_crlexport_agent);
        y2milestone("Found config file for automatic CRL export of CA %1  and read settings.", ca);
    }
    else
    {
        y2milestone("No config file found for automatic CRL export of CA %1", ca);
    }
}



define void writeSettings(string ca)
{
    string crlConf = sformat("/var/lib/CAM/%1/exportcrl.conf", deletechars(ca, " "));
    if (! (SCR::Execute(.target.bash, sformat("[ -f  %1  ]", crlConf) ) == 0))
    {
        SCR::Execute(.target.bash, sformat("umask 0077  &&  touch  %1", crlConf) );
    }

    SCR::RegisterAgent( .temp_crlexport_agent, `ag_ini(
                        `IniAgent( crlConf,  crlConfFormat  ))  );

    SCR::Write(.temp_crlexport_agent.caname, ca);
    SCR::Write(.temp_crlexport_agent.periodic,   periodic ? "true":"false");
    SCR::Write(.temp_crlexport_agent.capassword, periodic ? getPassword(ca):"" );

    SCR::Write(.temp_crlexport_agent.interval_athour, intervalHours == 24 ? "0":sformat("%1", intervalAtHour));
    SCR::Write(.temp_crlexport_agent.interval_hours,  sformat("%1", intervalHours));

    SCR::Write(.temp_crlexport_agent.export_file, file_active == true ? "true":"false");
    SCR::Write(.temp_crlexport_agent.export_ldap, ldap_active == true ? "true":"false");

    SCR::Write(.temp_crlexport_agent.crlfilename,   file_active ? crlfile:"");
    SCR::Write(.temp_crlexport_agent.crlfileformat, fileformat == `ffder ? "der":"pem");

    if (! ldap_active) ldapCred = $[];
    SCR::Write(.temp_crlexport_agent.ldap_hostname, ldapCred["hostname"]:"");
    SCR::Write(.temp_crlexport_agent.ldap_port,     ldapCred["port"]:"");
    SCR::Write(.temp_crlexport_agent.ldap_dn,       ldapCred["dn"]:"");
    SCR::Write(.temp_crlexport_agent.ldap_binddn,   ldapCred["binddn"]:"");
    SCR::Write(.temp_crlexport_agent.ldap_password, ldapCred["password"]:"");

    SCR::UnregisterAgent(.temp_crlexport_agent);

    y2milestone("Written settings for automatic CRL export to conf file %1", crlConf);
}


/**
* Editing CRL defaults of a selected CA
* @param selected CA
*/
define void exportCRL (string ca) {

    map ret = (map) YaPI::CaManagement::ReadCRLDefaults ($["caName":ca, "caPasswd":getPassword(ca)]);
    y2milestone ("ReadCRLDefaults(%1) return %2", $["caName":ca], ret );

    string caption = _("Export CRL");
    // this default can only be set inside this function
    crlfile = sformat("/var/lib/CAM/%1/crl/crl.pem", deletechars(ca, " "));


    string help_para1 = sformat("<p><b>%1</b></p>", caption);
    string help_para2 = _("<p>Export the CRL of this CA once by selecting <b>Export once</b>.</p>");
    string help_para3 = _("<p>To set up a repeated recreation of the CRL select <b>Repeated recreation and export</b>. In this case set the interval for the recreation in <b>Periodic interval</b>. If you set the interval to 24 hours you can additionally select the hour for the export. Please make sure you read and understood the <b>Security Information</b>.</p>");
    string help_para4 = _("<p>You can activate an export of the CRL to a local file or to an LDAP server or both. Set up the respective parameters in <b>Export to local file</b> and <b>Export to LDAP</b>.</p>");

    string helptext = help_para1 + help_para2 + help_para3 + help_para4;

    term cradiobuttons = `VBox (
                `RadioButtonGroup( `id(`export_mode),`VBox(
                `Left( `RadioButton(`id(`mode_once), `opt(`notify), _("Export once"), true )),
                `Left( `RadioButton(`id(`mode_periodically), `opt(`notify), _("Repeated recreation and export") ))
            ))
    );

    // fix space issue (bnc#446137)
    term cldapsettings = `HBox( `id(`ldapSettings),
                            `Top( `VBox(
                                    `TextEntry( `id(`hostname), _("&Host Name:"), ""),
                                    `TextEntry( `id(`port), _("&Port:"), ""),
                                    `TextEntry( `id(`dn),  _("&DN:"))
                            )),
                            `Top( `VBox(
                                    `TextEntry( `id(`binddn), _("&Bind DN:"), ""),
                                    `Password(  `id(`ldapPassword), `opt(`hstretch),_("Pass&word"))
                            ))
                         );

    term cfilesettings = `VBox( `id(`fileSettings), `HBox(
                                        `TextEntry(`id(`crlfile), _("Save &as"), crlfile ),
                                        `VBox(`VSpacing(1), `PushButton(`id(`askFile), Label::BrowseButton() ))
                                 ),
                                `Left( `RadioButtonGroup(`id(`fileformat),
                                       `HBox( 
                                              `Label(_("Export Format")),
                                              `RadioButton(`id(`ffpem), `opt(`notify), _("PEM Format"), true ),
                                              `RadioButton(`id(`ffder), `opt(`notify), _("DER Format") )
                                       )
                                 ))
                         );

    term cinterval = `Left( `id(`periodicInterval),
                            `HBox(
                                `VBox(`Label(_("Periodic interval")), `VSpacing(1)),
                                `HSpacing(3),
                                //`HSquash( `IntField( `id(`interval_days), "&days", 0, 100, 30 )),
                                // Translators: this is used to express a setting of  "every XX hour(s)"
                                `Label(_("every")),
                                // Translators: this is used to express a setting of  "every XX hour(s)"
                                `HSquash( `IntField( `id(`interval_hours), `opt(`notify), _("&hour(s)"), 1, 24, 12 )),  // (bnc#446137)
                                // Translators: in case "every XX hour(s)" is set to 24, the user can set "at XX o'clock"
                                `HBox(`id(`atHourSetting), `Label(_("at")),
                                // Translators: in case "every XX hour(s)" is set to 24, the user can set "at XX o'clock"
                                `HSquash( `IntField( `id(`interval_athour), _("&o'clock"), 0, 23, 3 ))),  // (bnc#446137)
                                `HSpacing(3),
                                `VBox( `VSpacing(1), `PushButton(`id(`securityInfo), _("&Security Information")) )
                            )
                        );

    term contents = `HBox( `HSpacing(1),
                            `VBox(  `Left( `Heading(_("CA Name: ") + CaMgm::currentCA) ),
                                    cradiobuttons,
                                    `HBox(
                                        `HSpacing(3),
                                        `VBox(
                                            `VSpacing(vspace),
                                            `Left( `CheckBox(`id(`exportFile), `opt(`notify), _("Export to file"), true )),
                                            `HBox( `HSpacing(hspace), cfilesettings ),
                                            `VSpacing(vspace),
                                            `Left( `CheckBox(`id(`exportLDAP), `opt(`notify), _("Export to LDAP"), false )), 
                                            `HBox( `HSpacing(hspace), cldapsettings ),
                                            `VSpacing(vspace),
                                            cinterval
                                        )
                                    )
                                ),
                            `HSpacing(1)
                            );

    Wizard::CreateDialog();
    Wizard::SetContentsButtons ( _("Export CRL"), contents, helptext, Label::BackButton (), Label::OKButton ());
    Wizard::DisableBackButton();

    // fill UI with settings
    readSettings(ca);  // read conf file if exists
    setSettings();     // push data to UI
    updateEnabled();   // gray out or ungray UI elements

    symbol ui = nil;

    repeat
    {
        ui = (symbol) UI::UserInput ();

        if (ui == `add)
        {
            string add_advanced_issuer_alt_name="test";
        }
        if (ui == `askFile)
        {
            string fformat = "*.pem";
            if (fileformat == `ffder) fformat = "*.der"; 
            string newcrlfile = UI::AskForSaveFileName( crlfile, fformat, _("Save as") );
            if (newcrlfile != nil && newcrlfile != "") crlfile = newcrlfile;
        }
        if ( contains([`mode_once, `mode_periodically, `exportFile, `exportLDAP], ui ))
        {
            updateEnabled();
        }
        if (ui == `ffpem || ui == `ffder)
        {
            fileformat = (symbol) UI::QueryWidget(`id(`fileformat), `Value);
            string formatstr = "";
            string outputstr = "";
            if (fileformat == `ffpem)
            {
                formatstr = "^(.*\.)der$";
                outputstr = "\\1pem";
            }
            else if (fileformat == `ffder)
            {
                formatstr = "^(.*\.)pem$";
                outputstr = "\\1der";
            }
            string newfile = regexpsub(crlfile, formatstr, outputstr);
            if (newfile != nil && newfile != "")  crlfile = newfile;
        }
        if (ui == `interval_hours  || ui == `interval_athour)
        {
            intervalHours = (integer) UI::QueryWidget(`id(`interval_hours),  `Value);
            intervalAtHour= (integer) UI::QueryWidget(`id(`interval_athour), `Value);
        }
        if (ui == `securityInfo)
        {
            showSecurityInfo();
        }
        if (ui == `next)
        {
            updateEnabled();
            fileformat    = (symbol) UI::QueryWidget(`id(`fileformat),           `Value);
            crlfile       = (string) UI::QueryWidget(`id(`crlfile),              `Value);
            intervalAtHour= (integer) UI::QueryWidget(`id(`interval_athour),       `Value);
            intervalHours = (integer) UI::QueryWidget(`id(`interval_hours),      `Value);
            ldapCred["hostname"] = (string) UI::QueryWidget(`id(`hostname),      `Value);
            ldapCred["port"]     = (string) UI::QueryWidget(`id(`port),          `Value);
            ldapCred["dn"]       = (string) UI::QueryWidget(`id(`dn),            `Value);
            ldapCred["binddn"]   = (string) UI::QueryWidget(`id(`binddn),        `Value);
            ldapCred["password"] = (string) UI::QueryWidget(`id(`ldapPassword),  `Value);
            cleanLdapCred();
            writeSettings(ca);

            string cronConfFile = sformat("/etc/cron.d/suse.de-yast2-ca-mgm-exportcrl-%1",ca);

            if (!periodic)
            {
                if (file_active)
                {
                    string exportFormat = "PEM";
                    if (fileformat == `ffder) exportFormat = "DER";
                    string strret = (string) YaPI::CaManagement::ExportCRL ($[  "caName": ca,           "caPasswd" : getPassword(ca),
                                                                                "exportFormat" : exportFormat, "destinationFile" : crlfile]);
                    y2milestone ("ExportCRL(%1) returned %2",   $["caName": ca, "exportFormat" : exportFormat, "destinationFile" : crlfile], ret);
                    if (strret == nil || strret != "1")
                    {
                        if ( Popup::YesNoHeadline(_("Export to file failed"), _("Do you want to retry?")) )
                        {
                            ui = `retry;
                        }
                    }
                    else { Popup::Message(_("Saved to file successfully")); }
                }

                if (ldap_active)
                {
                    boolean boolret = (boolean) YaPI::CaManagement::ExportCRLToLDAP ($[ "caName": ca,
                                                                                "ldapHostname"  : ldapCred["hostname"]:"", "ldapPort" : ldapCred["port"]:"",
                                                                                "destinationDN" : ldapCred["dn"]:"",        "BindDN"  : ldapCred["binddn"]:"",
                                                                                 "ldapPasswd"   : ldapCred["ldap_password"]:""      ]);
                    if (boolret)
                    {
                        Popup::Message(_("Saved to LDAP successfully."));
                    }
                    else
                    {
                        if ( Popup::YesNoHeadline(_("Export to LDAP failed"), _("Do you want to retry?")) )
                        {
                            ui = `retry;
                        }
                    }
                }

                // Remove the cronjob if the setting was reset
                SCR::Execute(.target.remove, cronConfFile);
            }
            else
            {
                string configString = sformat("## Configuration of a cron job to export the CRL of the CA: %1", ca);
                configString = configString + "\n##";
                configString = configString + "\n## Created by yast2-ca-management";
                configString = configString + "\n## Changes to this file will be overwritten by yast2-ca-management";
                configString = configString + sformat("\n## Either use yast or change settings here AND in /var/lib/CAM/%1/exportcrl.conf", deletechars(ca, " "));
                configString = configString + "\n\n\n";
                string hourset = intervalHours == 24  ?  sformat("%1",intervalAtHour) : sformat("*/%1",intervalHours);
                configString = configString + sformat("* %1 * * *    root    /usr/bin/exportCRL.pl -c /var/lib/CAM/%2/exportcrl.conf", hourset, deletechars(ca, " "));
                if ( SCR::Write(.target.string,  cronConfFile, configString) )
                    y2milestone("Setup cron job for periodic recreation and export of CRLs of CA %1", ca);
                else
                    y2error("Failed to set up a cron job for periodic recreation and export of CRLs of CA %1", ca);
            }

        }
        setSettings();

    }
    until (contains ([`next, `abort], ui));

    UI::CloseDialog();
}


}
