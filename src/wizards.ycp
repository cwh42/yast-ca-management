/**
 * File:        include/ca-management/wizards.ycp
 * Package:     Configuration of CAs
 * Summary:     Wizards definitions
 * Authors:     Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 */

{
    textdomain "ca-management";

    import "Wizard";
    import "Label";
    include "wizard/sequencer.ycp";

    include "ca-management/popup.ycp";
    include "ca-management/startup.ycp";
    include "ca-management/new_cert.ycp";
    include "ca-management/util.ycp";
    include "ca-management/new_cert_advanced.ycp";
    include "ca-management/ca.ycp";
    include "ca-management/certificate.ycp";


define  map certificateSequence = $[
	"ws_start"	    : "new_certinit",
        "new_certinit"      : $[
                            `next       	: "new_certSaveDef",
			    `abort		: `abort,
                            ],
        "new_certSaveDef"   : $[
                            `next       	: "new_cert1",
			    `abort		: `abort
                            ],		
        "new_cert1"         : $[
                            `next       	: "new_cert2",
			    `again 		: "new_cert1",
			    `abort		: `abort,
                            ],
        "new_cert2"         : $[
                            `next       	: "new_cert3",
			    `abort		: `abort,
			    `back		: "new_cert1",
			    `advancedOptions 	: "new_cert_advanced",
	                    ],
        "new_cert3"         : $[
                            `next       	: `abort,
			    `abort		: `abort,
			    `back		: "new_cert2"
                            ],
        "new_cert_advanced"  : $[
			    `abort		: `abort,
			    `back		: "new_cert3"
	                    ],	
    ];
    
/**
 * Creating new Root CA sequence
 * @return sequence result
 */
define symbol newCASequence() ``{

    map aliases = $[
        "new_certinit"   	: ``(new_cert_init ("Root CA")),
        "new_certSaveDef"  	: ``(new_cert_save_default ()),		
        "new_cert1"  	 	: ``(new_cert1 ("Root CA")),
        "new_cert2"   		: ``(new_cert2 ("Root CA")),
        "new_cert3"   		: ``(new_cert3 ("Root CA")),
        "new_cert_advanced"   	: ``(new_cert_advanced ()),		    
    ];

    Wizard::CreateDialog();
    symbol ret = WizardSequencer(aliases, certificateSequence);

    UI::CloseDialog();

    return ret;
}

/**
 * Creating new Server Certificate sequence
 * @return sequence result
 */
define symbol newServerCertificateSequence() ``{

    map aliases = $[
        "new_certinit"   	: ``(new_cert_init ("Server Certificate")),
        "new_certSaveDef"  	: ``(new_cert_save_default ()),		
        "new_cert1"  	 	: ``(new_cert1 ("Server Certificate")),
        "new_cert2"   		: ``(new_cert2 ("Server Certificate")),
        "new_cert3"   		: ``(new_cert3 ("Server Certificate")),
        "new_cert_advanced"   	: ``(new_cert_advanced ()),		    
    ];

    Wizard::CreateDialog();
    symbol ret = WizardSequencer(aliases, certificateSequence);

    UI::CloseDialog();

    return ret;
}

/**
 * Creating new Client Certificate sequence
 * @return sequence result
 */
define symbol newClientCertificateSequence() ``{

    map aliases = $[
        "new_certinit"   	: ``(new_cert_init ("Client Certificate")),
        "new_certSaveDef"  	: ``(new_cert_save_default ()),		
        "new_cert1"  	 	: ``(new_cert1 ("Client Certificate")),
        "new_cert2"   		: ``(new_cert2 ("Client Certificate")),
        "new_cert3"   		: ``(new_cert3 ("Client Certificate")),
        "new_cert_advanced"   	: ``(new_cert_advanced ()),		    
    ];

    Wizard::CreateDialog();
    symbol ret = WizardSequencer(aliases, certificateSequence);

    UI::CloseDialog();

    return ret;
}

/**
 * Creating new Client Certificate sequence
 * @return sequence result
 */
define symbol newSubCASequence() ``{

    map aliases = $[
        "new_certinit"   	: ``(new_cert_init ("Sub CA")),
        "new_certSaveDef"  	: ``(new_cert_save_default ()),		
        "new_cert1"  	 	: ``(new_cert1 ("Sub CA")),
        "new_cert2"   		: ``(new_cert2 ("Sub CA")),
        "new_cert3"   		: ``(new_cert3 ("Sub CA")),
        "new_cert_advanced"   	: ``(new_cert_advanced ()),		    
    ];

    Wizard::CreateDialog();
    symbol ret = WizardSequencer(aliases, certificateSequence);

    UI::CloseDialog();

    return ret;
}   

/**
 * Main workflow of the CA management configuration
 * @return sequence result
 */
define symbol MainSequence() ``{

    map aliases = $[
        "startup"        	: ``(Startup()),
	"new_certCA"		: ``(newCASequence()),
	"new_certServer"	: ``(newServerCertificateSequence()),
	"new_certClient"	: ``(newClientCertificateSequence()),
	"new_certSubCA"		: ``(newSubCASequence()),			
        "ca_main"  	 	: ``(ca ()),
        "certificate"  	 	: ``(certificate ()),		
        ];

    map sequence = $[
        "ws_start"          : "startup",
        "startup"           : $[
				`next       	: `abort,
				`createRoot 	: "new_certCA",
				`enter      	: "ca_main",
                            ],
        "new_certCA"        : $[
				`next       	: "startup",
				`abort		: "startup",
                            ],
        "ca_main"	    : $[
				`back 		: "startup",
				`abort		: "startup",
				`certificates 	: "certificate",
				`createSubCA	: "new_certSubCA",
                            ],
        "certificate"	    : $[
				`back 		: "ca_main",
				`abort		: "startup",
				`again		: "certificate",
				`next		: "certificate",				
				`addServer 	: "new_certServer",
				`addClient 	: "new_certClient",				
                            ],
        "new_certServer"    : $[
				`next       	: "certificate",
				`abort		: "certificate",
                            ],
        "new_certClient"    : $[
				`next       	: "certificate",
				`abort		: "certificate",
                            ],
        "new_certSubCA"     : $[
				`next       	: "ca_main",
				`abort		: "ca_main",
                            ],	
        ];

    Wizard::CreateDialog();
    symbol ret = WizardSequencer(aliases, sequence);

    UI::CloseDialog();

    return ret;
}

/* EOF */
}
