/**
 *
 * File:
 *   certDefault.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Edit defaults for a selected CA
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Edit default for a selected CA
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";
    include "ca-management/new_cert_read_write.ycp";

    /**
     * Editing default certificate settings  ( 1. step )
     * @return `next,  'abort
     */
    define symbol edit_default1 () ``{
	
        // help text 1/4
        string helptext = _("<p>When creating a new subCA or certificate, the system suggests some default values.</p>");
        // help text 2/4 
        helptext = helptext + _("<p>With this workflow, change these default settings.</p>");
        // help text 3/4
        helptext = helptext + _("<p>However, the modified settings will be used for <b>new</B> entries only.</p>");
        // help text 4/4
        helptext = helptext + _("<p>You can edit the default settings for <b>subCAs</b>, <b>client certificates</b>, and  <b>server certificates</b>.</p>");

        term contents = `VBox ();

	contents = add (contents,    `Frame ( _("Default Settings for:"),
					      `RadioButtonGroup(`id(`rb), 
								`VBox(
								      `Left(`RadioButton(`id("Sub CA"),
											 "&Sub CA" )),
								      `Left(`RadioButton(`id("Client Certificate"),
											 "&Client Certificate" )),
								      `Left(`RadioButton(`id("Server Certificate"),
											 "S&erver Certificate" ))
								      )
								)
					      )
			);

        Wizard::SetContents ( _("Edit Default Settings"), contents, helptext, true, true);
	Wizard::RestoreNextButton();
	Wizard::DisableBackButton();
	UI::ChangeWidget(`id(`rb), `CurrentButton, CaMgm::currentDefault);	

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		string kind = (string) UI::QueryWidget(`id(`rb),
						       `CurrentButton);
		if ( kind != CaMgm::currentDefault)
		{
		    CaMgm::initializeDefault = true;		    
		}

		if (CaMgm::initializeDefault)
		{
		    new_cert_init (kind);
		    new_cert_save_default ();
		    CaMgm::initializeDefault = false;
		}
	    }
	    CaMgm::currentDefault = (string) UI::QueryWidget(`id(`rb),
							     `CurrentButton);
        }
        until (contains ([`next, `abort], ui));

        return ui;
    }


    /**
     * Saving default settings ( 3. step )
     * @return 'back 'cancel
     */
    define symbol edit_default2 () ``{

	integer i = 0;
	boolean nextLine = false;
	
        // help text 1/2
        string helptext = _("<p>This frame gives an overview of all default settings before they are saved.</p>");
        // help text 2/2
        helptext = helptext + _("<p>Click <b>Save</b> to finish the input.</p>");

	string text = _("<p><b>Summary</b></p>");
	text = text + "<pre>";

	text = text + "Basic Constaints:         " + CaMgm::adv_ca
	    + (CaMgm::adv_cri_ca ? _(" (critical)\n") : "\n") ;

	if (CaMgm::adv_pathlen)
	{
	    text = text +  _("Path Length:              ") + CaMgm::adv_pathlenValue + "\n";
	}	

	if (size (CaMgm::adv_distribution_point) > 0)
	{
	    text = text + "CRL Distribution Point:   " + CaMgm::adv_distribution_point
		+ (CaMgm::adv_cri_distribution_point ? _(" (critical)\n") : "\n") ;
	}

	if (size (CaMgm::adv_issuer_alt_name_list) > 0
	    || CaMgm::adv_copy_issuer_alt_name)
	{	
	    text = text + "Issuer Alt Name:          "
		+ (CaMgm::adv_cri_issuer_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_issuer_alt_name ?  _("Copy Subject Alt Name from CA"): "");
	    i = 0;
	    if (CaMgm::adv_cri_issuer_alt_name
		|| CaMgm::adv_copy_issuer_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}

	if (CaMgm::adv_digitalSignature
	    || CaMgm::adv_nonRepudiation
	    || CaMgm::adv_cRLSign
	    || CaMgm::adv_keyEncipherment
	    || CaMgm::adv_dataEncipherment
	    || CaMgm::adv_encipherOnly
	    || CaMgm::adv_keyAgreement
	    || CaMgm::adv_keyCertSign
	    || CaMgm::adv_decipherOnly)
	{		
	    text = text + "Key Usage:                "
		+ (CaMgm::adv_cri_key_usage ? _("(critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_key_usage;
	    if (CaMgm::adv_digitalSignature)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "digitalSignature\n";
		}
		else
		{
		    text = text + "                          " + "digitalSignature\n";
		}	    
	    }
	    if (CaMgm::adv_nonRepudiation)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "nonRepudiation\n";
		}
		else
		{
		    text = text + "                          " + "nonRepudiation\n";
		}	    
	    }
	    if (CaMgm::adv_cRLSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "cRLSign\n";
		}
		else
		{
		    text = text + "                          " + "cRLSign\n";
		}	    
	    }
	    if (CaMgm::adv_keyEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "keyEncipherment\n";
		}	    	    
	    }
	    if (CaMgm::adv_dataEncipherment)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "dataEncipherment\n";
		}
		else
		{
		    text = text + "                          " + "dataEncipherment\n";
		}	    
	    }
	    
	    if (CaMgm::adv_encipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "encipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "encipherOnly\n";
		}	    
	    }
	    if (CaMgm::adv_keyAgreement)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyAgreement\n";
		}
		else
		{
		    text = text + "                          " + "keyAgreement\n";
		}	    
	    }
	    if (CaMgm::adv_keyCertSign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "keyCertSign\n";
		}
		else
		{
		    text = text + "                          " + "keyCertSign\n";
		}	    
	    }
	    if (CaMgm::adv_decipherOnly)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "decipherOnly\n";
		}
		else
		{
		    text = text + "                          " + "decipherOnly\n";
		}   	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
	    
	if (size (CaMgm::adv_nsComment) > 0)
	{	
	    text = text + _("nsComment:                ") + CaMgm::adv_nsComment
		+ (CaMgm::adv_cri_nsComment ? _(" (critical)\n") : "\n") ;
	}

	if (CaMgm::adv_client
	    || CaMgm::adv_server
	    || CaMgm::adv_sslCA
	    || CaMgm::adv_email
	    || CaMgm::adv_reserved
	    || CaMgm::adv_emailCA
	    || CaMgm::adv_objsign
	    || CaMgm::adv_objCA)
	{
	    text = text + _("nsCertType:               ")
		+ (CaMgm::adv_cri_nsCertType ? _(" (critical)\n") : "") ;
	    nextLine = CaMgm::adv_cri_nsCertType;
	    if (CaMgm::adv_client)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "client\n";
		}
		else
		{
		    text = text + "                          " + "client\n";
		}	    
	    }
	    if (CaMgm::adv_server)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "server\n";
		}
		else
		{
		    text = text + "                          " + "server\n";
		}	    
	    }
	    if (CaMgm::adv_sslCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "sslCA\n";
		}
		else
		{
		    text = text + "                          " + "sslCA\n";
		}	    
	    }
	    if (CaMgm::adv_email)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "email\n";
		}
		else
		{
		    text = text + "                          " + "email\n";
		}	    
	    }
	    if (CaMgm::adv_reserved)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "reserved\n";
		}
		else
		{	
		    text = text + "                          " + "reserved\n";
		}	    
	    }
	    
	    if (CaMgm::adv_emailCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "emailCA\n";
		}
		else
		{
		    text = text + "                          " + "emailCA\n";
		}	    
	    }
	    if (CaMgm::adv_objsign)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objsign\n";
		}
		else
		{
		    text = text + "                          " + "objsign\n";
		}	    
	    }
	    if (CaMgm::adv_objCA)
	    {
		if (!nextLine)
		{
		    nextLine = true;
		    text = text + "objCA\n";
		}
		else
		{
		    text = text + "                          " + "objCA\n";
		}	    
	    }
	    if (!nextLine)
	    {
		nextLine = true;
		text = text + "\n";
	    }
	}
	if (size (CaMgm::adv_nsSslServerName) > 0)
	{	
	    text = text + "nsSslServerName:          " + CaMgm::adv_nsSslServerName
		+ (CaMgm::adv_cri_nsSslServerName ? _(" (critical)\n") : "\n") ;
	}

	if (size (CaMgm::adv_subject_alt_name_list) > 0
	    || CaMgm::adv_copy_subject_alt_name)
	{	
	    text = text + "Subject Alt Name:         "
		+ (CaMgm::adv_cri_subject_alt_name ? _("(critical) ") : "") ;
	    text = text + (CaMgm::adv_copy_subject_alt_name ?   _("Copy Standard E-Mail Address"): "");
	    i = 0;
	    if (CaMgm::adv_cri_subject_alt_name
		|| CaMgm::adv_copy_subject_alt_name)
	    {
		i = i + 1;
		text = text + "\n";	    
	    }
	    foreach (map element, CaMgm::adv_subject_alt_name_list, ``{
		if (i==0)
		{
		    text = text + element["kind"]:"" + ":" + element["name"]:"";
		}
		else
		{
		    text = text + "                          " + element["kind"]:"" + ":" + element["name"]:"";
		}
		text = text + "\n";
		i = i + 1;
	    });
	    if (i==0)
	    {
		text = text + "\n";
	    }
	}

 	if (size (CaMgm::exp_subjectKeyIdentifier) > 0)
	{	
	    text = text +   "Subject Key Identifier:   "  + CaMgm::exp_subjectKeyIdentifier
		+ (CaMgm::exp_cri_subjectKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_authorityKeyIdentifier) > 0)
	{	
	    text = text +   "Authority Key Identifier: "  + CaMgm::exp_authorityKeyIdentifier
		+ (CaMgm::exp_cri_authorityKeyIdentifier ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsBaseUrl) > 0)
	{	
	    text = text +   "nsBaseUrl:                "  + CaMgm::exp_netscape_nsBaseUrl
		+ (CaMgm::exp_cri_netscape_nsBaseUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsRevocationUrl) > 0)
	{	
	    text = text +   "nsRevocationUrl:          "  + CaMgm::exp_netscape_nsRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaRevocationUrl) > 0)
	{	
	    text = text +   "nsCaRevocationUrl:        "  + CaMgm::exp_netscape_nsCaRevocationUrl
		+ (CaMgm::exp_cri_netscape_nsCaRevocationUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsRenewalUrl) > 0)
	{	
	    text = text +   "nsRenewalUrl:             "  + CaMgm::exp_netscape_nsRenewalUrl
		+ (CaMgm::exp_cri_netscape_nsRenewalUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_netscape_nsCaPolicyUrl) > 0)
	{	
	    text = text +   "nsCaPolicyUrl:            "  + CaMgm::exp_netscape_nsCaPolicyUrl
		+ (CaMgm::exp_cri_netscape_nsCaPolicyUrl ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_authorityInfoAccess) > 0)
	{	
	    text = text +   "authorityInfoAccess:      "  + CaMgm::exp_authorityInfoAccess
		+ (CaMgm::exp_cri_authorityInfoAccess ? _(" (critical)\n") : "\n") ;
	}
 	if (size (CaMgm::exp_extendedKeyUsage) > 0)
	{	
	    text = text +   "extendedKeyUsage:         "  + CaMgm::exp_extendedKeyUsage
		+ (CaMgm::exp_cri_extendedKeyUsage ? _(" (critical)\n") : "\n") ;
	}
	
	text = text + "</pre>";

        term contents = `VBox ();
        contents = add (contents, `RichText(text));

                                // To translators: dialog label
        Wizard::SetContents ( _("Save Settings (step 3/3)"), contents, helptext, true, true);
	Wizard::SetNextButton(`next, Label::SaveButton() );

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

            if (ui == `next)
            {
		//creating new certificate
		if (!new_cert_write_default ())
		{
		    showErrorCaManagement ();
		    ui = `again;
		}
		else
		{
		    Popup::Message(_("Default has been saved."));
		}
	    }
        }
        until (contains ([`back, `next, `abort], ui));

        return ui;
    }


}
