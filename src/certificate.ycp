/**
 *
 * File:
 *   certificate.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Handling certificates of a CA
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Showing and hadling CA certificates
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";
    include "ca-management/new_cert.ycp";

    define list<string> certificateID = [];

    /**
     * Dialog for revoking a certificate
     */
    define void revokeCertificate() ``{
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Revoke Certificate")),
				      `VSpacing (1),
				      `RadioButtonGroup(`id(`rb), 
							`VBox(
							      `Label(_("Reasons")),
							      `VSpacing (1),
							      `Left(`RadioButton(`id("unspecified"), "&unspecified", true)),
							      `Left(`RadioButton(`id("keyCompromise"), "&keyCompromise" )),
							      `Left(`RadioButton(`id("CACompromise"), "CAC&ompromise" )),
							      `Left(`RadioButton(`id("affiliationChanged"), "&affiliationChanged" )),
							      `Left(`RadioButton(`id("superseded"), "&superseded" )),
							      `Left(`RadioButton(`id("cessationOfOperation"), "&cessationOfOperation" )),
							      `Left(`RadioButton(`id("certificateHold"), "c&ertificateHold" ))
							      )
							),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    
            string reason = (string) UI::QueryWidget(`id(`rb), `CurrentButton);	    
	    
	    if (ui == `ok)
	    {
		// Revoke certificate
		boolean ret = nil;
		ret = (boolean) YaPI::CaManagement::RevokeCertificate ($["caName": CaMgm::currentCA,
									 "caPasswd" : getPassword(CaMgm::currentCA),
									 "certificate" : CaMgm::currentCertificate,
									 "crlReason" : reason
								       ]);
		y2milestone ("RevokeCertificate(%1) return %2", $["caName": CaMgm::currentCA,
								  "certificate" : CaMgm::currentCertificate,
								  "crlReason" : reason
			     ],
			     ret);
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		    ret = false;
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
    }        

    /**
     * showLongCertDescription - description of a certificate in textform
     * @param CA name , certification name
     */
    define string showLongCertDescription (string CAname,
					   string Certname) ``{

	string ret = (string) YaPI::CaManagement::ReadCertificate ($["caName":CAname,
								     "certificate":Certname,
								     "type":"plain"]);
	
	y2milestone("ReadCertificate(%1,%2): %3", CAname, Certname, ret);
	ret = "<pre>" + ret + "</pre>";
	
        if (ret == nil)
        {
            showErrorCaManagement ();
        }
	else
	{
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `VSpacing(16),
				   `VBox (
					  `HSpacing (100),
					  // popup window header
					  `Heading (_("Description")),
					  `VSpacing (0.5),
					  `RichText (ret),
					  `VSpacing (1.5),
					  // push button label
					  `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
					  )
				   )
			    );

	    UI::SetFocus (`id(`ok));
	    UI::UserInput ();
	    UI::CloseDialog ();	    
	}	
    }
    

    /**
     * getCertDescription - description of a certificate
     * @param CA name, certification name
     * @return a string with the certification description  
     */      
    define string getCertDescription (string CAname,
				      string Certname) ``{
	string text = _("<br><h3>Description</h3>");

	map ret = (map) YaPI::CaManagement::ReadCertificate ($["caName":CAname,
							       "certificate":Certname,
							       "type":"parsed"]);
	y2milestone("ReadCertificate(%1,%2): %3", CAname, Certname, ret);	    
        if (ret == nil)
        {
            showErrorCaManagement ();
            return _("<br>Certificate not found");
        }

	text = text + "<pre>";
	text = text + "Fingerprint:        " + ret["FINGERPRINT"]:"";
	map dn = ret["DN_HASH"]:$[];
	if (size (dn) > 0)
	{
	    text = text + "<br>Common Name:        " + ((list)dn["CN"]:[])[0]:"";
	    text = text + "<br>Organization:       " + ((list)dn["O"]:[])[0]:"";
	    text = text + "<br>Location:           " + ((list)dn["L"]:[])[0]:"";	    
	    text = text + "<br>State:              " + ((list)dn["ST"]:[])[0]:"";
	    text = text + "<br>Country:            " + ((list)dn["C"]:[])[0]:"";
	    text = text + "<br>EMAIL:              " + ((list)dn["EMAILADDRESS"]:[])[0]:"";
	}
	text = text + "<br>Is CA:              " + ret["IS_CA"]:"";
	text = text + "<br>Key Size:           " + ret["KEYSIZE"]:"";
	text = text + "<br>Serialnumber:       " + ret["SERIAL"]:"";
	text = text + "<br>Version:            " + ret["VERSION"]:"";	
	text = text + "<br>Valid from:         " + ret["NOTBEFORE"]:"";
	text = text + "<br>Valid to:           " + ret["NOTAFTER"]:"";
	text = text + "<br>algo. of pub. Key : " + ret["PUBKEY_ALGORITHM"]:"";
	text = text + "<br>algo. of signature: " + ret["SIGNATURE_ALGORITHM"]:"";			
	text = text + "</pre>";	
	return text;
    }
    

    /**
     * Creates certikficate items
     *
     * @param name of the selected CA
     * @return a list certificate items formated for a UI table
     */
    define list<term> getCertificateList ( string currentCA, string password) ``{
        list<term> result = [];
        integer i = 0;
	list<map> ret = (list<map>) YaPI::CaManagement::ReadCertificateList ($["caName":currentCA, "caPasswd":password]);
        if (ret == nil)
        {
            showErrorCaManagement ();
	    CaMgm::passwdMap = remove (CaMgm::passwdMap, currentCA);
	    return nil;
        }
        y2milestone("ReadCertificateList(%1): %2", currentCA, ret);
	

	foreach (map element, ret, ``{
	    result = add (result, `item (`id (i), element["status"]:"",
					 element["commonName"]:"",
					 element["emailAddress"]:"",
					 element["organizationName"]:"",
					 element["organizationalUnitName"]:"",
					 element["localityName"]:"",
					 element["stateOrProvinceName"]:"",
					 element["country"]:"" ) );
	    certificateID = add (certificateID, element["certificate"]:"");
	    i = i + 1;
	});
        return result;
    }


    /**
     * Showing CA certificates
     * @return 'back, 'abort, 'again
     */
    define symbol certificate () ``{
	
	string password = getPassword (CaMgm::currentCA);
	if (password == nil)
	{
	    return `abort;
	}

        list<term> certTermList = getCertificateList ( CaMgm::currentCA, password );	
	if (certTermList == nil)
	{
	    return `abort;
	}
	
        // help text 1/6
        string helptext = _("<p>First you see a ListView with all available Certificates in this CA. The columns are the DN of the Certificates incl. the email address and the state of the Certificate (valid/revoked/...).</p>");
        // help text 2/6 
        helptext = helptext + _("<p>You can select on of the Certificate and execute some actions</p>");
        // help text 3/6 
	helptext = helptext + _("<p><b>View</b> opens a window with a text representation of the complete Certificate.</p>");
        // help text 4/6
        helptext = helptext + _("<p>Furthermore you can <b>Revoke</b>, <b>Delete</b> or <b>Export</b> a request.</p>");
        // help text 5/6
        helptext = helptext + _("<p>With <b>Add</b> you can generate a new server or client certificate.</p>");
        // help text 6/6
        helptext = helptext + _("<p>In the textentry below you can see the most important Values of the selected certificate.</p>");

        term buttons = `HBox ();
	// To translators: pushbutton label
	buttons = add (buttons,  `MenuButton( _("Add"),
                                              [
                                               `item(`id(`addServer), _("Add Server Certificate") ),
                                               `item(`id(`addClient), _("Add Client Certificate") )
                                               ]
                                              ));
	buttons = add (buttons, `PushButton (`id (`view) , _("View")));
	buttons = add (buttons, `PushButton (`id (`revoke) , _("Revoke")));
	buttons = add (buttons, `PushButton (`id (`delete) , _("Delete")));	
        buttons = add (buttons, `HStretch());
        buttons = add (buttons, `MenuButton(`id(`export),
					    _("Export"),
                                              [
                                               `item(`id(`exportFile), _("Export to File") ),
                                               `item(`id(`exportLDAP), _("Export to LDAP") )
                                               ]
                                              ));
        term contents = `VBox ();

	contents = add (contents, `Table (`id (`table), `opt (`notify, `immediate),
						`header (
							 // To translators: table headers
							 _("Status"), _("Common Name"),
							 _("EMAIL Address"), _("Organisation"),
							 _("Organisational Unit"), _("Locality"),
							 _("State"), _("Country")),
						certTermList)
			);
	
	contents = add (contents, `RichText(`id(`textinfo),""));
	contents = add (contents, buttons);

        Wizard::SetContents (  _("Certificates of CA: ") + CaMgm::currentCA, contents, helptext, true, false);

        symbol ui = nil;

        repeat
        {
            boolean anyitems = UI::QueryWidget (`id (`table), `CurrentItem) != nil;
            UI::ChangeWidget (`id (`delete), `Enabled, anyitems);
            UI::ChangeWidget (`id (`revoke), `Enabled, anyitems);
            UI::ChangeWidget (`id (`view), `Enabled, anyitems);
            UI::ChangeWidget (`id (`export), `Enabled, anyitems);

	    if (anyitems)
	    {
		    integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		    CaMgm::currentCertificate = (string) certificateID[id]:"";
		    UI::ChangeWidget( `id(`textinfo), `Value, getCertDescription (CaMgm::currentCA,
										  CaMgm::currentCertificate));
	    }	    

            ui = (symbol) UI::UserInput ();

	    if (ui == `view)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		CaMgm::currentCertificate = (string) certificateID[id]:"";
		showLongCertDescription (CaMgm::currentCA,
					 CaMgm::currentCertificate);		
	    }	    	
	    
	    if (ui == `delete)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		CaMgm::currentCertificate = (string) certificateID[id]:"";		    
		if (Popup::ContinueCancelHeadline (_("Delete"), _("Deleting current certificate ?")))
		{
		    boolean ret = nil;
//		    ret = (boolean) YaPI::CaManagement::DeleteCertificate ($["caName": CaMgm::currentCA,                   FIXME
//									     "certificate" : CaMgm::currentCertificate
//									   ]);
		    y2milestone ("DeleteCertificate(%1) return %2", $["caName": CaMgm::currentCA,
								      "certificate" : CaMgm::currentCertificate
				 ],
				 ret);
		    if (ret == nil
			|| ret == false)
		    {
			showErrorCaManagement ();
		    }
		    ui = `again;
		}
	    }
	    if (ui == `revoke)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		CaMgm::currentCertificate = (string) certificateID[id]:"";		    		
		revokeCertificate();
		ui = `again;		
	    }
	    if (ui == `exportFile)
	    {
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		CaMgm::currentCertificate = (string) certificateID[id]:"";
		exportCertificateToFile (CaMgm::currentCA, CaMgm::currentCertificate);
	    }
	    if (ui == `exportLDAP)
	    {	    
		integer id = (integer) UI::QueryWidget (`id (`table), `CurrentItem);
		CaMgm::currentCertificate = (string) certificateID[id]:"";		
	    	term table_item = (term) UI::QueryWidget(`id(`table), `Item(id));
		exportToLDAP ("CERT",
			      CaMgm::currentCA,
			      (string) select(table_item, 2, ""), //common name
			      (string) select(table_item, 3, ""), //EMAIL
			      CaMgm::currentCertificate);
	    }
        }
        until (contains ([`back, `again, `abort, `addServer, `addClient], ui));

        return ui;
    }	

}
