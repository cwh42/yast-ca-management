/**
 *
 * File:
 *   ca.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Overview ( main window ) of a selected CA
 *
 */


{
    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "YaPI::CaManagement";
    
    include "ca-management/crlDefault.ycp";
    include "ca-management/certDefault.ycp";    
    
    define  map defaultSequence = $[
        "ws_start"	    : "new_default1",
        "new_default1"      : $[
                            `next       	: "new_default2",
			    `again 		: "new_default1",
			    `abort		: `abort,
                            ],
        "new_default2"      : $[
                            `next       	: "new_default3",
			    `again 		: "new_default2",
			    `abort		: `abort,
			    `back		: "new_default1"
	                    ],
        "new_default3"      : $[
                            `next       	: `abort,
			    `abort		: `abort,
			    `back		: "new_default2"
                            ]
    ];

    // help text 1/2
    string CAHelptext = _("<p>Here, see the most important values of the CA.</p>");
    // help text 2/2
    CAHelptext = CAHelptext + _("<p>Special information about the current CA is provided by <b>Certificates</b>, <b>CRL</b>, and <b>Advanced</b>.</p>");

    /**
     * Creating new Client Certificate sequence
     * @return sequence result
     */
    define symbol newSubCASequence() ``{

	map aliases = $[
			"new_certinit"   	: ``(new_cert_init ("Sub CA")),
			"new_certSaveDef"  	: ``(new_cert_save_default ()),		
			"new_cert1"  	 	: ``(new_cert1 ("Sub CA")),
			"new_cert2"   		: ``(new_cert2 ("Sub CA")),
			"new_cert3"   		: ``(new_cert3 ("Sub CA")),
			"new_cert_advanced"   	: ``(new_cert_advanced (false,"Sub CA")),
			];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	symbol ret = WizardSequencer(aliases, CaMgm::certificateSequence);

	UI::CloseDialog();

	return ret;
    }

   /**
    * Editing certificate defaults
    * @return sequence result
    */
    define symbol editDefaultSequence() ``{

	map aliases = $[
			"new_default1"  	: ``(edit_default1 ()),
			"new_default2"   	: ``(new_cert_advanced (true,"Default")),
			"new_default3"   	: ``(edit_default2 ())
			];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	symbol ret = WizardSequencer(aliases, defaultSequence);

	UI::CloseDialog();

	return ret;
    }
    

    /**
     * showLongDescriptionCA - description of a CA in textform
     * @param CA name
     */
    define string showLongDescriptionCA (string CAname) ``{

	string ret = (string) YaPI::CaManagement::ReadCA ($["caName":CAname, "type":"plain"]);
	y2milestone("ReadCA(%1): %2", CAname, ret);
	
        if (ret == nil)
        {
            showErrorCaManagement ();
        }
	else
	{
	    ret = "<pre>" + ret + "</pre>";
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `VSpacing(16),
				   `VBox (
					  `HSpacing (100),
					  // popup window header
					  `Heading (_("Description")),
					  `VSpacing (0.5),
					  `RichText (ret),
					  `VSpacing (1.5),
					  // push button label
					  `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
					  )
				   )
			    );

	    UI::SetFocus (`id(`ok));
	    UI::UserInput ();
	    UI::CloseDialog ();	    
	}	
    }

    
    /**
     * getDescriptionCA - description of a CA
     * @param CA name
     * @return a string with the CA description
     */
    define string getDescriptionCA (string CAname) ``{
	string text = sformat(_("<p><b> Description for %1 </b></p>"), CAname);

	map ret = (map) YaPI::CaManagement::ReadCA ($["caName":CAname, "type":"parsed"]);
        if (ret == nil)
        {
            showErrorCaManagement ();
            return _("\nCA not found");
        }
	y2milestone("ReadCA(%1): %2", CAname, ret);

	map dn = ret["DN_HASH"]:$[];
	if (size (dn) > 0)
	{
	    text = text + _("<p><b>Issued For:</b></p>");
	    text = text + "<pre>";
	    text = text + "\nCommon Name:  " + ((list)dn["CN"]:[])[0]:"";
	    text = text + "\nOrganization: " + ((list)dn["O"]:[])[0]:"";
	    text = text + "\nLocation:     " + ((list)dn["L"]:[])[0]:"";	    
	    text = text + "\nState:        " + ((list)dn["ST"]:[])[0]:"";
	    text = text + "\nCountry:      " + ((list)dn["C"]:[])[0]:"";
	    text = text + "\nEMAIL:        " + ((list)dn["emailAddress"]:[])[0]:"";
	    text = text + "</pre>";	    
	}

	map issuer = ret["ISSUER_HASH"]:$[];
	if (size (issuer) > 0)
	{
	    text = text + _("<p><b>Issued By:</b></p>");
	    text = text + "<pre>";	    
	    text = text + "\nCommon Name:  " + ((list)issuer["CN"]:[])[0]:"";
	    text = text + "\nOrganization: " + ((list)issuer["O"]:[])[0]:"";
	    text = text + "\nLocation:     " + ((list)issuer["L"]:[])[0]:"";	    
	    text = text + "\nState:        " + ((list)issuer["ST"]:[])[0]:"";
	    text = text + "\nCountry:      " + ((list)issuer["C"]:[])[0]:"";
	    text = text + "\nEMAIL:        " + ((list)issuer["emailAddress"]:[])[0]:"";
	    text = text + "</pre>";	    
	}

	text = text +  _("\nValid from: ") + ret["NOTBEFORE"]:"";
	text = text + "<br>" + _("\nValid to: ") + ret["NOTAFTER"]:"";
	text = text + "<br>" + "Fingerprint: " + ret["FINGERPRINT"]:"";

	return text;
	
    }


    /**
     * Dialog Tab - CA - 
     * @return term the selected CA
     */
    term getCATab () {

	term contents = `VBox (
			       `VSpacing (1),
			       `HBox (
				      `HSpacing (1),
				      `RichText(`id(`textinfo),""),
				      `HSpacing (1)				      
				      ),
			       `HBox (
				      `HSpacing (1),
				      // To translators: pushbutton label
				      `Right (`MenuButton( _("&Advanced..."),
							   [
							    `item(`id(`information), _("&View") ),
							    `item(`id(`createSubCA), _("C&reate SubCA")),
							    `item(`id(`exportFile),  _("Export to &File")),
							    `item(`id(`exportLDAP),  _("Export to &LDAP")),
							    `item(`id(`editDefault), _("&Edit Default"))
							    ]
							   )),
				      `HSpacing (1)
				      ),
			       `VSpacing (1)			       
                              );
	return contents;
    }
    
    /**
     * Initialize the tab of the dialog
     */
    void initCATab () {
        UI::ChangeWidget( `id(`textinfo), `Value, getDescriptionCA (CaMgm::currentCA));	
    }

    /**
     * Handle events in a tab of a dialog
     */
    symbol handleCATab (map event) {
	any ret = event["ID"]:nil;
	if (ret == `information)
	{
	    showLongDescriptionCA (CaMgm::currentCA);
	}
	if (ret == `exportLDAP)
	{
	    exportToLDAP ("CA", CaMgm::currentCA, "", "", "", "");
	}
	if (ret == `exportFile)
	{
	    exportCAtoFile (CaMgm::currentCA);
	}
	if (ret == `editDefault)
	{
	    // initialize global variable
	    CaMgm::initializeDefault = true;		    		
	    CaMgm::currentDefault = "Sub CA";
	    editDefaultSequence();
	}
	if (ret == `createSubCA)
	{
	    newSubCASequence();
	}
	return nil;	
    }

}
