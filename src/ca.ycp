/**
 *
 * File:
 *   ca.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Overview ( main window ) of a selected CA
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";


    /**
     * showLongDescription - description of a CA in textform
     * @param CA name
     */
    define string showLongDescription (string CAname) ``{

	string ret = (string) YaPI::CaManagement::ReadCA ($["caName":CAname, "type":"plain"]);
	y2milestone("ReadCA(%1): %2", CAname, ret);
	
        if (ret == nil)
        {
            showErrorCaManagement ();
        }
	else
	{
	    ret = "<pre>" + ret + "</pre>";
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `VSpacing(16),
				   `VBox (
					  `HSpacing (100),
					  // popup window header
					  `Heading (_("Description")),
					  `VSpacing (0.5),
					  `RichText (ret),
					  `VSpacing (1.5),
					  // push button label
					  `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
					  )
				   )
			    );

	    UI::SetFocus (`id(`ok));
	    UI::UserInput ();
	    UI::CloseDialog ();	    
	}	
    }

    
    /**
     * getDescription - description of a CA
     * @param CA name
     * @return a string with the CA description
     */
    define string getDescription (string CAname) ``{
	string text = _("\n<b> Description</b>\n");

	map ret = (map) YaPI::CaManagement::ReadCA ($["caName":CAname, "type":"parsed"]);
        if (ret == nil)
        {
            showErrorCaManagement ();
            return _("\nCA not found");
        }
	y2milestone("ReadCA(%1): %2", CAname, ret);

	map dn = ret["DN_HASH"]:$[];
	if (size (dn) > 0)
	{
	    text = text + "<br>";
	    text = text + _("<pre></pre>\n<b>Issued for:</b>");
	    text = text + "<pre>";
	    text = text + "\nCommon Name:  " + ((list)dn["CN"]:[])[0]:"";
	    text = text + "\nOrganization: " + ((list)dn["O"]:[])[0]:"";
	    text = text + "\nLocation:     " + ((list)dn["L"]:[])[0]:"";	    
	    text = text + "\nState:        " + ((list)dn["ST"]:[])[0]:"";
	    text = text + "\nCountry:      " + ((list)dn["C"]:[])[0]:"";
	    text = text + "\nEMAIL:        " + ((list)dn["EMAILADDRESS"]:[])[0]:"";
	    text = text + "</pre>";	    
	}

	map issuer = ret["ISSUER_HASH"]:$[];
	if (size (issuer) > 0)
	{
	    text = text + "<br>";
	    text = text + _("\n<b>Issued by:</b>");
	    text = text + "<pre>";	    
	    text = text + "\nCommon Name:  " + ((list)issuer["CN"]:[])[0]:"";
	    text = text + "\nOrganization: " + ((list)issuer["O"]:[])[0]:"";
	    text = text + "\nLocation:     " + ((list)issuer["L"]:[])[0]:"";	    
	    text = text + "\nState:        " + ((list)issuer["ST"]:[])[0]:"";
	    text = text + "\nCountry:      " + ((list)issuer["C"]:[])[0]:"";
	    text = text + "\nEMAIL:        " + ((list)issuer["EMAILADDRESS"]:[])[0]:"";
	    text = text + "</pre>";	    
	}

	text = text + "<br>" + _("\nValid from: ") + ret["NOTBEFORE"]:"";
	text = text + "<br>" + _("\nValid to: ") + ret["NOTAFTER"]:"";
	text = text + "<br>" + "Fingerprint: " + ret["FINGERPRINT"]:"";

	return text;
	
    }

    /**
     * CA Overview ( Main Window )
     * @return  'back, 'abort
     */
    define symbol ca () ``{

	integer i = 0;
	
        // help text 1/2
        string helptext = _("<p>Here, see the most important values of the CA.</p>");
        // help text 2/2
        helptext = helptext + _("<p>Special information about the current CA is provided by <b>Certificates</b>, <b>CRL</b>, and <b>Advanced</b>.</p>");


        term contents = `VBox ();
        contents = add (contents, `RichText(`id(`textinfo),""));
        term buttons = `HBox ();
        // To translators: pushbutton label
        buttons = add (buttons,  `PushButton (`id (`certificates), _("&Certificates...")));
//        buttons = add (buttons,  `PushButton (`id (`requests), _("&Requests...")));
	buttons = add (buttons,  `PushButton (`id (`crl), _("CR&L...")));
	buttons = add (buttons,  `HStretch());
	buttons = add (buttons,  `MenuButton( _("&Advanced..."),
					      [
					       `item(`id(`information), _("&View") ),
					       `item(`id(`createSubCA), _("C&reate SubCA")),					       
					       `item(`id(`exportFile),  _("Export to &File")),
					       `item(`id(`exportLDAP),  _("Export to &LDAP")),
					       `item(`id(`editDefault), _("&Edit Default"))
					       ]
					      ));
	contents = add (contents, buttons);

                                // To translators: dialog label
        Wizard::SetContents ( _("CA Name: ") + CaMgm::currentCA, contents, helptext, true, true);
        UI::ChangeWidget( `id(`textinfo), `Value, getDescription (CaMgm::currentCA));

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

	    if (ui == `information)
	    {
		showLongDescription (CaMgm::currentCA);
	    }
	    if (ui == `exportLDAP)
	    {
		exportToLDAP ("CA", CaMgm::currentCA, "", "", "");
	    }
	    if (ui == `exportFile)
	    {
		 exportCAtoFile (CaMgm::currentCA);
	    }
	    if (ui == `editDefault)
	    {
		// initialize global variable
		CaMgm::initializeDefault = true;		    		
		CaMgm::currentDefault = "Sub CA";
	    }	    	    	    
        }
        until (contains ([`back, `abort, `certificates, `createSubCA, `crl, `editDefault, `next], ui));

        return ui;
    }

}
