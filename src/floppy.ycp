/**
 * File:	ca-management/floppy.ycp
 *
 * Package:	yast2-ca-management
 *
 * Summary:	Export/Import Certificates via floppy
 *
 * Authors:	Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Export/Import a server certificate plus correspondenting CA
 * via floppy
 */

{

    textdomain "ca-management";

    import "Label";
    import "Popup";
    import "CaMgm";
    import "Sequencer";
    import "Wizard";
    import "YaPI::CaManagement";

    /**
     * exportCertificateToFloppy() - Exporting certificate to floppy
     * @param CAname, certificate     
     * @return `next,`back,`abort          
     */
    define any exportCertificateToFloppy (string CAname, string certificate) ``{
	string floppy_device = "/dev/fd0"; // default
	boolean format_floppy = false; // default
	list<map> floppies_m = (list<map>)SCR::Read (.probe.floppy);
	string keypassword = "";
	string p12password = "";
	string tmpdir = (string) SCR::Read (.target.tmpdir);

	list<string> floppies = (list<string>)maplist (map f, floppies_m,
	    ``(f["dev_name"]:nil));
	floppies = filter (string f, floppies, ``(f != nil));

	term contents = `HSquash (
	    `VBox (
		`VSpacing (1),
		`Label (
		    // Main window contents when the floppy
		    // is about to be written.
		    // Translators: Try not to make this much longer
		    // than the English version, please...
		    _("Insert a floppy disk (1.44 MB)
into the floppy drive.
All data on this floppy will be deleted.
")),
		`VSpacing (1),
		`HSquash (
		    `ComboBox (`id (`device), `opt (`editable),
			// combo box label
			_("Floppy &Device"), floppies)
		),
		`VSpacing (2),
		`HSquash (
		    // checkbox
		    `CheckBox (`id (`format), _("&Format Floppy Disk"),
			format_floppy)
		),
		`Password( `id (`keyPassword), "&Password:"),
		`HBox(
		      `Password( `id (`PK12password), "&new Password:"),
		      `Password( `id (`verifyPassword), "&verify Password:")
		      ),		
		`VSpacing (1)
	    )
	);

	// help text 1/6	
	string help_text = _("<p><b><big>Exporting Certificate in PKCS12 
Format:</big></b><br>
Insert a floppy disk (1.44 MB) into the floppy drive
and press <b>Next</b> to continue.</p>
");
	// help text 2/6
	help_text = help_text + _("<p><b>Floppy Device:</b><br>
If your computer has multiple floppy drives, select the correct device.</p>
");
	// help text 3/6
	help_text = help_text + _("<p><b>Format Floppy Disk:</b><br>
Before a certificate is saved on the floppy, it should be formatted.
If the floppy is not preformatted, check
<b>Format Floppy Disk</b>.</p>
");
	// help text 4/6
	help_text = help_text + _("<p><b><big>Attention:</big></b> All data on the floppy will be deleted.</p>");
	// help text 5/6
	help_text = help_text + _("<p><b>Password:</b><br>
Password of the certificate.</p>");
	// help text 6/6
	help_text = help_text + _("<p><b>New Password and Verify Password:</b><br>
Password for the saved certificate.</p>
");	
	
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	Wizard::SetContents( _("Exporting Certificate to Floppy"), contents,
			     help_text,
			     true, true);

	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
	UI::ChangeWidget (`id (`device), `Value, floppy_device);

	any ret = `again;
	while (ret == `again)
	{
	    ret = UI::UserInput ();

	    if (ret == `next)
	    {
		// export to file
		floppy_device = (string)UI::QueryWidget (`id (`device), `Value);
		format_floppy = (boolean)UI::QueryWidget (`id (`format), `Value);		

		if ( UI::QueryWidget (`id(`PK12password), `Value) != UI::QueryWidget (`id(`verifyPassword), `Value))
		{
		    Popup::Error(_("New passwords do not match."));
		    ret = `again;
		}
	    }
	}

	if (ret == `next)
	{
	    // writing certificate to floppy
	    integer fd_ret = 0;
	    keypassword = (string) UI::QueryWidget (`id(`keyPassword), `Value);
	    p12password = (string) UI::QueryWidget (`id(`PK12password), `Value);
	    
	    UI::BusyCursor();

	    if (format_floppy)
	    {
		// label in a popup informing about currently processed action
		UI::OpenDialog(`VBox(`Label(_("Formatting the floppy..."))));		
		y2milestone ("Low level formating floppy");
		fd_ret = (integer) SCR::Execute (.target.bash,
						 sformat ("/usr/bin/fdformat %1", floppy_device));
		if (fd_ret != 0)
		{
		    Popup::Error(
				  // error report
				  _("An error occurred while formatting the floppy disk.
Verify that a valid floppy medium is
in the drive and that you have root permissions 
then try again.
"));
		}
		else
		{
		    y2milestone ("Creating msdosfs on floppy");
		    fd_ret = (integer) SCR::Execute (.target.bash,
						     sformat ("/sbin/mkfs.msdos %1", floppy_device));
		    if (fd_ret != 0)
		    {
			Popup::Error(
				     // error report
				     _("An error occurred while creating msdosfs on floppy."));
		    }
		}		    

		UI::CloseDialog ();		    		
	    }

	    if (fd_ret == 0)
	    {
		UI::OpenDialog(`VBox(`Label(_("Writing certificate to floppy..."))));
		    
		if (!((boolean)SCR::Execute(.target.mount, [floppy_device, tmpdir], "-t auto")))
		{
		    Popup::Error(
				 // error report
				 _("An error occurred while mounting the floppy disk.
Verify that a valid floppy medium is
in the drive and that you have root permissions 
then try again.
"));
		}
		else
		{
		    // writing CA to floppy
		    string yapiret = (string) YaPI::CaManagement::ExportCertificate ($["caName": CAname,
										       "certificate" : certificate,
										       "keyPasswd" : keypassword,
										       "exportFormat" : "PKCS12_CHAIN",
										       "destinationFile" : tmpdir + "/YaST-Servercert.p12",
										       "P12Password" : p12password
										     ]);
		    y2milestone ("ExportCertificate(%1) return %2", $["caName": CAname,
								      "certificate" : certificate,
								      "exportFormat" : "PKCS12_CHAIN",
								      "destinationFile" : tmpdir + "/YaST-Servercert.p12"
				 ], yapiret);
		    if (yapiret == nil
			|| yapiret != "1")
		    {
			showErrorCaManagement ();
		    }
		    else
		    {
			Popup::Message(_("Certificate saved to file."));
		    }		    
		}
		//unmounting media
		SCR::Execute(.target.umount, tmpdir);			    		
		
		UI::CloseDialog ();
	    }
	}
	
	UI::CloseDialog ();

	return ret;
    }

    /**
     * importCertificateFromFloppy() - Importing certificate from floppy
     * @return success
     */
    define boolean importCertificateFromFloppy () ``{
	string floppy_device = "/dev/fd0"; // default
	list<map> floppies_m = (list<map>)SCR::Read (.probe.floppy);
	string password = "";
	boolean success = true;
	string tmpdir = (string) SCR::Read (.target.tmpdir);	

	list<string> floppies = (list<string>)maplist (map f, floppies_m,
	    ``(f["dev_name"]:nil));
	floppies = filter (string f, floppies, ``(f != nil));

	term contents = `HSquash (
	    `VBox (
		`VSpacing (1),
		`Label (
		    _("Insert a floppy disk (1.44 MB)
into the floppy drive.")),
		`VSpacing (1),
		`HSquash (
		    `ComboBox (`id (`device), `opt (`editable),
			// combo box label
			_("Floppy &Device"), floppies)
		),
		`Password( `id (`password), "&Password:"),
		`VSpacing (1)
	    )
	);

	// help text 1/4
	string help_text = _("<p><b><big>Importing Common Server Certificate in PKCS12 
Format:</big></b><br>
Insert a floppy disk (1.44 MB) into the floppy drive
and press <b>Next</b> to continue.</p>
");
        // help text 2/4	
	help_text = help_text +
	    _("Import a server certificate and correspondenting CA and copy them to a place where other YaST modules look for such a common certificate.");
	
        // help text 3/4	
	help_text = help_text + _("<p><b>Floppy Device:</b><br>
If your computer has multiple floppy drives, select the correct device.</p>
");

	// help text 4/4
	help_text = help_text + _("<p><b>Password:</b><br>
Certificate password</p>
");	
	
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");
	Wizard::SetContents( _("Importing Common Certificate from Floppy"), contents,
			     help_text,
			     true, true);

	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();
	UI::ChangeWidget (`id (`device), `Value, floppy_device);

	any ret = `again;
	while (ret == `again)
	{
	    ret = UI::UserInput ();
	}

	if (ret == `next)
	{
	    // reading certificate from floppy
	    integer fd_ret = 0;
	    password = (string) UI::QueryWidget (`id(`password), `Value);
	    floppy_device = (string)UI::QueryWidget (`id (`device), `Value);
	    
	    UI::BusyCursor();

	    UI::OpenDialog(`VBox(`Label(_("Reading certificate from floppy..."))));
		    
	    if (!((boolean)SCR::Execute(.target.mount, [floppy_device, tmpdir], "-t auto")))
	    {
		Popup::Error(
			     // error report
			     _("An error occurred while mounting the floppy disk.
Verify that a valid floppy medium is
in the drive and that you have root permissions 
then try again.
"));
		success = false;
	    }
	    else
	    {
		// Reading certificate from floppy and exporting to 
		
		boolean yapiret = (boolean) YaPI::CaManagement::ImportCommonServerCertificate ($["passwd" : password,
											       "inFile" : tmpdir + "/YaST-Servercert.p12"]);
		y2milestone ("ImportCommonServerCertificate(YaST-Servercert.p12) return %1",
			     yapiret);
		if (yapiret == nil
		    || !yapiret)
		{
		    showErrorCaManagement ();
		    success = false;
		}
		else
		{
		    Popup::Message(_("Certificate has been imported."));
		}		    
		//unmounting media
		SCR::Execute(.target.umount, tmpdir);			    		
	    }
	    
	    UI::CloseDialog ();
	}
	else
	{
	    success = false;
	}
	
	UI::CloseDialog ();
	
	return success;
    }
    

/* EOF */
}
