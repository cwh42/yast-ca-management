/**
 *
 * File:
 *   new_cert_read_write.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Reading default settings; Generating CA/Request/Certificat
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Creating a new CA/Certificate
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Popup";
    import "CaManagement";

    include "ca-management/util.ycp";

    
    /**
     * Values initializing for creating CA/Certificate 
     * @return `next
     */
    define symbol new_cert_init (string kind) ``{

	CaMgm::emailList = [];
 	CaMgm::commonName = "";
 	CaMgm::CAName = "";
 	CaMgm::organisation = "";
 	CaMgm::organisationUnit = "";
 	CaMgm::locality = "";
 	CaMgm::state = "";
 	CaMgm::country = "GB";
 	CaMgm::password = "";
 	CaMgm::verifyPassword = "";
 	CaMgm::CAPassword = "";
 	CaMgm::keyLength = 1024;
 	CaMgm::validPeriod = 365;
 	CaMgm::adv_cri_ca = false;
 	CaMgm::adv_ca = "";
	CaMgm::adv_pathlen = false;
	CaMgm::adv_pathlenValue = 1;
	CaMgm::adv_cri_distribution_point = false;
	CaMgm::adv_distribution_point = "";
	CaMgm::adv_challange_password = "";
 	CaMgm::adv_cri_issuer_alt_name = false;
 	CaMgm::adv_copy_issuer_alt_name = false;
	CaMgm::adv_issuer_alt_name_list = [];
 	CaMgm::adv_cri_key_usage = false;
 	CaMgm::adv_digitalSignature = false;
 	CaMgm::adv_nonRepudiation = false;
	CaMgm::adv_cRLSign = false;
	CaMgm::adv_keyEncipherment = false;
	CaMgm::adv_dataEncipherment = false;
	CaMgm::adv_encipherOnly = false;
	CaMgm::adv_keyAgreement = false;
	CaMgm::adv_keyCertSign = false;
	CaMgm::adv_decipherOnly = false;
	CaMgm::adv_cri_nsComment = false;
	CaMgm::adv_nsComment = "";
	CaMgm::adv_cri_nsCertType = false;
	CaMgm::adv_client = false;
	CaMgm::adv_server = false;
	CaMgm::adv_sslCA = false;
	CaMgm::adv_email = false;
	CaMgm::adv_reserved = false;
	CaMgm::adv_emailCA = false;
	CaMgm::adv_objectSign = false;
	CaMgm::adv_objCA = false;
	CaMgm::adv_cri_nsSslServerName = false;
	CaMgm::adv_nsSslServerName = "";
 	CaMgm::adv_cri_subject_alt_name = false;
 	CaMgm::adv_copy_subject_alt_name = false;
	CaMgm::adv_subject_alt_name_list = [];
	CaMgm::adv_unstructured_name = "";
	CaMgm::exp_cri_SubjectKeyIdentifier = false;
	CaMgm::exp_SubjectKeyIdentifier = "";
	CaMgm::exp_cri_AuthorityKeyIdentifier = false;
	CaMgm::exp_AuthorityKeyIdentifier = "";
	CaMgm::exp_cri_netscape_nsBaseUrl = false;
	CaMgm::exp_netscape_nsBaseUrl = "";
 	CaMgm::exp_cri_netscape_nsRevocationUrl = false;
	CaMgm::exp_netscape_nsRevocationUrl = "";
	CaMgm::exp_cri_netscape_nsCaRevocationUrl = false;
	CaMgm::exp_netscape_nsCaRevocationUrl = "";
	CaMgm::exp_cri_netscape_nsRenewalUrl = false;
	CaMgm::exp_netscape_nsRenewalUrl = "";
 	CaMgm::exp_cri_netscape_nsCaPolicyUrl = false;
	CaMgm::exp_netscape_nsCaPolicyUrl = "";
	CaMgm::exp_cri_authorityInfoAccess = false;
	CaMgm::exp_authorityInfoAccess = "";
	CaMgm::exp_cri_extendedKeyUsage = false;
	CaMgm::exp_extendedKeyUsage = "";

	
	map ret = (map) CaManagement::ReadCertificateDefaults ($["certType":kind]);
	if (ret == nil)
	{
	    Popup::Error (_("Cannot read default certificate."));
	    return `next;
	}
	
	y2milestone("ReadCertificateDefaults: %1", ret);

 	CaMgm::keyLength = tointeger(ret["keyLength"]:"");
 	CaMgm::validPeriod = tointeger(ret["days"]:"");
	
	list dummy = splitstring (ret["basicConstraints"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_ca = true;
	    }
	    if (ident == "CA")
	    {
		CaMgm::adv_ca = ident + ":" + value;
	    }
	    if (ident == "pathlen")
	    {
		CaMgm::adv_pathlen = true;
		CaMgm::adv_pathlenValue = tointeger (value);
	    }
	});

	dummy = splitstring (ret["crlDistributionPoints"]:"", ",");
	integer counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_distribution_point = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::adv_distribution_point = CaMgm::adv_distribution_point +
			ident + ":" + value;
		}
		else
		{
		    CaMgm::adv_distribution_point = CaMgm::adv_distribution_point +
			"," + ident + ":" + value;
		}
		counter = counter +1;		
	    }
	});

	dummy = splitstring (ret["issuerAltName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_issuer_alt_name = true;
	    }
	    else if (ident == "issuer"
		     && value == "copy")
	    {
		CaMgm::adv_copy_issuer_alt_name = true;
	    }
	    else
	    {
		map new_entry = $[];
		new_entry["kind"] = ident;
		new_entry["name"] = value;
		CaMgm::adv_issuer_alt_name_list	= add (CaMgm::adv_issuer_alt_name_list, new_entry);
	    }
	});

	dummy = splitstring (ret["keyUsage"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_key_usage = true;
	    }
	    else if (entry == "digitalSignature")
	    {
		CaMgm::adv_digitalSignature = true;
	    }
	    else if (entry == "nonRepudiation")
	    {
		CaMgm::adv_nonRepudiation = true;
	    }
	    else if (entry == "cRLSign")
	    {
		CaMgm::adv_cRLSign = true;
	    }
	    else if (entry == "keyEncipherment")
	    {
		CaMgm::adv_keyEncipherment = true;
	    }
	    else if (entry == "dataEncipherment")
	    {
		CaMgm::adv_dataEncipherment = true;
	    }
	    else if (entry == "encipherOnly")
	    {
		CaMgm::adv_encipherOnly = true;
	    }
	    else if (entry == "keyAgreement")
	    {
		CaMgm::adv_keyAgreement = true;
	    }
	    else if (entry == "keyCertSign")
	    {
		CaMgm::adv_keyCertSign = true;
	    }
	    else if (entry == "decipherOnly")
	    {
		CaMgm::adv_decipherOnly = true;
	    }	    	    	    	    	    
	});

	dummy = splitstring (ret["nsComment"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsComment = true;
	    }
	    else
	    {
		CaMgm::adv_nsComment = entry;
	    }
	});

	dummy = splitstring (ret["nsCertType"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsCertType = true;
	    }
	    else if (entry == "client")
	    {
		CaMgm::adv_client = true;
	    }
	    else if (entry == "server")
	    {
		CaMgm::adv_server = true;
	    }
	    else if (entry == "sslCA")
	    {
		CaMgm::adv_sslCA = true;
	    }
	    else if (entry == "email")
	    {
		CaMgm::adv_email = true;
	    }	    
	    else if (entry == "reserved")
	    {
		CaMgm::adv_reserved = true;
	    }	    	
	    else if (entry == "emailCA")
	    {
		CaMgm::adv_emailCA = true;
	    }
	    else if (entry == "objsign")
	    {
		CaMgm::adv_objectSign = true;
	    }
	    else if (entry == "objCA")
	    {
		CaMgm::adv_objCA = true;
	    }
	});
	    
	dummy = splitstring (ret["nsSslServerName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::adv_cri_nsSslServerName = true;
	    }
	    else
	    {
		CaMgm::adv_nsSslServerName = entry;
	    }
	});
	
	dummy = splitstring (ret["subjectAltName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_subject_alt_name = true;
	    }
	    else if (ident == "email"
		     && value == "copy")
	    {
		CaMgm::adv_copy_subject_alt_name = true;
	    }
	    else
	    {
		map new_entry = $[];
		new_entry["kind"] = ident;
		new_entry["name"] = value;
		CaMgm::adv_subject_alt_name_list = add (CaMgm::adv_subject_alt_name_list, new_entry);
	    }
	});

	dummy = splitstring (ret["subjectKeyIdentifier"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_SubjectKeyIdentifier = true;
	    }
	    else
	    {
		CaMgm::exp_SubjectKeyIdentifier = entry;
	    }
	});
	
	dummy = splitstring (ret["authorityKeyIdentifier"]:"", ",");
	counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_AuthorityKeyIdentifier = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_AuthorityKeyIdentifier = CaMgm::exp_AuthorityKeyIdentifier +
			ident + ":" + value;
		}
		else
		{
		    CaMgm::exp_AuthorityKeyIdentifier = CaMgm::exp_AuthorityKeyIdentifier +
			"," + ident + ":" + value;
		}
		counter = counter +1;
	    }
	});

	dummy = splitstring (ret["nsBaseUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsBaseUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsBaseUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsRevocationUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsRevocationUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsRevocationUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsCaRevocationUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsCaRevocationUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsCaRevocationUrl = entry;
	    }
	});

	dummy = splitstring (ret["nsRenewalUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsRenewalUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsRenewalUrl = entry;
	    }
	});		

	dummy = splitstring (ret["nsCaPolicyUrl"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    if (entry == "critical")
	    {
		CaMgm::exp_cri_netscape_nsCaPolicyUrl = true;
	    }
	    else
	    {
		CaMgm::exp_netscape_nsCaPolicyUrl = entry;
	    }
	});		
	
	dummy = splitstring (ret["authorityInfoAccess"]:"", ",");
	counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_authorityInfoAccess = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			ident + ":" + value;
		}
		else
		{
		    CaMgm::exp_authorityInfoAccess = CaMgm::exp_authorityInfoAccess +
			"," + ident + ":" + value;
		}
		counter = counter +1;				
	    }
	});

	dummy = splitstring (ret["extendedKeyUsage"]:"", ",");
	counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_extendedKeyUsage = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			ident + ":" + value;
		}
		else
		{
		    CaMgm::exp_extendedKeyUsage = CaMgm::exp_extendedKeyUsage +
			"," + ident + ":" + value;
		}
		counter = counter +1;			
	    }
	});

	return `next;
    }


}
