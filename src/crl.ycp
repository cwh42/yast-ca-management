/**
 *
 * File:
 *   crl.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * CRL of a selected CA
 *
 */
{
    textdomain "ca-management";
    
    include "ca-management/crlDefault.ycp";

    // help text 1/4
    string CRLHelptext = _("<p>Here, see the most important values of the CRL.</p>");
    // help text 2/4
    CRLHelptext = CRLHelptext + _("<p>With <b>Generate CRL</b>, a new CRL will be generated.</p>");
    // help text 3/4
    CRLHelptext = CRLHelptext + _("<p><b>View</b> shows a complete description.</p>");	
    // help text 4/4
    CRLHelptext = CRLHelptext + _("<p>You can <b>Export</b> the CRL to a file or LDAP Directory.</p>");
    

    /**
     * createCRL -  creating new CRL
     * @param CA name
     * @return `again
     */
    
    define symbol createCRL(string CAname)``{

	// asking user
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Generate New CRL")),
				      `VSpacing (1),
				      `IntField( `id (`entry), _("&Valid to (days):"), 1, 10000, 30),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`entry));
	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    integer days = (integer) UI::QueryWidget(`id(`entry), `Value);
	    if (ui == `ok)
	    {
		// generating CRL
		boolean ret = nil;
		ret = (boolean) YaPI::CaManagement::AddCRL ($["caName"  : CAname,
							"caPasswd": getPassword(CaMgm::currentCA),
							"days"    : tostring(days)]);
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
	
	return `again;
    }


    /**
     * showLongCRLDescription - description of a CRL in textform
     * @param CA name
     */
    define string showLongCRLDescription (string CAname) ``{

	string ret = (string) YaPI::CaManagement::ReadCRL ($["caName":CAname,
							     "type":"plain"]);
	
	y2milestone("ReadCRL(%1): %3", CAname, ret);
	ret = "<pre>" + ret + "</pre>";
	
        if (ret == nil)
        {
            showErrorCaManagement ();
        }
	else
	{
	    UI::OpenDialog (`opt(`decorated ),
			    `HBox( `VSpacing(16),
				   `VBox (
					  `HSpacing (100),
					  // popup window header
					  `Heading (_("Description")),
					  `VSpacing (0.5),
					  `RichText (ret),
					  `VSpacing (1.5),
					  // push button label
					  `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
					  )
				   )
			    );

	    UI::SetFocus (`id(`ok));
	    UI::UserInput ();
	    UI::CloseDialog ();	    
	}	
    }

    /**
     * getDescription - CRL description
     * @param CA name
     * @return a string with the CRL description
     */
    define string getCRLDescription (string CAname) ``{
	map ret = (map) YaPI::CaManagement::ReadCRL ($["caName":CAname, "type":"parsed"]);
        if (ret == nil)
        {
	    map<string,any> messageMap = YaPI::Error();
	    string message = messageMap["summary"]:"";
	    string description = messageMap["description"]:"";
	    if (size (message) > 0)
	    {
		string retString = "\n";
		retString = retString + message + "\n";
		retString = retString + description;
		return retString;
	    }
        }
	y2milestone("ReadCRL(%1): %2", CAname, ret);

	string text = _("<b>Certificate Revocation List (CRL):</b>");
	text = text + "<pre>";
	text = text + "\nVersion: " + ret["VERSION"]:"";
	text = text + "\nSignature Algorithmus: " + ret["SIGNATURE_ALGORITHM"]:"";
	text = text + "\nIssuer: " + ret["ISSUER"]:"";
	text = text + _("\n\nLast Update: ") + ret["LASTUPDATE"]:"";
	text = text + _("\nNext Update: ") + ret["NEXTUPDATE"]:"";
	integer counter = 0;
	foreach (map element, ret["REVOKED_PARSED"]:[], ``{
	    if (counter == 0)
	    {
		text = text + _("\n\nRevoked Certificates: ");
	    }
	    counter = counter +1;
	    string reason = element["REASON"]:"";
	    reason = deletechars (reason, "\n");
	    text = text + "\n     Serial Number: " + element["SERIAL"]:"";
	    text = text + "\n            Date:   " + element["DATE"]:"";
	    text = text + "\n            Reason: " + reason;
	});
	
	return text;
	
    }

    /**
     * Dialog Tab - CRL - 
     * @return term for the CRL of a selected CA
     */
    term getCRLTab () {
        term contents = `VBox (
			       `VSpacing (1),
			       `HBox (
				      `HSpacing (1),
				      `RichText(`id(`textinfo),""),
				      `HSpacing (1)
				      ),
			       `HBox (
				      `HSpacing (1),
				      `PushButton (`id (`gererateCRL), _("&Generate CRL")),
				      `PushButton (`id (`view) , _("View")),
				      `PushButton (`id (`defaults) , _("Default")),
				      `HStretch(),
				      `MenuButton (_("Export"),
						   [
						    `item(`id(`exportFile), _("to &File") ),
						    `item(`id(`exportLDAP), _("to &LDAP"))
						    ]
						   ),
				      `HSpacing (1)
				      )
			       );
	return contents;
    }

    /**
     * Initialize the tab of the dialog
     */
    void initCRLTab () {
        UI::ChangeWidget( `id(`textinfo), `Value, getCRLDescription (CaMgm::currentCA));	
    }


    /**
     * Handle events in a tab of a dialog
     */
    symbol handleCRLTab (map event) {
	any ui = event["ID"]:nil;    
	if (ui == `gererateCRL)
	{
	    createCRL (CaMgm::currentCA);
	    ui = `again;
	}
	if (ui == `view)
	{
	    showLongCRLDescription (CaMgm::currentCA);
	}	    	
	if (ui == `exportLDAP)
	{
	    exportToLDAP ("CRL", CaMgm::currentCA, "" ,"", "");
	}
	if (ui == `exportFile)
	{
	    exportCRLtoFile (CaMgm::currentCA); 
	}
	if (ui == `defaults)
	{
	    editCRLDefaults (CaMgm::currentCA); 
	}	
	return (symbol) ui;	
    }

}
