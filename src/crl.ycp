/**
 *
 * File:
 *   crl.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * CRL of a selected CA
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";

    /**
     * getDescription - CRL description
     * @param CA name
     * @return `again
     */
    
    define symbol createCRL(string CAname)``{

	// asking user
	UI::OpenDialog (`opt(`decorated ),
			`HBox( `HSpacing(2),
			       `VBox (
				      `VSpacing (1),
				      // popup window header
				      `Heading (_("Generate new CRL")),
				      `VSpacing (1),
				      `IntField( `id (`entry), _("&Valid to (days):"), 1, 10000, 30),
				      `VSpacing (1),					  
				      `HBox (  // push button label
					     `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton()),
					     `HStretch(),
					     `PushButton (`id(`cancel), `opt( `key_F9), Label::AbortButton())
					     ),
				      `VSpacing (1)					  
				      ),
			       `HSpacing (2)
			       )
			);

	UI::SetFocus (`id(`entry));
	symbol ui = nil;
	repeat
 	{
	    ui = (symbol) UI::UserInput ();
	    integer days = (integer) UI::QueryWidget(`id(`entry), `Value);
	    if (ui == `ok)
	    {
		// generating CRL
		boolean ret = nil;
		ret = (boolean) YaPI::CaManagement::AddCRL ($["caName"  : CAname,
							"caPasswd": getPassword(CaMgm::currentCA),
							"days"    : tostring(days)]);
		if (ret == nil
		    || ret == false)
		{
		    showErrorCaManagement ();
		}
	    }
	}
	until (contains ([`ok, `cancel], ui));
	UI::CloseDialog ();
	
	return `again;
    }
    

    /**
     * getDescription - CRL description
     * @param CA name
     * @return a string with the CRL description
     */
    define string getCRLDescription (string CAname) ``{
	map ret = (map) YaPI::CaManagement::ReadCRL ($["caName":CAname, "type":"parsed"]);
        if (ret == nil)
        {
            showErrorCaManagement ();
            return _("<br>CRL not found");
        }
	y2milestone("ReadCRL(%1): %2", CAname, ret);

	string text = _("<h4>Certificate Revocation List (CRL):</h4>");
	text = text + "<pre>";
	text = text + "<br>Version: " + ret["VERSION"]:"";
	text = text + "<br>Signature Algorithmus: " + ret["SIGNATURE_ALGORITHM"]:"";
	text = text + "<br>Issuer: " + ret["ISSUER"]:"";
	text = text + _("<br>Last Update: ") + ret["LASTUPDATE"]:"";
	text = text + _("<br>Next Update: ") + ret["NEXTUPDATE"]:"";
	
	return text;
	
    }

    /**
     * CRL Overview 
     * @return  'back, 'abort
     */
    define symbol crl () ``{

	integer i = 0;
	
        // help text 1/4
        string helptext = _("<p>Here you can see a text representation of the CRL.</p>");
        // help text 2/4
        helptext = helptext + _("<p>With the Button <b>generate CRL</b> a new CRL will be generated.</p>");
        // help text 3/4
        helptext = helptext + _("<p>With the button <b>Export to LDAP</b> the CRL and the CA are Exported to a LDAP Directory.</p>");
        // help text 4/4
        helptext = helptext + _("<p>With the button <b>Export as File</b> the CRL is exported as file in different formats.</p>");	

        term contents = `VBox ();
        contents = add (contents, `RichText(`id(`textinfo),""));
        term buttons = `HBox ();
        // To translators: pushbutton label
        buttons = add (buttons,  `PushButton (`id (`gererateCRL), _("&Generate CRL")));
	buttons = add (buttons,  `HStretch());
	buttons = add (buttons,  `MenuButton( _("Export"),
					      [
					       `item(`id(`exportFile), _("to &File") ),
					       `item(`id(`exportLDAP), _("to &LDAP"))
					       ]
					      ));
	
	contents = add (contents, buttons);

                                // To translators: dialog label
        Wizard::SetContents ( _("Certificate Revocation List (CRL) for CA: ") + CaMgm::currentCA, contents, helptext, true, false);
        UI::ChangeWidget( `id(`textinfo), `Value, getCRLDescription (CaMgm::currentCA));

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();
	    if (ui == `gererateCRL)
	    {
		ui = createCRL (CaMgm::currentCA);
	    }
	    if (ui == `exportLDAP)
	    {
		exportToLDAP ("CRL", CaMgm::currentCA, "" ,"", "");
	    }
	    if (ui == `exportFile)
	    {
		exportCRLtoFile (CaMgm::currentCA); 
	    }	    
        }
        until (contains ([`back, `abort, `createSubCA, `again], ui));

        return ui;
    }

}
