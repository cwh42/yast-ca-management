/**
 * File:        include/ca-management/commandline.ycp
 * Package:     Configuration of CAs
 * Summary:     Commandline definitions
 * Authors:     Stefan Schubert (schubi@suse.de)
 *
 * $Id$
 */

{

    textdomain "ca-management";

    import "CaMgm";    
    import "YaPI::CaManagement";

    include "ca-management/popup.ycp";
    include "ca-management/util.ycp";
    include "ca-management/new_cert_read_write.ycp";

    /**
     * Create CA via command line
     * @param option map
     * @return success
     */
    define boolean cmdCreateCA(map options) ``{
	new_cert_init ("Root CA");
	CaMgm::CAName = options["caname"]:"";
	CaMgm::commonName = options["cn"]:"";
	CaMgm::emailList = [$["default":true, "name": options["email"]:""]];
	CaMgm::organisationUnit = options["ou"]:"";
	CaMgm::organisation = options["o"]:"";
	CaMgm::locality = options["l"]:"";
	CaMgm::state = options["st"]:"";
	CaMgm::country = options["c"]:"";
	CaMgm::validPeriod = tointeger (options["days"]:"365");
	CaMgm::keyLength = tointeger (options["keyLength"]:"1024");
	if (haskey (options, "keyPasswd"))
	{
	    CaMgm::password = options["keyPasswd"]:"";
	}
	else
	{
	    CaMgm::password = strip(getenv("keyPasswd"));
	}
	if (!cert_write ("Root CA"))
	{
	    showErrorCaManagement ();
	    return false;
	}
	return true;
    }

    /**
     * Create a certificate via command line
     * @param option map
     * @return success
     */
    define boolean cmdCreateCertificate(map options) ``{
	CaMgm::CAName = options["caname"]:"";
	CaMgm::currentCA = options["caname"]:"";
	
	if (options["type"]:"" == "client")
	{
	    new_cert_init ("Client Certificate");
	}
	else if (options["type"]:"" == "server")
	{
	    new_cert_init ("Server Certificate");	    
	}
	else
	{
	    CommandLine::Print (_("Wrong kind of certificate."));
	    return false;
	}
	
	CaMgm::CAName = options["caname"]:"";
	CaMgm::commonName = options["cn"]:"";
	CaMgm::emailList = [$["default":true, "name": options["email"]:""]];
	CaMgm::organisationUnit = options["ou"]:"";
	CaMgm::organisation = options["o"]:"";
	CaMgm::locality = options["l"]:"";
	CaMgm::state = options["st"]:"";
	CaMgm::country = options["c"]:"";
	CaMgm::validPeriod = tointeger (options["days"]:"365");
	CaMgm::keyLength = tointeger (options["keyLength"]:"1024");
	if (haskey (options, "keyPasswd"))
	{
	    CaMgm::password = options["keyPasswd"]:"";
	}
	else
	{
	    CaMgm::password = strip(getenv("keyPasswd"));
	}

	if (haskey (options, "capasswd"))
	{
	    CaMgm::passwdMap[CaMgm::CAName] = options["capasswd"]:"";
	}
	else
	{
	    CaMgm::passwdMap[CaMgm::CAName] = strip(getenv("capasswd"));
	}

	boolean ret = true;
	if (options["kind"]:"" == "client")
	{
	    if (!cert_write ("Client Certificate"))
	    {
		showErrorCaManagement ();
		ret = false;
	    }
	}
	else
	{
	    if (!cert_write ("Server Certificate"))
	    {
		showErrorCaManagement ();
		ret = false;
	    }		
	}
	return ret;
    }

    /**
     * Create a CRL via command line
     * @param option map
     * @return success
     */
    define boolean cmdCreateCRL(map options) ``{
	// generating CRL
	boolean ret = nil;
	map <string, any> param = $[];
	
	if (haskey (options, "capasswd"))
	{
	    param["caPasswd"] = options["capasswd"]:"";
	}
	else
	{
	    param["caPasswd"] = strip(getenv("capasswd"));
	}
	param["caName"] = options["caname"]:"";
	param["days"] = tointeger (options["days"]:"365");	
	
	ret = (boolean) YaPI::CaManagement::AddCRL (param);
	if (ret == nil
	    || ret == false)
	{
	    showErrorCaManagement ();
	    return false;
	}	
	return ret;
    }
    
    /**
     * Dialog for exporting CA to file
     * @param option map     
     * @return true ( success )
     */
    define boolean cmdExportCAtoFile (map options) ``{
	map <string, any> param = $[];
	string kind = options["certFormat"]:"";	

	if (!haskey (options, "capasswd"))
	{
	    options["capasswd"] = strip(getenv("capasswd"));
	}
	
	param["caPasswd"] = options["capasswd"]:"";
	param["caName"] = options["caname"]:"";
	param["destinationFile"] =  options["file"]:"";
	param["exportFormat"] = kind;

	string ret = nil;
	if (kind == "PKCS12"
	    || kind == "PKCS12_CHAIN")
	{
	    if (!haskey (options, "p12passwd"))
	    {
		options["p12passwd"] = strip(getenv("p12passwd"));
	    }
	    param["P12Password"] = options["p12passwd"]:"";
	}
	ret = (string) YaPI::CaManagement::ExportCA (param);
	
	y2milestone ("ExportCA(to %1) return %2", options["file"]:"", ret);
	if (ret == nil
	    || ret != "1")
	{
	    showErrorCaManagement ();
	    return false;
	}
	return true;
    }        

    /**
     * exporting CRL to file
     * @param option map          
     * @return true ( success )
     */
    define boolean cmdExportCRLtoFile (map options) ``{
	map <string, any> param = $[];
	
	param["destinationFile"] =  options["file"]:"";
	param["exportFormat"] = options["crlFormat"]:"";
	param["caName"] = options["caname"]:"";

	string ret = nil;
	ret = (string) YaPI::CaManagement::ExportCRL (param);
		    
	y2milestone ("ExportCRL(%1) return %2", param, ret);
	if (ret == nil
	    || ret != "1")
	{
	    showErrorCaManagement ();
	    return false;
	}
	return true;
    }

    /**
     * exporting Certificate to file
     * @param option map               
     * @return true ( success )
     */
    define boolean cmdExportCertificateToFile (map options) ``{
	map <string, any> param = $[];
	string kind = options["certFormat"]:"";	

	if (!haskey (options, "keyPasswd"))
	{
	    options["keyPasswd"] = strip(getenv("keyPasswd"));
	}

	param["caName"] = options["caname"]:"";
	param["certificate"] = options["certname"]:"";
	param["exportFormat"] = kind;
	param["destinationFile"] =  options["file"]:"";	
	param["keyPasswd"] = options["keyPasswd"]:"";

	string ret = nil;
	if (kind == "PKCS12"
	    || kind == "PKCS12_CHAIN")
	{
	    if (!haskey (options, "p12passwd"))
	    {
		options["p12passwd"] = strip(getenv("p12passwd"));
	    }
	    param["P12Password"] = options["p12passwd"]:"";	    
	}
	
	ret = (string) YaPI::CaManagement::ExportCertificate (param);

	y2milestone ("ExportCertificate(to %1) return %2",
		     options["file"]:"",
		     ret);
	if (ret == nil
	    || ret != "1")
	{
	    showErrorCaManagement ();
	    return false;
	}
	return true;
    }

    
    
// EOF
}

