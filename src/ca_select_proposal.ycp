/**
 * File:
 *	ca_select_proposal.ycp
 *
 * Module:
 *	ca_select_proposal.ycp
 *
 * Authors:
 *	Stefan Schubert <schubi@suse.de>
 *
 * Summary:
 *	
 *
 * $Id$
 *
 */
{
    textdomain "ca-management";
    import "CaMgm";

    import "Mode";
    import "Wizard";
    import "Label";
    import "Popup";
    
    include "ca-management/popup.ycp";
    include "ca-management/util.ycp";

    /**
     * Creates Country items
     * @return a list country items formated for a UI table
     */
    define list<term> getPropCountryList () ``{
        list<term> result = [];
	map<string, string> country_map = (map<string, string>)
	    eval(SCR::Read(.target.yast2, "country.ycp"));

	map<string, string> country_index = mapmap (string k, string v,
						  country_map, { return ($[v : k]); });

	list<string> name_list = maplist ( string k, string v,
					  country_map, { return v; });

	name_list = sort (name_list);
	    
	foreach (string name, name_list, ``{
	    result = add (result, `item (`id (country_index[name]:""), name ,
					 CaMgm::prop_country == country_index[name]:"") );
	});
        return result;	
    }

    define list editAltNames( list<map> initial_set ){
        term alt_dialog = `HBox( `VSpacing(10),
                                 `VBox (`HSpacing(10),
                                        `RadioButtonGroup(`id(`rb),
                                                          `HBox(
                                                                `RadioButton(`id("URI"), `opt(`notify), "URI", true),
                                                                `RadioButton(`id("email"), `opt(`notify), "email"),
                                                                `RadioButton(`id("DNS"), `opt(`notify), "DNS"),
                                                                `RadioButton(`id("IP"), `opt(`notify), "IP"),
                                                                `RadioButton(`id("RID"), `opt(`notify), "RID"),
                                                                `RadioButton(`id("MS-UPN"), `opt(`notify), "MS-UPN"),
                                                                `RadioButton(`id("K5PN"), `opt(`notify), "K5PN")
                                                         )),
                                        `TextEntry(`id(`name), _("&Name:")),
                                        // push button label
                                        `HBox(`PushButton (`id(`cancel), `opt(`key_F9), Label::CancelButton()),
                                              `HStretch(),
                                              `PushButton (`id(`ok), `opt(`default, `key_F10), Label::OKButton())
                                             ),
                                        `HSpacing(10)
                                  ),
                                  `VSpacing(10)
                                );
        UI::OpenDialog ( 
            `VBox ( `Left (`CheckBox(`id(`id_adv_cri_subject_alt_name),
                                     _("critical"),
                                     CaMgm::prop_adv_cri_issuer_alt_name
                    )),
                    `VSpacing(1.5),
                    `HBox(
                          `VSpacing(5),
                          `HWeight (3, `Table (`id (`id_adv_subject_alt_name),
                                               `header (
                                                          // To translators: table headers
                                                          _("Kind"),
                                                          _("Name")
                                                        )
                                   )),
                          `HWeight (1, `VBox(
                                             `HBox ( `HWeight (1,`PushButton (`id (`add),
                                                                              `opt (`key_F3),
                                                                              Label::AddButton()
                                                   ))),
                                             `HBox ( `HWeight (1,`PushButton (`id (`edit),
                                                                              `opt (`key_F3),
                                                                              Label::EditButton()
                                                   ))),
                                             `HBox ( `HWeight (1,`PushButton (`id (`delete),
                                                                              `opt (`key_F5),
                                                                              Label::DeleteButton()
                                                   ))),
                                             `VStretch()
                     ))),
                     `VSpacing(1.5),
                     `ButtonBox(`PushButton(`id(`ok),`opt(`key_F10),Label::OKButton()),
                                `PushButton (`id(`cancel),`opt(`key_F9,`default), Label::CancelButton())
                               )
                   ));
        any ret = nil;
        do {
	    integer i = 0;
            list<term> table_list = maplist( map element, initial_set, ``{
		i = i + 1;
                return `item (`id (i), element["kind"]:"", element["name"]:"" );
            });
            UI::ChangeWidget(`id(`id_adv_subject_alt_name), `Items, table_list);
            ret = UI::UserInput();
            if (ret == `add || ret == `edit ){
                string current_kind = "";
                string current_name = "";
                if (ret == `edit){
                    integer current_item  = (integer)UI::QueryWidget(`id(`id_adv_subject_alt_name), `CurrentItem);
                    term table_item = (term) UI::QueryWidget(`id(`id_adv_subject_alt_name), `Item(current_item));
                    if (table_item == nil)
                    {
                        Popup::Error (_("No item has been selected."));
                        continue;
                    }

                    current_kind = (string) table_item[1]:"";
                    current_name = (string) table_item[2]:"";
                }
                UI::OpenDialog (`opt(`decorated ),alt_dialog);
                UI::SetFocus (`id(`ok));
                if (ret == `edit){
		    UI::ChangeWidget(`id(`name), `Value, current_name);
		    UI::ChangeWidget(`id(`rb), `CurrentButton, current_kind);
		}
                if(!CaMgm::adv_subject_alt_name_show_email)
                {
                    UI::ChangeWidget(`id("email"), `Enabled, false);
                } else {
                    UI::ChangeWidget(`id("email"), `Enabled, true);
                }
                while (true)
                {
                    any ret2 = UI::UserInput();
                    if (ret2 == `ok)
                    {
                        map new_entry = (ret==`add) ? $[] :
                                find(map m,initial_set,
                                     ``{return (m["kind"]:"" == current_kind && m["name"]:"" == current_name);});
                        new_entry["kind"] = (string) UI::QueryWidget(`id(`rb), `CurrentButton);
                        new_entry["name"] = (string) UI::QueryWidget(`id(`name), `Value);
                        if (ret == `add)
                        {
                            initial_set       = add (initial_set, new_entry);
                        }
                        break;
                    }
                    else if (ret2 == `cancel)
                    {
                        break;
                    }
                }
                UI::CloseDialog ();
            } else if (ret == `delete) {
                integer current_item  = (integer)UI::QueryWidget(`id(`id_adv_subject_alt_name), `CurrentItem);
                term table_item = (term) UI::QueryWidget(`id(`id_adv_subject_alt_name), `Item(current_item));

                if (table_item == nil)
                {
                    Popup::Error (_("No item has been selected."));
                    continue;
                }
                string current_kind = (string) table_item[1]:"";
                string current_name = (string) table_item[2]:"";

                if (Popup::YesNoHeadline (
                        // To translators: ContinueCancel Popup headline
                        _("Delete"),
                        // To translators: ContinueCancel Popup
                        _("Really delete this entry?")))
                {
                    initial_set = filter( map element, initial_set, ``{    
                          return (element["kind"]:"" != current_kind || element["name"]:"" != current_name );
                        });
                }
            }
        } while ( ret != `ok && ret != `cancel );
	boolean ca_crit = (boolean) UI::QueryWidget(`id(`id_adv_cri_subject_alt_name), `Value);
	UI::CloseDialog();
        return (ret == `ok) ? [initial_set,ca_crit] : nil; 
    }
    
    
    /**
     * editDefaultEntries() - changing Entries
     * @return `next,`back,`abort     
     */
    define any editDefaultEntries () ``{

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("ca-management");    
	string help_text = _("<p>
YaST generates a <b>default CA and certificate</b> automatically. This CA and certificate
is used for communicating with the <b>Apache server</b>.
Here, change these <b>default settings</b>.
</p>
");	
	define string confirmPassword = CaMgm::prop_password;

	term contents = `VBox (
			       `HBox(`HWeight (1,`TextEntry( `id (`id_CAName), _("&CA Name:"),
							     CaMgm::prop_CAName )),
				     `HSpacing(2), 
				     `HWeight (1,`TextEntry( `id (`id_commonName), _("&Common Name:"),
							     CaMgm::prop_ca_commonName ))
				     ),
			       `HBox(`HWeight (1,`TextEntry( `id (`id_serverName), _("&Server Name:"),
							     CaMgm::prop_server_commonName )),
				     `HSpacing(2), 
				     `HWeight (1,`ComboBox( `id (`id_country), `opt(`editable), _("C&ountry:"),
							    getPropCountryList()))
				     ),				     
			       `HBox(`HWeight (1,`TextEntry( `id (`id_organisation), _("O&rganization:"),
							     CaMgm::prop_organisation )),
				     `HSpacing(2), 
				     `HWeight (1,`TextEntry( `id (`id_organisationUnit), _("Or&ganizational Unit:"),
							     CaMgm::prop_organisationUnit ))
				     ),
			       `HBox(`HWeight (1,`TextEntry( `id (`id_locality), _("Loca&lity:"),
							     CaMgm::prop_locality )),
				     `HSpacing(2), 
				     `HWeight (1,`TextEntry( `id (`id_state), _("&State:"),
							     CaMgm::prop_state ))),
			       `HBox(`HWeight (1,`Password(`id(`pw1), `opt(`hstretch), _("&Password:"), CaMgm::prop_password)),
				     `HSpacing(2), 
				     `HWeight (1,`Password(`id(`pw2), `opt(`hstretch), _("Co&nfirm Password"), confirmPassword))
                                    ),
			       `HBox(`HWeight (1,`TextEntry(`id(`email), _("E-Mail"), CaMgm::prop_email)),
				     `HSpacing(2), 
				     `HWeight (1,`PushButton(`id(`alt), _("&Edit Alternative Names")))
                                     )
			       );

	// Screen title for the first interactive dialog
	Wizard::SetContentsButtons (_("Edit Default Settings"),
				    contents, help_text,
				    Label::BackButton(), Label::NextButton());


        string valid_chars = ",.:;#'+*~?][(){}/§&%$\"!@0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_- ";
        UI::ChangeWidget(`id(`id_commonName),       `ValidChars, valid_chars);
        UI::ChangeWidget(`id(`id_organisation),     `ValidChars, valid_chars);
        UI::ChangeWidget(`id(`id_organisationUnit), `ValidChars, valid_chars);
        UI::ChangeWidget(`id(`id_locality),         `ValidChars, valid_chars);
        UI::ChangeWidget(`id(`id_state),            `ValidChars, valid_chars);
		y2milestone("%1", valid_chars);
        UI::ChangeWidget(`id(`id_CAName), `ValidChars, "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-");

	// Get the user input.
	//
	any ret = nil;
        list<map> temp_alt_names = CaMgm::prop_subject_alt_name_list;
        boolean temp_cri_alt = CaMgm::prop_adv_cri_issuer_alt_name;

	repeat
	    {
		ret = Wizard::UserInput();

                if (ret == `alt)
                {
                    any ret = editAltNames(temp_alt_names);
                    if (ret != nil)
                        temp_alt_names = ((list)ret)[0]:temp_alt_names;
                        temp_cri_alt = ((list)ret)[1]:temp_cri_alt;
                }
		else if (ret == `next
		    ||ret == `back)
		{
		    confirmPassword = (string) UI::QueryWidget(`id(`pw2), `Value);
		    if ((string) UI::QueryWidget(`id(`pw1), `Value) != confirmPassword)
		    {
			Popup::Error(_("New passwords do not match."));
			ret = `again;
		    }
		    else if ( size(confirmPassword) < 4)
		    {
			Popup::Error(_("Password length should be greater than three characters."));
			ret = `again;
		    }
		    else
		    {
			if (CaMgm::prop_ca_commonName != (string) UI::QueryWidget (`id (`id_commonName), `Value))
			{
			    CaMgm::prop_ca_commonName = (string) UI::QueryWidget (`id (`id_commonName), `Value);
			    CaMgm::prop_ca_commonNameChanged = true;
			}
			if (CaMgm::prop_server_commonName != (string) UI::QueryWidget (`id (`id_serverName), `Value))
			{
			    CaMgm::prop_server_commonName = (string) UI::QueryWidget (`id (`id_serverName), `Value);
			    CaMgm::prop_server_commonNameChanged = true;
			}
			if (CaMgm::prop_CAName != (string) UI::QueryWidget(`id(`id_CAName), `Value))
			{
			    CaMgm::prop_CAName = (string) UI::QueryWidget(`id(`id_CAName), `Value);
			    CaMgm::prop_CANameChanged = true;
			}
			if (CaMgm::prop_password != (string) UI::QueryWidget(`id(`pw1), `Value))
			{
			    CaMgm::prop_password = (string) UI::QueryWidget(`id(`pw1), `Value);
			    CaMgm::prop_passwordChanged = true;
			}
			if (CaMgm::prop_country != (string) UI::QueryWidget(`id(`id_country), `Value))
			{
			    CaMgm::prop_country = (string) UI::QueryWidget(`id(`id_country), `Value);
			    CaMgm::prop_countryChanged = true;
			}
			if (CaMgm::prop_email != (string) UI::QueryWidget(`id(`email), `Value))
			{
			    if (check_mail_address((string) UI::QueryWidget(`id(`email), `Value)))
			    {
				CaMgm::prop_email = (string) UI::QueryWidget(`id(`email), `Value);
				CaMgm::prop_emailChanged = true;
			    }
			    else
			    {
				Popup::Error(_("Invalid e-mail format."));
				ret = `again;
			    }
			}

			CaMgm::prop_organisation = (string) UI::QueryWidget(`id(`id_organisation), `Value);
			CaMgm::prop_organisationUnit = (string) UI::QueryWidget(`id(`id_organisationUnit), `Value);
			CaMgm::prop_locality = (string) UI::QueryWidget(`id(`id_locality), `Value);
			CaMgm::prop_state = (string) UI::QueryWidget(`id(`id_state), `Value);
			CaMgm::prop_subject_alt_name_list = temp_alt_names;
			CaMgm::prop_adv_cri_issuer_alt_name = temp_cri_alt;
			y2milestone("alt names %1", CaMgm::prop_subject_alt_name_list);
		    }
		}
	    }
	until ( ret == `next
		|| ret == `abort
		|| ret == `back);
	
	UI::CloseDialog ();
	return ret;
    };



   /* ----------------------------------------------------------------------
    * MAIN module
    * ----------------------------------------------------------------------*/
    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("ca-management");    
    
    string heading = _("Managing CAs and Certificates");

    term contents = `Frame ( _("Selection"),
				 `RadioButtonGroup(`id(`rb),
						   `VBox(
							 `Left(`RadioButton(`id(`def), `opt( `notify),
									    _("Create &Default CA and Certificate"))),
							 `HBox(`HSpacing (3),`Left(`PushButton (`id(`change),
												`opt( `notify),
												_("Edit Default &Settings")))
							       ),
							 `Left(`RadioButton(`id(`none), `opt( `notify),
									    _("Do &Not Create CA and Certificate"))),
							 `Left(`RadioButton(`id(`disk), `opt( `notify),
									    _("Import CA and Certificate from D&isk")))
							 )
						   )
			     );

    string help_text = _("<p>
In this frame, select the desired installation method for <b>CAs</b> and <b>certificates</b>
while completing the installation.
</p>
");

    help_text = help_text + _("<p>
You also have the possibility of creating the default CA and certificate in the installed system 
if you do not want to create or import it now.
</p>
");

    // Screen title for the first interactive dialog
    Wizard::SetContentsButtons (heading, contents, help_text,
				Label::BackButton(), Label::NextButton());

    UI::ChangeWidget (`id(`rb), `CurrentButton, CaMgm::prop_selection);


    // Get the user input.
    //
    any ret = nil;

    repeat
    {
	UI::ChangeWidget (`id (`change), `Enabled,
			  UI::QueryWidget(`id(`rb), `CurrentButton) == `def);

	ret = Wizard::UserInput();

	if (ret == `next
	    || ret == `rb )
	{
	    // Get selection
	    //
	    CaMgm::prop_selection = (symbol) UI::QueryWidget(`id(`rb), `CurrentButton);
	}
	if (ret == `change)
	{
	    ret = editDefaultEntries ();
	    if (ret != `abort)
	    {
		ret = `again;
	    }
	}
    }
    until ( ret == `next
	    || ret == `abort
	    || ret == `back);
    
    UI::CloseDialog();

    return (symbol) ret;
}
