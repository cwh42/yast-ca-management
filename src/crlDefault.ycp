/**
 *
 * File:
 *   crlDefault.ycp
 *
 * Module:
 *   CA Management
 *
 * Summary:
 *   Edit CRL defaults for a selected CA
 *
 * Authors:
 *   Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Edit CRL default for a selected CA
 *
 */


{

    textdomain "ca-management";

    import "CaMgm";
    import "Wizard";
    import "Label";
    import "Popup";
    import "YaPI::CaManagement";

    include "ca-management/util.ycp";
    include "ca-management/new_cert_callbacks.ycp";

    /**
     * Editing CRL defaults of a selected CA
     * @param selected CA
     */
    define void editCRLDefaults (string ca) ``{

	map ret = (map) YaPI::CaManagement::ReadCRLDefaults ($["caName":ca]);
	y2milestone ("ReadCRLDefaults(%1) return %2",
		     $["caName":ca], ret );

	CaMgm::exp_authorityKeyIdentifier = "";
	CaMgm::exp_cri_authorityKeyIdentifier = false;
	CaMgm::adv_cri_issuer_alt_name = false;
	CaMgm::adv_copy_issuer_alt_name	= false;
	CaMgm::validPeriod = 1;
	
	list<string> dummy = splitstring (ret["authorityKeyIdentifier"]:"", ",");
	integer counter = 0;
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::exp_cri_authorityKeyIdentifier = true;
	    }
	    else
	    {
		if (counter == 0)
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			ident + ((size(value) > 0) ? ":" : "") + value;
		}
		else
		{
		    CaMgm::exp_authorityKeyIdentifier = CaMgm::exp_authorityKeyIdentifier +
			"," + ident + ((size(value) > 0) ? ":" : "") + value;
		}
		counter = counter +1;
	    }
	});

	list<term> itemList = [];
	integer i = 0;
	CaMgm::adv_issuer_alt_name_list = [];
	dummy = splitstring (ret["issuerAltName"]:"", ",");
	foreach ( string entry, dummy, ``{
	    entry = strip(entry);
	    list valuelist = splitstring (entry,":");
	    string ident = strip(valuelist[0]:"");
	    string value = strip(valuelist[1]:"");
	    
	    if (ident == "critical")
	    {
		CaMgm::adv_cri_issuer_alt_name = true;
	    }
	    else if (ident == "issuer"
		     && value == "copy")
	    {
		CaMgm::adv_copy_issuer_alt_name = true;
	    }
	    else
	    {
		map new_entry = $[];
		new_entry["kind"] = ident;
		new_entry["name"] = value;
		CaMgm::adv_issuer_alt_name_list	= add (CaMgm::adv_issuer_alt_name_list, new_entry);
		itemList = add (itemList, `item (`id (i), ident, value) );
		i = i + 1;		
	    }
	});

	CaMgm::validPeriod = tointeger(ret["days"]:"0");
	
        // help text 1/3
        string helptext = _("<p>When creating a new CRL, the system suggests some default values.</p>");
        // help text 2/3 
        helptext = helptext + _("<p>With this frame, change these default settings.</p>");
        // help text 3/3
        helptext = helptext + _("<p>However, the modified settings will be used for <b>new</B> entries only.</p>");

        term contents = `VBox ();

	contents = add (contents, `IntField( `id (`id_validPeriod),
					    _("&Valid Period (days):"), 1, 10000,
					    CaMgm::validPeriod));

	contents = add (contents, `Frame ("Authority Key Identifier",
					  `VBox (`Left (`CheckBox(`id(`id_exp_cri_authorityKeyIdentifier),
								  _("&critical"),
								  CaMgm::exp_cri_authorityKeyIdentifier)),
						 `TextEntry(`id(`id_exp_authorityKeyIdentifier),
							    "",
							    CaMgm::exp_authorityKeyIdentifier)
						 )));
			
	contents = add (contents, `Frame ("Issuer Alt Name",
					  `VBox (`Left (`CheckBox(`id(`id_adv_cri_issuer_alt_name),
								  _("c&ritical"),
								  CaMgm::adv_cri_issuer_alt_name)
							),
						 `Left (`CheckBox(`id(`id_adv_copy_issuer_alt_name),
								  _("C&opy Subject Alt Name from CA"),
								  CaMgm::adv_copy_issuer_alt_name)
							),
						 `HBox (`HWeight (3,`Table (`id (`id_adv_issuer_alt_name),
									    `header (
										     // To translators: table headers
										     _("Kind"),
										     _("Name")
										     )
									    )
								  ),
							`HWeight (1,`VBox(
									  `HBox ( `HWeight (1,
											    `PushButton (`id (`add),
													 `opt (`key_F3),
													 Label::AddButton()))),
									  `HBox ( `HWeight (1,
											    `PushButton (`id (`modify),
													     `opt (`key_F3),
													 Label::EditButton()))),
									  `HBox ( `HWeight (1,
											    `PushButton (`id (`delete),
													 `opt (`key_F5),
													 Label::DeleteButton()))),
									  `VStretch()
									  )
								  )
							)	
						 )
					  ));

	Wizard::CreateDialog();
        Wizard::SetContentsButtons ( _("Default CRL Settings"), contents, helptext,
			      Label::BackButton (), Label::OKButton ());
				
	UI::ChangeWidget(`id(`id_adv_issuer_alt_name), `Items, itemList);	

	Wizard::DisableBackButton();

        symbol ui = nil;

        repeat
        {
            ui = (symbol) UI::UserInput ();

	    CaMgm::adv_cri_issuer_alt_name = (boolean) UI::QueryWidget(`id(`id_adv_cri_issuer_alt_name), `Value);
	    CaMgm::adv_copy_issuer_alt_name = (boolean) UI::QueryWidget(`id(`id_adv_copy_issuer_alt_name), `Value);
	    CaMgm::exp_cri_authorityKeyIdentifier = (boolean) UI::QueryWidget(`id(`id_exp_cri_authorityKeyIdentifier), `Value);
	    CaMgm::exp_authorityKeyIdentifier = (string) UI::QueryWidget(`id(`id_exp_authorityKeyIdentifier), `Value);
	    CaMgm::validPeriod = (integer) UI::QueryWidget(`id(`id_validPeriod), `Value);			    

	    if (ui == `add)
	    {
		add_advanced_issuer_alt_name();
	    }

	    if (ui == `delete)
	    {
		delete_advanced_issuer_alt_name();
	    }

	    if (ui == `modify)
	    {
		modify_advanced_issuer_alt_name();
	    }

	    if (ui == `next)
	    {
		map<string,any> param = $[];
		
		if (size(CaMgm::adv_issuer_alt_name_list) > 0
		    || CaMgm::adv_copy_issuer_alt_name )
		{
		    boolean prevFound = false;
		    if (CaMgm::adv_cri_issuer_alt_name)
		    {
			param["issuerAltName"] = "critical";
			prevFound = true;
		    }
		    else
		    {
			param["issuerAltName"] = "";
		    }
		    foreach (map element, CaMgm::adv_issuer_alt_name_list, ``{
			param["issuerAltName"] = param["issuerAltName"]:"" +
			    (prevFound ? "," : "") +
			    element["kind"]:"" + ":" +
			    element["name"]:"";		    
			prevFound = true;
		    });				
		    if (CaMgm::adv_copy_issuer_alt_name)
		    {
			param["issuerAltName"] = param["issuerAltName"]:"" +
			    (prevFound ? "," : "") +
			    "issuer:copy";
		    }	
		}
		
		param["days"] = tostring (CaMgm::validPeriod);

		if (size(CaMgm::exp_authorityKeyIdentifier) > 0)
		{
		    if (CaMgm::exp_cri_authorityKeyIdentifier)
		    {
			param["authorityKeyIdentifier"] = "critical," + CaMgm::exp_authorityKeyIdentifier;
		    }
		    else
		    {
			param["authorityKeyIdentifier"] = CaMgm::exp_authorityKeyIdentifier;   
		    }
		}
		
		param["caName"] = ca;


		boolean writeret = (boolean) YaPI::CaManagement::WriteCRLDefaults (param);
		y2milestone ("WriteCRLDefaults(%1) return %2",
			     param, writeret);
		if (writeret == nil
		    || !writeret)
		{
		    showErrorCaManagement ();
		    ui = `again;
		}		
	    }
        }
        until (contains ([`next, `abort], ui));
	
	UI::CloseDialog();

    }



}
