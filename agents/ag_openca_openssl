#! /usr/bin/perl

package ag_openca_openssl;
use YaST::SCRAgent;
use ycp;
our @ISA = ("YaST::SCRAgent");

use OpenCA::OpenSSL;

my $openssl = undef;
my $CAM_ROOT = "/var/lib/YaST2/CAM/";
my $privkeyalg = "des3";

sub check_initialized ()
{
    my $class = shift;
    if (not defined $openssl)
    {
        $class->SetError(summary => "Agent not initialized yet",
                         code => "SCR_INIT_ERR");
    }
    return !!$openssl;
}

sub OtherCommand () {
    my $class = shift;
    my ($symbol, $config, @rest) = @_;
    
    if ($symbol ne "OpenSSL") {
        return $class->SetError(summary=> "The first command must be the configuration.(Seen '$_')",
                                code => "SCR_INIT_ERR");
    } else {
        $openssl = OpenCA::OpenSSL->new( SHELL => $config->{"path"} );
        if( not defined $openssl ) {
            return $class->SetError(summary => "Can not initialize OpenCA::OpenSSL",
                                    code => "SCR_INIT_ERR");
        }
        $openssl->setParams(TMPDIR=>$config->{"tmpdir"},
                            STDERR=>$config->{"stderr"},
                            DEBUG=>1
                           );
        $privkeyalg = $config->{'privkeyalg'};
    }
    
    return 1;
}

sub setConfig {
    my $class  = shift;
    my $caName = shift;

    $class->check_initialized() || return 0;
    if( ! -e "$CAM_ROOT/$caName/openssl.cnf" ) {
        $class->SetError(summary=>"config does not exist!",
                         code =>"SCR_INIT_ERR");
        return 0;
    }
    $openssl->setParams(
                        CONFIG=>"$CAM_ROOT/$caName/openssl.cnf"
                       );
    return 1;
}

sub Read { 
    return 1;
}

sub Write { 
    return 1; 
}

sub Execute {
    my $class  = shift;
    my $path   = shift;
    my $caName = shift;
    $class->check_initialized || return undef;
    
    $class->setConfig($caName) || return undef;

    if($path eq ".genKey") {
        $hash = shift;
        if(not defined $hash->{'ALGORITHM'}) {
            $hash->{'ALGORITHM'} = $privkeyalg;
        }
        $openssl->genKey( %{$hash} );
        if($openssl->errno() != 0) {
            return $class->SetError(summary => "OpenCA::OpenSSL::genKey failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return 1;
    } elsif($path eq ".genReq") {
        $hash = shift;
        $openssl->genReq( %{$hash} );
        if($openssl->errno() != 0) {
            return $class->SetError(summary => "OpenCA::OpenSSL::genReq failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return 1;
    } elsif($path eq ".genCert") {
        $hash = shift;
        $openssl->genCert( %{$hash} );
        if($openssl->errno() != 0) {
            return $class->SetError(summary => "OpenCA::OpenSSL::genCert failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return 1;
    } elsif($path eq ".issueCert") {
        $hash = shift;
        $openssl->issueCert( %{$hash} );
        if($openssl->errno() != 0) {
            return $class->SetError(summary => "OpenCA::OpenSSL::issueCert failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return 1;
    } elsif($path eq ".getNumericDate") {
        $date = shift;
        my $ret = $openssl->getNumericDate( $date );
        if($openssl->errno() != 0 || not defined $ret) {
            return $class->SetError(summary => "OpenCA::OpenSSL::getNumericDate failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return $ret;
    } elsif($path eq ".updateDB") {
        my $hash = shift;
        $openssl->updateDB(%{$hash});
        if($openssl->errno() != 0 || not defined $ret) {
            return $class->SetError(summary => "OpenCA::OpenSSL::updateDB failed! (".
                                    $openssl->errno()."/".$openssl->errval().")",
                                    code => "SCR_EXECUTE_FAILED");
        }
        return 1;
    } else {
        return $class->SetError(summary => "Wrong path '$path' ",
                                code => "SCR_WRONG_PATH");
    }
}
  

package main;
ag_openca_openssl->Run;

