#! /usr/bin/perl -w

package ag_ca_tools;
use strict;
use YaST::SCRAgent;
use ycp;
our @ISA = ("YaST::SCRAgent");

my $CAM_ROOT = "/var/lib/YaST2/CAM/";
my $TEMPLATE = "$CAM_ROOT/openssl.cnf.tmpl";

sub Read {
    my $class = shift;
    my $path  = shift;
    
    if($path eq ".caList") {
        my @av_ca = ();
        if (opendir(CAMDIR, "$CAM_ROOT")) {
            foreach my $d (readdir(CAMDIR)) {
                if ($d !~ /^\./) {
                    if (-d "$CAM_ROOT/$d" && -e "$CAM_ROOT/$d/openssl.cnf.tmpl") {
                        push @av_ca, $d;
                    }
                }
            }
            closedir(CAMDIR);
        } else {
            return $class->SetError( code    => "Opendir_Failed",
                                     summary => "Can not read directory '$CAM_ROOT' '$!'");
        }
        return \@av_ca;
    } elsif($path eq ".nextSerial") {
        my $caName = shift || return $class->SetError(summary =>"Parameter 'caName' missing",
                                                      code => "PARAM_CHECK_FAILED");
        my $ret = undef;
        if(!open(SER, "< $CAM_ROOT/$caName/serial")) {
            return $class->SetError( summary => "Can not open '$CAM_ROOT/$caName/serial' '$!'",
                                     code    => "OPEN_FAILED");            
        }
        while(my $l = <SER>) {
            chomp $l;
            if($l =~ /^[[:xdigit:]]+$/) {
                $ret = $l;
                last;
            }
        }
        close SER;
        if(not defined $ret) {
            return $class->SetError(summary => "No serial number found in '$CAM_ROOT/$caName/serial'",
                                    code => "PARSING_ERROR");
        } else {
            return $ret;
        }
    } elsif($path eq ".certificateList") {
        my $caName = shift || return $class->SetError(summary =>"Parameter 'caName' missing",
                                                      code => "PARAM_CHECK_FAILED");
        my @ret = ();

        my $indextxt = $class->parseIndexTXT($caName);
        if (opendir(CERTDIR, "$CAM_ROOT/$caName/newcerts/")) {
            foreach my $d (readdir(CERTDIR)) {
                if ($d !~ /^\./ && -e "$CAM_ROOT/$caName/newcerts/$d") {
                    $d =~ /^([[:xdigit:]]+):([[:xdigit:]]+)\.pem$/;
                    if(!defined $1 || !defined $2) {
                        y2warning("unknown filename $d");
                        next;
                    }
                    my $serial = $1;
                    my $md5 = $2;
                    my $subject = "";
                    my $certLine = {};
                    $certLine->{'serial'} = $serial;
                    $certLine->{'certificate'} = "$serial:$md5";

                    foreach my $d (@$indextxt) {
                        if($d->[3] eq "$serial") {
                            $subject = $d->[5];
                            $certLine->{'status'} = $d->[0];
                            last;
                        }
                    }
                    if($subject eq "") {
                        return $class->SetError(summary => "Can not find certificate subject.",
                                                code => "PARSE_ERROR");
                    }
                    my @rdns = ();
                    while( $subject =~ /(.*?[^\\])(\/|$)/g ) {
                        my $dummy = $1;
                        $dummy =~ s/^\///;
                        $dummy =~ s/\\\//\//;
                        
                        push( @rdns, $dummy );
                    }

                    foreach my $rdn (@rdns) {
                        if($rdn =~ /^C=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'country'} = $1;
                        } elsif($rdn =~ /^ST=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'stateOrProvinceName'} = $1;
                        } elsif($rdn =~ /^L=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'localityName'} = $1;
                        } elsif($rdn =~ /^O=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'organizationName'} = $1;
                        } elsif($rdn =~ /^OU=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'organizationalUnitName'} = $1;
                        } elsif($rdn =~ /^CN=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'commonName'} = $1;
                        } elsif($rdn =~ /^emailAddress=(.*)$/ && defined $1 && $1 ne "") {
                            $certLine->{'emailAddress'} = $1;
                        }
                    }
#                    my $stat = $class->status($caName, $certLine->{'certificate'});
#                    if(not defined $stat) {
#                        return undef;
#                    }
#                    $certLine->{'status'} = $stat;
                    push @ret, $certLine;
                }
            }
            closedir(CERTDIR);
            return \@ret;
        } else {
            return $class->SetError( code    => "Opendir_Failed",
                                     summary => "Can not read directory '$CAM_ROOT' '$!'");
        }
    } elsif($path eq ".status") {
        my $caName = shift || return $class->SetError(summary =>"Parameter 'caName' missing",
                                                      code => "PARAM_CHECK_FAILED");
        my $certificate = shift || return $class->SetError(summary =>"Parameter 'certificate' missing",
                                                           code => "PARAM_CHECK_FAILED");
        return $class->status($caName, $certificate);
    } elsif($path eq ".checkKey") {
        my $caName = shift || return $class->SetError(summary =>"Parameter 'caName' missing",
                                                      code => "PARAM_CHECK_FAILED");
        my $data = shift || return $class->SetError(summary =>"Parameter 'data' missing",
                                                    code => "PARAM_CHECK_FAILED");
        
        if(not defined $data->{'PASSWORD'}) {
            return $class->SetError(summary =>"Parameter 'PASSWORD' missing",
                                    code => "PARAM_CHECK_FAILED");
        }
        $ENV{'PASSWORD'} = $data->{'PASSWORD'};
        if(defined $data->{'CACERT'}) {
            my $command ="openssl rsa -noout -in ";
            $command .= "$CAM_ROOT/$caName/cacert.key ";
            $command .= "-passin env:PASSWORD ";
            my $ret = `$command 2>/dev/null`;
            if($? != 0) {
                delete( $ENV{'PASSWORD'} );
                return $class->SetError(summary =>"Wrong password",
                                        code => "PARAM_CHECK_FAILED");
            } else {
                delete( $ENV{'PASSWORD'} );
                return 1;
            }
        } elsif(defined $data->{'CERT'}) {
            $data->{'CERT'} =~ /^[[:xdigit:]]+:([A-Za-z0-9\/=+]+)$/;
            if(not defined $1) {
                return $class->SetError(summary => "Can not parse certificate name",
                                       code => "PARSING_ERROR");
            }
            my $keyname = $1;
            
            if(!-e "$CAM_ROOT/$caName/keys/".$keyname.".key") {
                delete( $ENV{'PASSWORD'} );
                return $class->SetError(summary =>"Key '".$keyname.".key' does not exist in CA '$caName'",
                                        code => "PARAM_CHECK_FAILED");
            }
            my $command ="openssl rsa -noout -in ";
            $command .= "$CAM_ROOT/$caName/keys/".$keyname.".key ";
            $command .= "-passin env:PASSWORD ";
            my $ret = `$command 2>/dev/null`;
            if($? != 0) {
                delete( $ENV{'PASSWORD'} );
                return $class->SetError(summary =>"Wrong password",
                                        code => "PARAM_CHECK_FAILED");
            } else {
                delete( $ENV{'PASSWORD'} );
                return 1;
            }
        } else {
            return $class->SetError(summary =>"Missing 'CACERT' or 'CERT' parameter",
                                    code => "PARAM_CHECK_FAILED");
        }

    } else {
        return $class->SetError(summary => "Wrong path '$path' ",
                                code => "SCR_WRONG_PATH");
    }
    return 1;
}

sub Write {
    my $class = shift;
    my $path = shift;

    if($path eq ".caInfrastructure") {
        my $caName = shift || return $class->SetError(summary => "Missing value caName",
                                                      code => "PARAM_CHECK_FAILED");

        if( not defined $class->createCaInf($caName)) {
            return 0;
        }
    } elsif($path eq ".addCAM") {
        my $caName = shift || return $class->SetError(summary => "Missing value caName",
                                                      code => "PARAM_CHECK_FAILED");
        my $hash   = shift || return $class->SetError(summary => "Missing parameter.",
                                                    code => "PARAM_CHECK_FAILED");
        my $md5 = $hash->{MD5} || return $class->SetError(summary => "Missing parameter 'MD5'.",
                                                          code => "PARAM_CHECK_FAILED");
        my $dn  = $hash->{DN} || return $class->SetError(summary => "Missing parameter 'DN'.",
                                                         code => "PARAM_CHECK_FAILED");

        # FIXME: look in cam.txt if md5 already exist
        if(!open(DB, ">> $CAM_ROOT/$caName/cam.txt")) {
            return $class->SetError(summary => "Can not open cam.txt.",
                                    description => "$!",
                                    code => "OPEN_FAILED");
            }
        print DB "$md5 $dn\n";
        close DB;
    } elsif($path eq ".delCAM") {
        my $caName = shift || return $class->SetError(summary => "Missing value caName",
                                                      code => "PARAM_CHECK_FAILED");
        my $hash   = shift || return $class->SetError(summary => "Missing parameter.",
                                                    code => "PARAM_CHECK_FAILED");
        my $md5 = $hash->{MD5} || return $class->SetError(summary => "Missing parameter 'MD5'.",
                                                          code => "PARAM_CHECK_FAILED");

        if(!open(DB, "< /$CAM_ROOT/$caName/cam.txt")) {
            return $class->SetError(summary => "Can not open cam.txt.",
                                    description => "$!",
                                    code => "OPEN_FAILED");
        }
        my @cam = <DB>;
        close DB;
        my @new_cam = ();
        foreach my $l (@cam) {
            if($l !~ /^$md5/) {
                push @new_cam, $l;
            }
        }
        if(!open(DB2, "> /$CAM_ROOT/$caName/cam.txt")) {
            return $class->SetError(summary => "Can not open cam.txt.",
                                    description => "$!",
                                    code => "OPEN_FAILED");
        }
        print DB2 @new_cam;
        close DB2;
    } else {
        return $class->SetError(summary => "Wrong path '$path' ",
                                code => "SCR_WRONG_PATH");
    }
    
    return 1;
}

sub createCaInf {
    my $class  = shift;
    my $caName = shift;
    
    if( !defined $caName || ($caName eq "") || ($caName =~ /\./)) {
        return $class->SetError( 'summary' => 'missing parameter caName' ,
                                 'code'    => 'PARAM_CHECK_FAILED');
    }
    
    if (!-d $CAM_ROOT) {
        return $class->SetError( summary => "'$CAM_ROOT' does not exist!",
                                 code    => 'FS_ERROR') ;
    }

    if ( -d "$CAM_ROOT/$caName" ) {
        return $class->SetError( summary => "'$CAM_ROOT/$caName' still exist",
                                 code    => 'DIR_ALREADY_EXIST');
    }
    
    if (!mkdir("$CAM_ROOT/$caName", 0700)) {
        return $class->SetError( summary => "Can not create '$CAM_ROOT/$caName' '$!'",
                                 code    => 'CREATE_DIR_FAILED') ;
    }

    if( !open(IN, "< $TEMPLATE")) {
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not open '$TEMPLATE' '$!'",
                                 code    => "OPEN_FAILED");
        
    }
    if(!open(OUT, ">  $CAM_ROOT/$caName/openssl.cnf.tmpl") ) { 
        rmdir("$CAM_ROOT/$caName");
        close IN;
        return $class->SetError(summary => "Can not open '$CAM_ROOT/$caName/openssl.cnf.tmpl' '$!'",
                                code    => "OPEN_FAILED");
    }
    while(my $l = <IN>) {
        chomp $l;
        $l .= "$caName" if($l =~ /^dir=/);
        print OUT "$l\n";
    }
    close IN;
    close OUT;

    if (!mkdir("$CAM_ROOT/$caName/certs", 0700) ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create certificate directory '$CAM_ROOT/$caName/certs' '$!'",
                                 code    => "MKDIR_FAILED");
    }
    if (!mkdir("$CAM_ROOT/$caName/crl", 0700) ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create CRL directory '$CAM_ROOT/$caName/crl' '$!'",
                                 code    => "MKDIR_FAILED");
    }
    if (!mkdir("$CAM_ROOT/$caName/newcerts", 0700) ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create directory for new certificates '$CAM_ROOT/$caName/newcerts' '$!'",
                                 code    => "MKDIR_FAILED");
}
    if (!mkdir("$CAM_ROOT/$caName/req", 0700) ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName/newcerts");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create request directory '$CAM_ROOT/$caName/req' '$!'",
                                 code    => "MKDIR_FAILED");
    }
    if (!mkdir("$CAM_ROOT/$caName/keys", 0700) ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName/req");
        rmdir("$CAM_ROOT/$caName/newcerts");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create key directory '$CAM_ROOT/$caName/keys' '$!'",
                                 code    => "MKDIR_FAILED");
    }


    if (!open(SR, "> $CAM_ROOT/$caName/serial") ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        rmdir("$CAM_ROOT/$caName/keys");
        rmdir("$CAM_ROOT/$caName/req");
        rmdir("$CAM_ROOT/$caName/newcerts");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create serial file '$CAM_ROOT/$caName/serial' '$!'",
                                 code    => "OPEN_FAILED");
    }
    print SR "01";
    close SR;

    if (!open(DB, "> $CAM_ROOT/$caName/index.txt") ) {
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        unlink("$CAM_ROOT/$caName/serial");
        rmdir("$CAM_ROOT/$caName/keys");
        rmdir("$CAM_ROOT/$caName/req");
        rmdir("$CAM_ROOT/$caName/newcerts");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create database '$CAM_ROOT/$caName/index.txt' '$!'",
                                 code    => "OPEN_FAILED");
    }
    close DB;

    if (!open(DB2, "> $CAM_ROOT/$caName/cam.txt") ) {
        unlink("$CAM_ROOT/$caName/index.txt");
        unlink("$CAM_ROOT/$caName/openssl.cnf.tmpl");
        unlink("$CAM_ROOT/$caName/serial");
        rmdir("$CAM_ROOT/$caName/keys");
        rmdir("$CAM_ROOT/$caName/req");
        rmdir("$CAM_ROOT/$caName/newcerts");
        rmdir("$CAM_ROOT/$caName/crl");
        rmdir("$CAM_ROOT/$caName/certs");
        rmdir("$CAM_ROOT/$caName");
        return $class->SetError( summary => "Can not create database '$CAM_ROOT/$caName/cam.txt' '$!'",
                                 code    => "OPEN_FAILED");
    }
    close DB2;
    
    return 1;
}

sub status {
    my $class       = shift || return undef;
    my $caName      = shift || return $class->SetError(summary =>"Missing Parameter 'caName'",
                                                       code => "PARAM_CHECK_FAILED");
    my $certificate = shift || return $class->SetError(summary =>"Missing Parameter 'certificate'",
                                                       code => "PARAM_CHECK_FAILED");;
    my $serial = "";

    $certificate =~ /^([[:xdigit:]]+):[A-Za-z0-9\/=+]+$/;
    if(!defined $1) {
        return $class->SetError(summary=>"Unknown certificate name '$certificate'",
                                code=>"PARAM_CHECK_FAILED");
    }
    $serial = $1;

    my $command = "/usr/bin/openssl ca ";
    $command .= "-config $CAM_ROOT/$caName/openssl.cnf.tmpl ";
    $command .= "-status $serial";
    if (not open( FD, "$command 2>&1|" )) {
        return $class->SetError(summary => "Cannot open pipe to OpenSSL.",
                                code => "OPEN_FAILED");
    }
    my @ret = <FD>;
    close(FD);
    my $err = "";
    foreach my $line (@ret) {
        next if($line =~ /^Using configuration from/);
        if($line =~ /^$serial=(\w+)\s+.*$/) {
            return $1;
        } else {
            $err .= $line;
            y2error("status:".$line);
        }
    }
    return $class->SetError(summary => "Error at Read status",
                            description => $err,
                            code => "SCR_READ_FAILED");
}

sub parseIndexTXT {
    my $class   = shift || return undef;
    my $caName  = shift || return $class->SetError(summary =>"Missing Parameter 'caName'",
                                                   code => "PARAM_CHECK_FAILED");

    my @indextxt = ();

    if(!open(IDX, "< $CAM_ROOT/$caName/index.txt")) {
        return $class->SetError(summary => "Cannot open Database file '$CAM_ROOT/$caName/index.txt'.",
                                description => "$!",
                                code => "OPEN_FAILED");
    }
    my @lines = <IDX>;
    close IDX;
    
    foreach my $l (@lines) {
        $l =~ /^(\w)\s([\d\w]+)\s([\w\d,]*)\s([[:xdigit:]]+)\s(\w+)\s(.*)$/;
        my @idxrow = ();
        push @idxrow, $1, $2, $3, $4, $5, $6;
        push @indextxt, \@idxrow;
    }
    return \@indextxt;
}

sub parseCAMDB {
    my $class   = shift || return undef;
    my $caName  = shift || return $class->SetError(summary =>"Missing Parameter 'caName'",
                                                   code => "PARAM_CHECK_FAILED");

    my @camdb = ();

    if(!open(DB, "< $CAM_ROOT/$caName/cam.txt")) {
        return $class->SetError(summary => "Cannot open Database file '$CAM_ROOT/$caName/cam.txt'.",
                                description => "$!",
                                code => "OPEN_FAILED");
    }
    my @lines = <DB>;
    close DB;
    
    foreach my $l (@lines) {
        $l =~ /^([[:xdigit:]]+)\s(.*)$/;
        my @row = ();
        push @row, $1, $2;
        push @camdb, \@row;
    }
    return \@camdb;
}


package main;
ag_ca_tools->Run;
